!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Swiper=t()}(this,function(){"use strict";var m="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,ee="undefined"==typeof window?{document:m,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window,l=function(e){for(var t=0;t<e.length;t+=1)this[t]=e[t];return this.length=e.length,this};function I(e,t){var a=[],i=0;if(e&&!t&&e instanceof l)return e;if(e)if("string"==typeof e){var s,n,r=e.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){var o="div";for(0===r.indexOf("<li")&&(o="ul"),0===r.indexOf("<tr")&&(o="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(o="tr"),0===r.indexOf("<tbody")&&(o="table"),0===r.indexOf("<option")&&(o="select"),(n=m.createElement(o)).innerHTML=r,i=0;i<n.childNodes.length;i+=1)a.push(n.childNodes[i])}else for(s=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||m).querySelectorAll(e.trim()):[m.getElementById(e.trim().split("#")[1])],i=0;i<s.length;i+=1)s[i]&&a.push(s[i])}else if(e.nodeType||e===ee||e===m)a.push(e);else if(0<e.length&&e[0].nodeType)for(i=0;i<e.length;i+=1)a.push(e[i]);return new l(a)}function n(e){for(var t=[],a=0;a<e.length;a+=1)-1===t.indexOf(e[a])&&t.push(e[a]);return t}I.fn=l.prototype,I.Class=l,I.Dom7=l;var t={addClass:function(e){if(void 0===e)return this;for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.add(t[a]);return this},removeClass:function(e){for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.remove(t[a]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){for(var t=e.split(" "),a=0;a<t.length;a+=1)for(var i=0;i<this.length;i+=1)void 0!==this[i]&&void 0!==this[i].classList&&this[i].classList.toggle(t[a]);return this},attr:function(e,t){var a=arguments;if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===a.length)this[i].setAttribute(e,t);else for(var s in e)this[i][s]=e[s],this[i].setAttribute(s,e[s]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){var a;if(void 0!==t){for(var i=0;i<this.length;i+=1)(a=this[i]).dom7ElementDataStorage||(a.dom7ElementDataStorage={}),a.dom7ElementDataStorage[e]=t;return this}if(a=this[0]){if(a.dom7ElementDataStorage&&e in a.dom7ElementDataStorage)return a.dom7ElementDataStorage[e];var s=a.getAttribute("data-"+e);return s?s:void 0}},transform:function(e){for(var t=0;t<this.length;t+=1){var a=this[t].style;a.webkitTransform=e,a.transform=e}return this},transition:function(e){"string"!=typeof e&&(e+="ms");for(var t=0;t<this.length;t+=1){var a=this[t].style;a.webkitTransitionDuration=e,a.transitionDuration=e}return this},on:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a=e[0],n=e[1],r=e[2],i=e[3];function s(e){var t=e.target;if(t){var a=e.target.dom7EventData||[];if(a.indexOf(e)<0&&a.unshift(e),I(t).is(n))r.apply(t,a);else for(var i=I(t).parents(),s=0;s<i.length;s+=1)I(i[s]).is(n)&&r.apply(i[s],a)}}function o(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&(a=e[0],r=e[1],i=e[2],n=void 0),i=i||!1;for(var l,d=a.split(" "),c=0;c<this.length;c+=1){var p=this[c];if(n)for(l=0;l<d.length;l+=1){var u=d[l];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[u]||(p.dom7LiveListeners[u]=[]),p.dom7LiveListeners[u].push({listener:r,proxyListener:s}),p.addEventListener(u,s,i)}else for(l=0;l<d.length;l+=1){var h=d[l];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[h]||(p.dom7Listeners[h]=[]),p.dom7Listeners[h].push({listener:r,proxyListener:o}),p.addEventListener(h,o,i)}}return this},off:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a=e[0],i=e[1],s=e[2],n=e[3];"function"==typeof e[1]&&(a=e[0],s=e[1],n=e[2],i=void 0),n=n||!1;for(var r=a.split(" "),o=0;o<r.length;o+=1)for(var l=r[o],d=0;d<this.length;d+=1){var c=this[d],p=void 0;if(!i&&c.dom7Listeners?p=c.dom7Listeners[l]:i&&c.dom7LiveListeners&&(p=c.dom7LiveListeners[l]),p&&p.length)for(var u=p.length-1;0<=u;--u){var h=p[u];(!s||h.listener!==s)&&!(s&&h.listener&&h.listener.dom7proxy&&h.listener.dom7proxy===s)&&s||(c.removeEventListener(l,h.proxyListener,n),p.splice(u,1))}}return this},trigger:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=e[0].split(" "),i=e[1],s=0;s<a.length;s+=1)for(var n=a[s],r=0;r<this.length;r+=1){var o=this[r],l=void 0;try{l=new ee.CustomEvent(n,{detail:i,bubbles:!0,cancelable:!0})}catch(e){(l=m.createEvent("Event")).initEvent(n,!0,!0),l.detail=i}o.dom7EventData=e.filter(function(e,t){return 0<t}),o.dispatchEvent(l),o.dom7EventData=[],delete o.dom7EventData}return this},transitionEnd:function(t){var a,i=["webkitTransitionEnd","transitionend"],s=this;function n(e){if(e.target===this)for(t.call(this,e),a=0;a<i.length;a+=1)s.off(i[a],n)}if(t)for(a=0;a<i.length;a+=1)s.on(i[a],n);return this},outerWidth:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(0<this.length){var e=this[0],t=e.getBoundingClientRect(),a=m.body,i=e.clientTop||a.clientTop||0,s=e.clientLeft||a.clientLeft||0,n=e===ee?ee.scrollY:e.scrollTop,r=e===ee?ee.scrollX:e.scrollLeft;return{top:t.top+n-i,left:t.left+r-s}}return null},css:function(e,t){var a;if(1===arguments.length){if("string"!=typeof e){for(a=0;a<this.length;a+=1)for(var i in e)this[a].style[i]=e[i];return this}if(this[0])return ee.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(a=0;a<this.length;a+=1)this[a].style[e]=t;return this},each:function(e){if(!e)return this;for(var t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,a,i=this[0];if(!i||void 0===e)return!1;if("string"==typeof e){if(i.matches)return i.matches(e);if(i.webkitMatchesSelector)return i.webkitMatchesSelector(e);if(i.msMatchesSelector)return i.msMatchesSelector(e);for(t=I(e),a=0;a<t.length;a+=1)if(t[a]===i)return!0;return!1}if(e===m)return i===m;if(e===ee)return i===ee;if(e.nodeType||e instanceof l){for(t=e.nodeType?[e]:e,a=0;a<t.length;a+=1)if(t[a]===i)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t,a=this.length;return new l(a-1<e?[]:e<0?(t=a+e)<0?[]:[this[t]]:[this[e]])},append:function(){for(var e,t=[],a=arguments.length;a--;)t[a]=arguments[a];for(var i=0;i<t.length;i+=1){e=t[i];for(var s=0;s<this.length;s+=1)if("string"==typeof e){var n=m.createElement("div");for(n.innerHTML=e;n.firstChild;)this[s].appendChild(n.firstChild)}else if(e instanceof l)for(var r=0;r<e.length;r+=1)this[s].appendChild(e[r]);else this[s].appendChild(e)}return this},prepend:function(e){for(var t,a=0;a<this.length;a+=1)if("string"==typeof e){var i=m.createElement("div");for(i.innerHTML=e,t=i.childNodes.length-1;0<=t;--t)this[a].insertBefore(i.childNodes[t],this[a].childNodes[0])}else if(e instanceof l)for(t=0;t<e.length;t+=1)this[a].insertBefore(e[t],this[a].childNodes[0]);else this[a].insertBefore(e,this[a].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&I(this[0].nextElementSibling).is(e)?new l([this[0].nextElementSibling]):new l([]):this[0].nextElementSibling?new l([this[0].nextElementSibling]):new l([]):new l([])},nextAll:function(e){var t=[],a=this[0];if(!a)return new l([]);for(;a.nextElementSibling;){var i=a.nextElementSibling;(!e||I(i).is(e))&&t.push(i),a=i}return new l(t)},prev:function(e){if(0<this.length){var t=this[0];return e?t.previousElementSibling&&I(t.previousElementSibling).is(e)?new l([t.previousElementSibling]):new l([]):t.previousElementSibling?new l([t.previousElementSibling]):new l([])}return new l([])},prevAll:function(e){var t=[],a=this[0];if(!a)return new l([]);for(;a.previousElementSibling;){var i=a.previousElementSibling;(!e||I(i).is(e))&&t.push(i),a=i}return new l(t)},parent:function(e){for(var t=[],a=0;a<this.length;a+=1)null===this[a].parentNode||e&&!I(this[a].parentNode).is(e)||t.push(this[a].parentNode);return I(n(t))},parents:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].parentNode;i;)e&&!I(i).is(e)||t.push(i),i=i.parentNode;return I(n(t))},closest:function(e){var t=this;return void 0===e?new l([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].querySelectorAll(e),s=0;s<i.length;s+=1)t.push(i[s]);return new l(t)},children:function(e){for(var t=[],a=0;a<this.length;a+=1)for(var i=this[a].childNodes,s=0;s<i.length;s+=1)e?1===i[s].nodeType&&I(i[s]).is(e)&&t.push(i[s]):1===i[s].nodeType&&t.push(i[s]);return new l(n(t))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=0;a<e.length;a+=1)for(var i=I(e[a]),s=0;s<i.length;s+=1)this[this.length]=i[s],this.length+=1;return this},styles:function(){return this[0]?ee.getComputedStyle(this[0],null):{}}};Object.keys(t).forEach(function(e){I.fn[e]=I.fn[e]||t[e]});function e(e){void 0===e&&(e={});var t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(function(e){t.on(e,t.params.on[e])})}var a,i,s,r,te={deleteProps:function(e){var t=e;Object.keys(t).forEach(function(e){try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:function(e,t){return void 0===t&&(t=0),setTimeout(e,t)},now:function(){return Date.now()},getTranslate:function(e,t){var a,i,s;void 0===t&&(t="x");var n=ee.getComputedStyle(e,null);return ee.WebKitCSSMatrix?(6<(i=n.transform||n.webkitTransform).split(",").length&&(i=i.split(", ").map(function(e){return e.replace(",",".")}).join(", ")),s=new ee.WebKitCSSMatrix("none"===i?"":i)):a=(s=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=ee.WebKitCSSMatrix?s.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(i=ee.WebKitCSSMatrix?s.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0},parseUrlQuery:function(e){var t,a,i,s,n={},r=e||ee.location.href;if("string"==typeof r&&r.length)for(s=(a=(r=-1<r.indexOf("?")?r.replace(/\S*\?/,""):"").split("&").filter(function(e){return""!==e})).length,t=0;t<s;t+=1)i=a[t].replace(/#\S+/g,"").split("="),n[decodeURIComponent(i[0])]=void 0===i[1]?void 0:decodeURIComponent(i[1])||"";return n},isObject:function(e){return"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object},extend:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];for(var a=Object(e[0]),i=1;i<e.length;i+=1){var s=e[i];if(null!=s)for(var n=Object.keys(Object(s)),r=0,o=n.length;r<o;r+=1){var l=n[r],d=Object.getOwnPropertyDescriptor(s,l);void 0!==d&&d.enumerable&&(te.isObject(a[l])&&te.isObject(s[l])?te.extend(a[l],s[l]):!te.isObject(a[l])&&te.isObject(s[l])?(a[l]={},te.extend(a[l],s[l])):a[l]=s[l])}}return a}},ae=(s=m.createElement("div"),{touch:ee.Modernizr&&!0===ee.Modernizr.touch||!!(0<ee.navigator.maxTouchPoints||"ontouchstart"in ee||ee.DocumentTouch&&m instanceof ee.DocumentTouch),pointerEvents:!!(ee.navigator.pointerEnabled||ee.PointerEvent||"maxTouchPoints"in ee.navigator&&0<ee.navigator.maxTouchPoints),prefixedPointerEvents:!!ee.navigator.msPointerEnabled,transition:"transition"in(i=s.style)||"webkitTransition"in i||"MozTransition"in i,transforms3d:ee.Modernizr&&!0===ee.Modernizr.csstransforms3d||"webkitPerspective"in(a=s.style)||"MozPerspective"in a||"OPerspective"in a||"MsPerspective"in a||"perspective"in a,flexbox:function(){for(var e=s.style,t="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" "),a=0;a<t.length;a+=1)if(t[a]in e)return!0;return!1}(),observer:"MutationObserver"in ee||"WebkitMutationObserver"in ee,passiveListener:function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});ee.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in ee}),ie={isIE:!!ee.navigator.userAgent.match(/Trident/g)||!!ee.navigator.userAgent.match(/MSIE/g),isEdge:!!ee.navigator.userAgent.match(/Edge/g),isSafari:0<=(r=ee.navigator.userAgent.toLowerCase()).indexOf("safari")&&r.indexOf("chrome")<0&&r.indexOf("android")<0,isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(ee.navigator.userAgent)},o={components:{configurable:!0}};e.prototype.on=function(e,t,a){var i=this;if("function"!=typeof t)return i;var s=a?"unshift":"push";return e.split(" ").forEach(function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][s](t)}),i},e.prototype.once=function(a,i,e){var s=this;if("function"!=typeof i)return s;function n(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];i.apply(s,e),s.off(a,n),n.f7proxy&&delete n.f7proxy}return n.f7proxy=i,s.on(a,n,e)},e.prototype.off=function(e,i){var s=this;return s.eventsListeners&&e.split(" ").forEach(function(a){void 0===i?s.eventsListeners[a]=[]:s.eventsListeners[a]&&s.eventsListeners[a].length&&s.eventsListeners[a].forEach(function(e,t){(e===i||e.f7proxy&&e.f7proxy===i)&&s.eventsListeners[a].splice(t,1)})}),s},e.prototype.emit=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];var a,i,s,n=this;return n.eventsListeners&&(s="string"==typeof e[0]||Array.isArray(e[0])?(a=e[0],i=e.slice(1,e.length),n):(a=e[0].events,i=e[0].data,e[0].context||n),(Array.isArray(a)?a:a.split(" ")).forEach(function(e){var t;n.eventsListeners&&n.eventsListeners[e]&&(t=[],n.eventsListeners[e].forEach(function(e){t.push(e)}),t.forEach(function(e){e.apply(s,i)}))})),n},e.prototype.useModulesParams=function(a){var i=this;i.modules&&Object.keys(i.modules).forEach(function(e){var t=i.modules[e];t.params&&te.extend(a,t.params)})},e.prototype.useModules=function(i){void 0===i&&(i={});var s=this;s.modules&&Object.keys(s.modules).forEach(function(e){var a=s.modules[e],t=i[e]||{};a.instance&&Object.keys(a.instance).forEach(function(e){var t=a.instance[e];s[e]="function"==typeof t?t.bind(s):t}),a.on&&s.on&&Object.keys(a.on).forEach(function(e){s.on(e,a.on[e])}),a.create&&a.create.bind(s)(t)})},o.components.set=function(e){this.use&&this.use(e)},e.installModule=function(t){for(var e=[],a=arguments.length-1;0<a--;)e[a]=arguments[a+1];var i=this;i.prototype.modules||(i.prototype.modules={});var s=t.name||Object.keys(i.prototype.modules).length+"_"+te.now();return(i.prototype.modules[s]=t).proto&&Object.keys(t.proto).forEach(function(e){i.prototype[e]=t.proto[e]}),t.static&&Object.keys(t.static).forEach(function(e){i[e]=t.static[e]}),t.install&&t.install.apply(i,e),i},e.use=function(e){for(var t=[],a=arguments.length-1;0<a--;)t[a]=arguments[a+1];var i=this;return Array.isArray(e)?(e.forEach(function(e){return i.installModule(e)}),i):i.installModule.apply(i,[e].concat(t))},Object.defineProperties(e,o);var d={updateSize:function(){var e=this,t=e.$el,a=void 0!==e.params.width?e.params.width:t[0].clientWidth,i=void 0!==e.params.height?e.params.height:t[0].clientHeight;0===a&&e.isHorizontal()||0===i&&e.isVertical()||(a=a-parseInt(t.css("padding-left"),10)-parseInt(t.css("padding-right"),10),i=i-parseInt(t.css("padding-top"),10)-parseInt(t.css("padding-bottom"),10),te.extend(e,{width:a,height:i,size:e.isHorizontal()?a:i}))},updateSlides:function(){var e=this,t=e.params,a=e.$wrapperEl,i=e.size,s=e.rtlTranslate,n=e.wrongRTL,r=e.virtual&&t.virtual.enabled,o=r?e.virtual.slides.length:e.slides.length,l=a.children("."+e.params.slideClass),d=r?e.virtual.slides.length:l.length,c=[],p=[],u=[],h=t.slidesOffsetBefore;"function"==typeof h&&(h=t.slidesOffsetBefore.call(e));var f=t.slidesOffsetAfter;"function"==typeof f&&(f=t.slidesOffsetAfter.call(e));var m,g=e.snapGrid.length,v=e.snapGrid.length,b=t.spaceBetween,y=-h,x=0,w=0;if(void 0!==i){"string"==typeof b&&0<=b.indexOf("%")&&(b=parseFloat(b.replace("%",""))/100*i),e.virtualSize=-b,s?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""}),1<t.slidesPerColumn&&(m=Math.floor(d/t.slidesPerColumn)===d/e.params.slidesPerColumn?d:Math.ceil(d/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(m=Math.max(m,t.slidesPerView*t.slidesPerColumn)));for(var T,S,C,E=t.slidesPerColumn,$=m/E,P=Math.floor(d/t.slidesPerColumn),M=0;M<d;M+=1){R=0;var k,z,I,L,D,A,O,H,F,B,X,Y,V,R,N,G,q,j,W,_,U=l.eq(M);1<t.slidesPerColumn&&(I=L=k=void 0,"column"===t.slidesPerColumnFill||"row"===t.slidesPerColumnFill&&1<t.slidesPerGroup?("column"===t.slidesPerColumnFill?(I=M-(L=Math.floor(M/E))*E,(P<L||L===P&&I===E-1)&&E<=(I+=1)&&(I=0,L+=1)):(z=Math.floor(M/t.slidesPerGroup),L=M-(I=Math.floor(M/t.slidesPerView)-z*t.slidesPerColumn)*t.slidesPerView-z*t.slidesPerView),k=L+I*m/E,U.css({"-webkit-box-ordinal-group":k,"-moz-box-ordinal-group":k,"-ms-flex-order":k,"-webkit-order":k,order:k})):L=M-(I=Math.floor(M/$))*$,U.css("margin-"+(e.isHorizontal()?"top":"left"),0!==I&&t.spaceBetween&&t.spaceBetween+"px").attr("data-swiper-column",L).attr("data-swiper-row",I)),"none"!==U.css("display")&&("auto"===t.slidesPerView?(D=ee.getComputedStyle(U[0],null),A=U[0].style.transform,O=U[0].style.webkitTransform,A&&(U[0].style.transform="none"),O&&(U[0].style.webkitTransform="none"),R=t.roundLengths?e.isHorizontal()?U.outerWidth(!0):U.outerHeight(!0):e.isHorizontal()?(H=parseFloat(D.getPropertyValue("width")),F=parseFloat(D.getPropertyValue("padding-left")),B=parseFloat(D.getPropertyValue("padding-right")),X=parseFloat(D.getPropertyValue("margin-left")),Y=parseFloat(D.getPropertyValue("margin-right")),(V=D.getPropertyValue("box-sizing"))&&"border-box"===V&&!ie.isIE?H+X+Y:H+F+B+X+Y):(N=parseFloat(D.getPropertyValue("height")),G=parseFloat(D.getPropertyValue("padding-top")),q=parseFloat(D.getPropertyValue("padding-bottom")),j=parseFloat(D.getPropertyValue("margin-top")),W=parseFloat(D.getPropertyValue("margin-bottom")),(_=D.getPropertyValue("box-sizing"))&&"border-box"===_&&!ie.isIE?N+j+W:N+G+q+j+W),A&&(U[0].style.transform=A),O&&(U[0].style.webkitTransform=O),t.roundLengths&&(R=Math.floor(R))):(R=(i-(t.slidesPerView-1)*b)/t.slidesPerView,t.roundLengths&&(R=Math.floor(R)),l[M]&&(e.isHorizontal()?l[M].style.width=R+"px":l[M].style.height=R+"px")),l[M]&&(l[M].swiperSlideSize=R),u.push(R),t.centeredSlides?(y=y+R/2+x/2+b,0===x&&0!==M&&(y=y-i/2-b),0===M&&(y=y-i/2-b),Math.abs(y)<.001&&(y=0),t.roundLengths&&(y=Math.floor(y)),w%t.slidesPerGroup==0&&c.push(y),p.push(y)):(t.roundLengths&&(y=Math.floor(y)),w%t.slidesPerGroup==0&&c.push(y),p.push(y),y=y+R+b),e.virtualSize+=R+b,x=R,w+=1)}if(e.virtualSize=Math.max(e.virtualSize,i)+f,s&&n&&("slide"===t.effect||"coverflow"===t.effect)&&a.css({width:e.virtualSize+t.spaceBetween+"px"}),ae.flexbox&&!t.setWrapperSize||(e.isHorizontal()?a.css({width:e.virtualSize+t.spaceBetween+"px"}):a.css({height:e.virtualSize+t.spaceBetween+"px"})),1<t.slidesPerColumn&&(e.virtualSize=(R+t.spaceBetween)*m,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?a.css({width:e.virtualSize+t.spaceBetween+"px"}):a.css({height:e.virtualSize+t.spaceBetween+"px"}),t.centeredSlides)){T=[];for(var K=0;K<c.length;K+=1){var Z=c[K];t.roundLengths&&(Z=Math.floor(Z)),c[K]<e.virtualSize+c[0]&&T.push(Z)}c=T}if(!t.centeredSlides){T=[];for(var Q=0;Q<c.length;Q+=1){var J=c[Q];t.roundLengths&&(J=Math.floor(J)),c[Q]<=e.virtualSize-i&&T.push(J)}c=T,1<Math.floor(e.virtualSize-i)-Math.floor(c[c.length-1])&&c.push(e.virtualSize-i)}0===c.length&&(c=[0]),0!==t.spaceBetween&&(e.isHorizontal()?s?l.css({marginLeft:b+"px"}):l.css({marginRight:b+"px"}):l.css({marginBottom:b+"px"})),t.centerInsufficientSlides&&(S=0,u.forEach(function(e){S+=e+(t.spaceBetween?t.spaceBetween:0)}),(S-=t.spaceBetween)<i&&(C=(i-S)/2,c.forEach(function(e,t){c[t]=e-C}),p.forEach(function(e,t){p[t]=e+C}))),te.extend(e,{slides:l,snapGrid:c,slidesGrid:p,slidesSizesGrid:u}),d!==o&&e.emit("slidesLengthChange"),c.length!==g&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),p.length!==v&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,a,i=this,s=[],n=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&1<i.params.slidesPerView)for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var r=i.activeIndex+t;if(r>i.slides.length)break;s.push(i.slides.eq(r)[0])}else s.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<s.length;t+=1){void 0!==s[t]&&(n=n<(a=s[t].offsetHeight)?a:n)}n&&i.$wrapperEl.css("height",n+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.slides,s=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var n=s?e:-e;i.removeClass(a.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var r=0;r<i.length;r+=1){var o,l,d=i[r],c=(n+(a.centeredSlides?t.minTranslate():0)-d.swiperSlideOffset)/(d.swiperSlideSize+a.spaceBetween);a.watchSlidesVisibility&&(l=(o=-(n-d.swiperSlideOffset))+t.slidesSizesGrid[r],(0<=o&&o<t.size-1||1<l&&l<=t.size||o<=0&&l>=t.size)&&(t.visibleSlides.push(d),t.visibleSlidesIndexes.push(r),i.eq(r).addClass(a.slideVisibleClass))),d.progress=s?-c:c}t.visibleSlides=I(t.visibleSlides)}},updateProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,a=t.params,i=t.maxTranslate()-t.minTranslate(),s=t.progress,n=t.isBeginning,r=n,o=l=t.isEnd,l=0==i?n=!(s=0):(n=(s=(e-t.minTranslate())/i)<=0,1<=s);te.extend(t,{progress:s,isBeginning:n,isEnd:l}),(a.watchSlidesProgress||a.watchSlidesVisibility)&&t.updateSlidesProgress(e),n&&!r&&t.emit("reachBeginning toEdge"),l&&!o&&t.emit("reachEnd toEdge"),(r&&!n||o&&!l)&&t.emit("fromEdge"),t.emit("progress",s)},updateSlidesClasses:function(){var e,t=this,a=t.slides,i=t.params,s=t.$wrapperEl,n=t.activeIndex,r=t.realIndex,o=t.virtual&&i.virtual.enabled;a.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+n+'"]'):a.eq(n)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+r+'"]').addClass(i.slideDuplicateActiveClass));var l=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=a.eq(0)).addClass(i.slideNextClass);var d=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===d.length&&(d=a.eq(-1)).addClass(i.slidePrevClass),i.loop&&(l.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),d.hasClass(i.slideDuplicateClass)?s.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):s.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+d.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass))},updateActiveIndex:function(e){var t,a,i=this,s=i.rtlTranslate?i.translate:-i.translate,n=i.slidesGrid,r=i.snapGrid,o=i.params,l=i.activeIndex,d=i.realIndex,c=i.snapIndex,p=e;if(void 0===p){for(var u=0;u<n.length;u+=1)void 0!==n[u+1]?s>=n[u]&&s<n[u+1]-(n[u+1]-n[u])/2?p=u:s>=n[u]&&s<n[u+1]&&(p=u+1):s>=n[u]&&(p=u);o.normalizeSlideIndex&&(p<0||void 0===p)&&(p=0)}(t=0<=r.indexOf(s)?r.indexOf(s):Math.floor(p/o.slidesPerGroup))>=r.length&&(t=r.length-1),p!==l?(a=parseInt(i.slides.eq(p).attr("data-swiper-slide-index")||p,10),te.extend(i,{snapIndex:t,realIndex:a,previousIndex:l,activeIndex:p}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),d!==a&&i.emit("realIndexChange"),(i.initialized||i.runCallbacksOnInit)&&i.emit("slideChange")):t!==c&&(i.snapIndex=t,i.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,a=t.params,i=I(e.target).closest("."+a.slideClass)[0],s=!1;if(i)for(var n=0;n<t.slides.length;n+=1)t.slides[n]===i&&(s=!0);if(!i||!s)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(I(i).attr("data-swiper-slide-index"),10):t.clickedIndex=I(i).index(),a.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var c={getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this.params,a=this.rtlTranslate,i=this.translate,s=this.$wrapperEl;if(t.virtualTranslate)return a?-i:i;var n=te.getTranslate(s[0],e);return a&&(n=-n),n||0},setTranslate:function(e,t){var a=this,i=a.rtlTranslate,s=a.params,n=a.$wrapperEl,r=a.progress,o=0,l=0;a.isHorizontal()?o=i?-e:e:l=e,s.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),s.virtualTranslate||(ae.transforms3d?n.transform("translate3d("+o+"px, "+l+"px, 0px)"):n.transform("translate("+o+"px, "+l+"px)")),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?o:l;var d=a.maxTranslate()-a.minTranslate();(0==d?0:(e-a.minTranslate())/d)!==r&&a.updateProgress(e),a.emit("setTranslate",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var p={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.params,n=a.previousIndex;s.autoHeight&&a.updateAutoHeight();var r=(r=t)||(n<i?"next":i<n?"prev":"reset");if(a.emit("transitionStart"),e&&i!==n){if("reset"===r)return void a.emit("slideResetTransitionStart");a.emit("slideChangeTransitionStart"),"next"===r?a.emit("slideNextTransitionStart"):a.emit("slidePrevTransitionStart")}},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this,i=a.activeIndex,s=a.previousIndex;a.animating=!1,a.setTransition(0);var n=(n=t)||(s<i?"next":i<s?"prev":"reset");if(a.emit("transitionEnd"),e&&i!==s){if("reset"===n)return void a.emit("slideResetTransitionEnd");a.emit("slideChangeTransitionEnd"),"next"===n?a.emit("slideNextTransitionEnd"):a.emit("slidePrevTransitionEnd")}}};var u={slideTo:function(e,t,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=this,n=e;n<0&&(n=0);var r=s.params,o=s.snapGrid,l=s.slidesGrid,d=s.previousIndex,c=s.activeIndex,p=s.rtlTranslate;if(s.animating&&r.preventInteractionOnTransition)return!1;var u=Math.floor(n/r.slidesPerGroup);u>=o.length&&(u=o.length-1),(c||r.initialSlide||0)===(d||0)&&a&&s.emit("beforeSlideChangeStart");var h,f=-o[u];if(s.updateProgress(f),r.normalizeSlideIndex)for(var m=0;m<l.length;m+=1)-Math.floor(100*f)>=Math.floor(100*l[m])&&(n=m);if(s.initialized&&n!==c){if(!s.allowSlideNext&&f<s.translate&&f<s.minTranslate())return!1;if(!s.allowSlidePrev&&f>s.translate&&f>s.maxTranslate()&&(c||0)!==n)return!1}return h=c<n?"next":n<c?"prev":"reset",p&&-f===s.translate||!p&&f===s.translate?(s.updateActiveIndex(n),r.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==r.effect&&s.setTranslate(f),"reset"!==h&&(s.transitionStart(a,h),s.transitionEnd(a,h)),!1):(0!==t&&ae.transition?(s.setTransition(t),s.setTranslate(f),s.updateActiveIndex(n),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,i),s.transitionStart(a,h),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(a,h))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))):(s.setTransition(0),s.setTranslate(f),s.updateActiveIndex(n),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,i),s.transitionStart(a,h),s.transitionEnd(a,h)),!0)},slideToLoop:function(e,t,a,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);var s=e;return this.params.loop&&(s+=this.loopedSlides),this.slideTo(s,t,a,i)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,n=i.animating;return s.loop?!n&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,i.slideTo(i.activeIndex+s.slidesPerGroup,e,t,a)):i.slideTo(i.activeIndex+s.slidesPerGroup,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,s=i.params,n=i.animating,r=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(s.loop){if(n)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var c,p=d(l?i.translate:-i.translate),u=r.map(d),h=(o.map(d),r[u.indexOf(p)],r[u.indexOf(p)-1]);return void 0!==h&&(c=o.indexOf(h))<0&&(c=i.activeIndex-1),i.slideTo(c,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,a)},slideToClosest:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i,s,n=this,r=n.activeIndex,o=Math.floor(r/n.params.slidesPerGroup);return o<n.snapGrid.length-1&&(i=n.rtlTranslate?n.translate:-n.translate,s=n.snapGrid[o],(n.snapGrid[o+1]-s)/2<i-s&&(r=n.params.slidesPerGroup)),n.slideTo(r,e,t,a)},slideToClickedSlide:function(){var e,t=this,a=t.params,i=t.$wrapperEl,s="auto"===a.slidesPerView?t.slidesPerViewDynamic():a.slidesPerView,n=t.clickedIndex;if(a.loop){if(t.animating)return;e=parseInt(I(t.clickedSlide).attr("data-swiper-slide-index"),10),a.centeredSlides?n<t.loopedSlides-s/2||n>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),n=i.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),te.nextTick(function(){t.slideTo(n)})):t.slideTo(n):n>t.slides.length-s?(t.loopFix(),n=i.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+a.slideDuplicateClass+")").eq(0).index(),te.nextTick(function(){t.slideTo(n)})):t.slideTo(n)}else t.slideTo(n)}};var h={loopCreate:function(){var i=this,e=i.params,t=i.$wrapperEl;t.children("."+e.slideClass+"."+e.slideDuplicateClass).remove();var s=t.children("."+e.slideClass);if(e.loopFillGroupWithBlank){var a=e.slidesPerGroup-s.length%e.slidesPerGroup;if(a!==e.slidesPerGroup){for(var n=0;n<a;n+=1){var r=I(m.createElement("div")).addClass(e.slideClass+" "+e.slideBlankClass);t.append(r)}s=t.children("."+e.slideClass)}}"auto"!==e.slidesPerView||e.loopedSlides||(e.loopedSlides=s.length),i.loopedSlides=parseInt(e.loopedSlides||e.slidesPerView,10),i.loopedSlides+=e.loopAdditionalSlides,i.loopedSlides>s.length&&(i.loopedSlides=s.length);var o=[],l=[];s.each(function(e,t){var a=I(t);e<i.loopedSlides&&l.push(t),e<s.length&&e>=s.length-i.loopedSlides&&o.push(t),a.attr("data-swiper-slide-index",e)});for(var d=0;d<l.length;d+=1)t.append(I(l[d].cloneNode(!0)).addClass(e.slideDuplicateClass));for(var c=o.length-1;0<=c;--c)t.prepend(I(o[c].cloneNode(!0)).addClass(e.slideDuplicateClass))},loopFix:function(){var e=this,t=e.params,a=e.activeIndex,i=e.slides,s=e.loopedSlides,n=e.allowSlidePrev,r=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var d,c=-o[a]-e.getTranslate();a<s?(d=i.length-3*s+a,d+=s,e.slideTo(d,0,!1,!0)&&0!=c&&e.setTranslate((l?-e.translate:e.translate)-c)):("auto"===t.slidesPerView&&2*s<=a||a>=i.length-s)&&(d=-i.length+a+s,d+=s,e.slideTo(d,0,!1,!0)&&0!=c&&e.setTranslate((l?-e.translate:e.translate)-c)),e.allowSlidePrev=n,e.allowSlideNext=r},loopDestroy:function(){var e=this.$wrapperEl,t=this.params,a=this.slides;e.children("."+t.slideClass+"."+t.slideDuplicateClass+",."+t.slideClass+"."+t.slideBlankClass).remove(),a.removeAttr("data-swiper-slide-index")}};var f={setGrabCursor:function(e){var t;ae.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked||((t=this.el).style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab")},unsetGrabCursor:function(){ae.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}};var g,v,b,y,x,w,T,S,C,E={appendSlide:function(e){var t=this,a=t.$wrapperEl,i=t.params;if(i.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(var s=0;s<e.length;s+=1)e[s]&&a.append(e[s]);else a.append(e);i.loop&&t.loopCreate(),i.observer&&ae.observer||t.update()},prependSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&t.loopDestroy();var n=s+1;if("object"==typeof e&&"length"in e){for(var r=0;r<e.length;r+=1)e[r]&&i.prepend(e[r]);n=s+e.length}else i.prepend(e);a.loop&&t.loopCreate(),a.observer&&ae.observer||t.update(),t.slideTo(n,0,!1)},addSlide:function(e,t){var a=this,i=a.$wrapperEl,s=a.params,n=a.activeIndex;s.loop&&(n-=a.loopedSlides,a.loopDestroy(),a.slides=i.children("."+s.slideClass));var r=a.slides.length;if(e<=0)a.prependSlide(t);else if(r<=e)a.appendSlide(t);else{for(var o=e<n?n+1:n,l=[],d=r-1;e<=d;--d){var c=a.slides.eq(d);c.remove(),l.unshift(c)}if("object"==typeof t&&"length"in t){for(var p=0;p<t.length;p+=1)t[p]&&i.append(t[p]);o=e<n?n+t.length:n}else i.append(t);for(var u=0;u<l.length;u+=1)i.append(l[u]);s.loop&&a.loopCreate(),s.observer&&ae.observer||a.update(),s.loop?a.slideTo(o+a.loopedSlides,0,!1):a.slideTo(o,0,!1)}},removeSlide:function(e){var t=this,a=t.params,i=t.$wrapperEl,s=t.activeIndex;a.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=i.children("."+a.slideClass));var n,r=s;if("object"==typeof e&&"length"in e){for(var o=0;o<e.length;o+=1)n=e[o],t.slides[n]&&t.slides.eq(n).remove(),n<r&&--r;r=Math.max(r,0)}else n=e,t.slides[n]&&t.slides.eq(n).remove(),n<r&&--r,r=Math.max(r,0);a.loop&&t.loopCreate(),a.observer&&ae.observer||t.update(),a.loop?t.slideTo(r+t.loopedSlides,0,!1):t.slideTo(r,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},$=(b=ee.navigator.userAgent,y={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:ee.cordova||ee.phonegap,phonegap:ee.cordova||ee.phonegap},x=b.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),w=b.match(/(Android);?[\s\/]+([\d.]+)?/),T=b.match(/(iPad).*OS\s([\d_]+)/),S=b.match(/(iPod)(.*OS\s([\d_]+))?/),C=!T&&b.match(/(iPhone\sOS|iOS)\s([\d_]+)/),x&&(y.os="windows",y.osVersion=x[2],y.windows=!0),w&&!x&&(y.os="android",y.osVersion=w[2],y.android=!0,y.androidChrome=0<=b.toLowerCase().indexOf("chrome")),(T||C||S)&&(y.os="ios",y.ios=!0),C&&!S&&(y.osVersion=C[2].replace(/_/g,"."),y.iphone=!0),T&&(y.osVersion=T[2].replace(/_/g,"."),y.ipad=!0),S&&(y.osVersion=S[3]?S[3].replace(/_/g,"."):null,y.iphone=!0),y.ios&&y.osVersion&&0<=b.indexOf("Version/")&&"10"===y.osVersion.split(".")[0]&&(y.osVersion=b.toLowerCase().split("version/")[1].split(" ")[0]),y.desktop=!(y.os||y.android||y.webView),y.webView=(C||T||S)&&b.match(/.*AppleWebKit(?!.*Safari)/i),y.os&&"ios"===y.os&&(g=y.osVersion.split("."),v=m.querySelector('meta[name="viewport"]'),y.minimalUi=!y.webView&&(S||C)&&(7==+g[0]?1<=+g[1]:7<+g[0])&&v&&0<=v.getAttribute("content").indexOf("minimal-ui")),y.pixelRatio=ee.devicePixelRatio||1,y);function P(){var e,t,a,i,s=this,n=s.params,r=s.el;r&&0===r.offsetWidth||(n.breakpoints&&s.setBreakpoint(),e=s.allowSlideNext,t=s.allowSlidePrev,a=s.snapGrid,s.allowSlideNext=!0,s.allowSlidePrev=!0,s.updateSize(),s.updateSlides(),n.freeMode?(i=Math.min(Math.max(s.translate,s.maxTranslate()),s.minTranslate()),s.setTranslate(i),s.updateActiveIndex(),s.updateSlidesClasses(),n.autoHeight&&s.updateAutoHeight()):(s.updateSlidesClasses(),("auto"===n.slidesPerView||1<n.slidesPerView)&&s.isEnd&&!s.params.centeredSlides?s.slideTo(s.slides.length-1,0,!1,!0):s.slideTo(s.activeIndex,0,!1,!0)),s.autoplay&&s.autoplay.running&&s.autoplay.paused&&s.autoplay.run(),s.allowSlidePrev=t,s.allowSlideNext=e,s.params.watchOverflow&&a!==s.snapGrid&&s.checkOverflow())}var M={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsInverse:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0},k={update:d,translate:c,transition:p,slide:u,loop:h,grabCursor:f,manipulation:E,events:{attachEvents:function(){var e=this,t=e.params,a=e.touchEvents,i=e.el,s=e.wrapperEl;e.onTouchStart=function(e){var t,a,i,s,n,r,o,l=this,d=l.touchEventsData,c=l.params,p=l.touches;l.animating&&c.preventInteractionOnTransition||((t=e).originalEvent&&(t=t.originalEvent),d.isTouchEvent="touchstart"===t.type,!d.isTouchEvent&&"which"in t&&3===t.which||!d.isTouchEvent&&"button"in t&&0<t.button||d.isTouched&&d.isMoved||(c.noSwiping&&I(t.target).closest(c.noSwipingSelector?c.noSwipingSelector:"."+c.noSwipingClass)[0]?l.allowClick=!0:c.swipeHandler&&!I(t).closest(c.swipeHandler)[0]||(p.currentX="touchstart"===t.type?t.targetTouches[0].pageX:t.pageX,p.currentY="touchstart"===t.type?t.targetTouches[0].pageY:t.pageY,a=p.currentX,i=p.currentY,s=c.edgeSwipeDetection||c.iOSEdgeSwipeDetection,n=c.edgeSwipeThreshold||c.iOSEdgeSwipeThreshold,s&&(a<=n||a>=ee.screen.width-n)||(te.extend(d,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),p.startX=a,p.startY=i,d.touchStartTime=te.now(),l.allowClick=!0,l.updateSize(),l.swipeDirection=void 0,0<c.threshold&&(d.allowThresholdMove=!1),"touchstart"!==t.type&&(r=!0,I(t.target).is(d.formElements)&&(r=!1),m.activeElement&&I(m.activeElement).is(d.formElements)&&m.activeElement!==t.target&&m.activeElement.blur(),o=r&&l.allowTouchMove&&c.touchStartPreventDefault,(c.touchStartForcePreventDefault||o)&&t.preventDefault()),l.emit("touchStart",t)))))}.bind(e),e.onTouchMove=function(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,n=t.rtlTranslate,r=e;if(r.originalEvent&&(r=r.originalEvent),a.isTouched){if(!a.isTouchEvent||"mousemove"!==r.type){var o="touchmove"===r.type?r.targetTouches[0].pageX:r.pageX,l="touchmove"===r.type?r.targetTouches[0].pageY:r.pageY;if(r.preventedByNestedSwiper)return s.startX=o,void(s.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(a.isTouched&&(te.extend(s,{startX:o,startY:l,currentX:o,currentY:l}),a.touchStartTime=te.now()));if(a.isTouchEvent&&i.touchReleaseOnEdges&&!i.loop)if(t.isVertical()){if(l<s.startY&&t.translate<=t.maxTranslate()||l>s.startY&&t.translate>=t.minTranslate())return a.isTouched=!1,void(a.isMoved=!1)}else if(o<s.startX&&t.translate<=t.maxTranslate()||o>s.startX&&t.translate>=t.minTranslate())return;if(a.isTouchEvent&&m.activeElement&&r.target===m.activeElement&&I(r.target).is(a.formElements))return a.isMoved=!0,void(t.allowClick=!1);if(a.allowTouchCallbacks&&t.emit("touchMove",r),!(r.targetTouches&&1<r.targetTouches.length)){s.currentX=o,s.currentY=l;var d,c=s.currentX-s.startX,p=s.currentY-s.startY;if(!(t.params.threshold&&Math.sqrt(Math.pow(c,2)+Math.pow(p,2))<t.params.threshold))if(void 0===a.isScrolling&&(t.isHorizontal()&&s.currentY===s.startY||t.isVertical()&&s.currentX===s.startX?a.isScrolling=!1:25<=c*c+p*p&&(d=180*Math.atan2(Math.abs(p),Math.abs(c))/Math.PI,a.isScrolling=t.isHorizontal()?d>i.touchAngle:90-d>i.touchAngle)),a.isScrolling&&t.emit("touchMoveOpposite",r),void 0===a.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(a.startMoving=!0)),a.isScrolling)a.isTouched=!1;else if(a.startMoving){t.allowClick=!1,r.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&r.stopPropagation(),a.isMoved||(i.loop&&t.loopFix(),a.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),a.allowMomentumBounce=!1,!i.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",r)),t.emit("sliderMove",r),a.isMoved=!0;var u=t.isHorizontal()?c:p;s.diff=u,u*=i.touchRatio,n&&(u=-u),t.swipeDirection=0<u?"prev":"next",a.currentTranslate=u+a.startTranslate;var h=!0,f=i.resistanceRatio;if(i.touchReleaseOnEdges&&(f=0),0<u&&a.currentTranslate>t.minTranslate()?(h=!1,i.resistance&&(a.currentTranslate=t.minTranslate()-1+Math.pow(-t.minTranslate()+a.startTranslate+u,f))):u<0&&a.currentTranslate<t.maxTranslate()&&(h=!1,i.resistance&&(a.currentTranslate=t.maxTranslate()+1-Math.pow(t.maxTranslate()-a.startTranslate-u,f))),h&&(r.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&a.currentTranslate<a.startTranslate&&(a.currentTranslate=a.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&a.currentTranslate>a.startTranslate&&(a.currentTranslate=a.startTranslate),0<i.threshold){if(!(Math.abs(u)>i.threshold||a.allowThresholdMove))return void(a.currentTranslate=a.startTranslate);if(!a.allowThresholdMove)return a.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,a.currentTranslate=a.startTranslate,void(s.diff=t.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}i.followFinger&&((i.freeMode||i.watchSlidesProgress||i.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),i.freeMode&&(0===a.velocities.length&&a.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:a.touchStartTime}),a.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:te.now()})),t.updateProgress(a.currentTranslate),t.setTranslate(a.currentTranslate))}}}}else a.startMoving&&a.isScrolling&&t.emit("touchMoveOpposite",r)}.bind(e),e.onTouchEnd=function(e){var t=this,a=t.touchEventsData,i=t.params,s=t.touches,n=t.rtlTranslate,r=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,d=e;if(d.originalEvent&&(d=d.originalEvent),a.allowTouchCallbacks&&t.emit("touchEnd",d),a.allowTouchCallbacks=!1,!a.isTouched)return a.isMoved&&i.grabCursor&&t.setGrabCursor(!1),a.isMoved=!1,void(a.startMoving=!1);i.grabCursor&&a.isMoved&&a.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var c,p,u,h,f,m=te.now(),g=m-a.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(d),t.emit("tap",d),g<300&&300<m-a.lastClickTime&&(a.clickTimeout&&clearTimeout(a.clickTimeout),a.clickTimeout=te.nextTick(function(){t&&!t.destroyed&&t.emit("click",d)},300)),g<300&&m-a.lastClickTime<300&&(a.clickTimeout&&clearTimeout(a.clickTimeout),t.emit("doubleTap",d))),a.lastClickTime=te.now(),te.nextTick(function(){t.destroyed||(t.allowClick=!0)}),!a.isTouched||!a.isMoved||!t.swipeDirection||0===s.diff||a.currentTranslate===a.startTranslate)return a.isTouched=!1,a.isMoved=!1,void(a.startMoving=!1);if(a.isTouched=!1,a.isMoved=!1,a.startMoving=!1,c=i.followFinger?n?t.translate:-t.translate:-a.currentTranslate,i.freeMode){if(c<-t.minTranslate())return void t.slideTo(t.activeIndex);if(c>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){1<a.velocities.length?(p=a.velocities.pop(),u=a.velocities.pop(),h=p.position-u.position,f=p.time-u.time,t.velocity=h/f,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(150<f||300<te.now()-p.time)&&(t.velocity=0)):t.velocity=0,t.velocity*=i.freeModeMomentumVelocityRatio,a.velocities.length=0;var v=1e3*i.freeModeMomentumRatio,b=t.velocity*v,y=t.translate+b;n&&(y=-y);var x,w,T=!1,S=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(y<t.maxTranslate())i.freeModeMomentumBounce?(y+t.maxTranslate()<-S&&(y=t.maxTranslate()-S),x=t.maxTranslate(),T=!0,a.allowMomentumBounce=!0):y=t.maxTranslate(),i.loop&&i.centeredSlides&&(w=!0);else if(y>t.minTranslate())i.freeModeMomentumBounce?(y-t.minTranslate()>S&&(y=t.minTranslate()+S),x=t.minTranslate(),T=!0,a.allowMomentumBounce=!0):y=t.minTranslate(),i.loop&&i.centeredSlides&&(w=!0);else if(i.freeModeSticky){for(var C,E=0;E<l.length;E+=1)if(l[E]>-y){C=E;break}y=-(y=Math.abs(l[C]-y)<Math.abs(l[C-1]-y)||"next"===t.swipeDirection?l[C]:l[C-1])}if(w&&t.once("transitionEnd",function(){t.loopFix()}),0!==t.velocity)v=n?Math.abs((-y-t.translate)/t.velocity):Math.abs((y-t.translate)/t.velocity);else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&T?(t.updateProgress(x),t.setTransition(v),t.setTranslate(y),t.transitionStart(!0,t.swipeDirection),t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&a.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),t.setTranslate(x),r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(y),t.setTransition(v),t.setTranslate(y),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,r.transitionEnd(function(){t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(y),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();(!i.freeModeMomentum||g>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var $=0,P=t.slidesSizesGrid[0],M=0;M<o.length;M+=i.slidesPerGroup)void 0!==o[M+i.slidesPerGroup]?c>=o[M]&&c<o[M+i.slidesPerGroup]&&(P=o[($=M)+i.slidesPerGroup]-o[M]):c>=o[M]&&($=M,P=o[o.length-1]-o[o.length-2]);var k=(c-o[$])/P;if(g>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(k>=i.longSwipesRatio?t.slideTo($+i.slidesPerGroup):t.slideTo($)),"prev"===t.swipeDirection&&(k>1-i.longSwipesRatio?t.slideTo($+i.slidesPerGroup):t.slideTo($))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo($+i.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo($)}}}.bind(e),e.onClick=function(e){this.allowClick||(this.params.preventClicks&&e.preventDefault(),this.params.preventClicksPropagation&&this.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);var n,r="container"===t.touchEventsTarget?i:s,o=!!t.nested;ae.touch||!ae.pointerEvents&&!ae.prefixedPointerEvents?(ae.touch&&(n=!("touchstart"!==a.start||!ae.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1},r.addEventListener(a.start,e.onTouchStart,n),r.addEventListener(a.move,e.onTouchMove,ae.passiveListener?{passive:!1,capture:o}:o),r.addEventListener(a.end,e.onTouchEnd,n)),(t.simulateTouch&&!$.ios&&!$.android||t.simulateTouch&&!ae.touch&&$.ios)&&(r.addEventListener("mousedown",e.onTouchStart,!1),m.addEventListener("mousemove",e.onTouchMove,o),m.addEventListener("mouseup",e.onTouchEnd,!1))):(r.addEventListener(a.start,e.onTouchStart,!1),m.addEventListener(a.move,e.onTouchMove,o),m.addEventListener(a.end,e.onTouchEnd,!1)),(t.preventClicks||t.preventClicksPropagation)&&r.addEventListener("click",e.onClick,!0),e.on($.ios||$.android?"resize orientationchange observerUpdate":"resize observerUpdate",P,!0)},detachEvents:function(){var e,t=this,a=t.params,i=t.touchEvents,s=t.el,n=t.wrapperEl,r="container"===a.touchEventsTarget?s:n,o=!!a.nested;ae.touch||!ae.pointerEvents&&!ae.prefixedPointerEvents?(ae.touch&&(e=!("onTouchStart"!==i.start||!ae.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1},r.removeEventListener(i.start,t.onTouchStart,e),r.removeEventListener(i.move,t.onTouchMove,o),r.removeEventListener(i.end,t.onTouchEnd,e)),(a.simulateTouch&&!$.ios&&!$.android||a.simulateTouch&&!ae.touch&&$.ios)&&(r.removeEventListener("mousedown",t.onTouchStart,!1),m.removeEventListener("mousemove",t.onTouchMove,o),m.removeEventListener("mouseup",t.onTouchEnd,!1))):(r.removeEventListener(i.start,t.onTouchStart,!1),m.removeEventListener(i.move,t.onTouchMove,o),m.removeEventListener(i.end,t.onTouchEnd,!1)),(a.preventClicks||a.preventClicksPropagation)&&r.removeEventListener("click",t.onClick,!0),t.off($.ios||$.android?"resize orientationchange observerUpdate":"resize observerUpdate",P)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,a=e.initialized,i=e.loopedSlides;void 0===i&&(i=0);var s,n,r,o,l,d=e.params,c=d.breakpoints;!c||c&&0===Object.keys(c).length||(s=e.getBreakpoint(c))&&e.currentBreakpoint!==s&&((n=s in c?c[s]:void 0)&&["slidesPerView","spaceBetween","slidesPerGroup"].forEach(function(e){var t=n[e];void 0!==t&&(n[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}),o=(r=n||e.originalParams).direction&&r.direction!==d.direction,l=d.loop&&(r.slidesPerView!==d.slidesPerView||o),o&&a&&e.changeDirection(),te.extend(e.params,r),te.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,l&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",r))},getBreakpoint:function(e){if(e){var t=!1,a=[];Object.keys(e).forEach(function(e){a.push(e)}),a.sort(function(e,t){return parseInt(e,10)-parseInt(t,10)});for(var i=0;i<a.length;i+=1){var s=a[i];this.params.breakpointsInverse?s<=ee.innerWidth&&(t=s):s>=ee.innerWidth&&!t&&(t=s)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){var t=this.classNames,a=this.params,e=this.rtl,i=this.$el,s=[];s.push("initialized"),s.push(a.direction),a.freeMode&&s.push("free-mode"),ae.flexbox||s.push("no-flexbox"),a.autoHeight&&s.push("autoheight"),e&&s.push("rtl"),1<a.slidesPerColumn&&s.push("multirow"),$.android&&s.push("android"),$.ios&&s.push("ios"),(ie.isIE||ie.isEdge)&&(ae.pointerEvents||ae.prefixedPointerEvents)&&s.push("wp8-"+a.direction),s.forEach(function(e){t.push(a.containerModifierClass+e)}),i.addClass(t.join(" "))},removeClasses:function(){var e=this.$el,t=this.classNames;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,a,i,s,n){var r;function o(){n&&n()}(!e.complete||!s)&&t?((r=new ee.Image).onload=o,r.onerror=o,i&&(r.sizes=i),a&&(r.srcset=a),t&&(r.src=t)):o()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var a=0;a<e.imagesToLoad.length;a+=1){var i=e.imagesToLoad[a];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},z={},L=function(p){function u(){for(var s,e=[],t=arguments.length;t--;)e[t]=arguments[t];s=(s=1===e.length&&e[0].constructor&&e[0].constructor===Object?e[0]:(i=e[0],e[1]))||{},s=te.extend({},s),i&&!s.el&&(s.el=i),p.call(this,s),Object.keys(k).forEach(function(t){Object.keys(k[t]).forEach(function(e){u.prototype[e]||(u.prototype[e]=k[t][e])})});var n=this;void 0===n.modules&&(n.modules={}),Object.keys(n.modules).forEach(function(e){var t=n.modules[e];if(t.params){var a=Object.keys(t.params)[0],i=t.params[a];if("object"!=typeof i||null===i)return;if(!(a in s&&"enabled"in i))return;!0===s[a]&&(s[a]={enabled:!0}),"object"!=typeof s[a]||"enabled"in s[a]||(s[a].enabled=!0),s[a]||(s[a]={enabled:!1})}});var a=te.extend({},M);n.useModulesParams(a),n.params=te.extend({},a,z,s),n.originalParams=te.extend({},n.params),n.passedParams=te.extend({},s);var i,r=(n.$=I)(n.params.el);if(i=r[0]){if(1<r.length){var o=[];return r.each(function(e,t){var a=te.extend({},s,{el:t});o.push(new u(a))}),o}i.swiper=n,r.data("swiper",n);var l,d,c=r.children("."+n.params.wrapperClass);return te.extend(n,{$el:r,el:i,$wrapperEl:c,wrapperEl:c[0],classNames:[],slides:I(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===n.params.direction},isVertical:function(){return"vertical"===n.params.direction},rtl:"rtl"===i.dir.toLowerCase()||"rtl"===r.css("direction"),rtlTranslate:"horizontal"===n.params.direction&&("rtl"===i.dir.toLowerCase()||"rtl"===r.css("direction")),wrongRTL:"-webkit-box"===c.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:n.params.allowSlideNext,allowSlidePrev:n.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend"],d=["mousedown","mousemove","mouseup"],ae.pointerEvents?d=["pointerdown","pointermove","pointerup"]:ae.prefixedPointerEvents&&(d=["MSPointerDown","MSPointerMove","MSPointerUp"]),n.touchEventsTouch={start:l[0],move:l[1],end:l[2]},n.touchEventsDesktop={start:d[0],move:d[1],end:d[2]},ae.touch||!n.params.simulateTouch?n.touchEventsTouch:n.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:te.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:n.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),n.useModules(),n.params.init&&n.init(),n}}p&&(u.__proto__=p),u.prototype=Object.create(p&&p.prototype);var e={extendedDefaults:{configurable:!0},defaults:{configurable:!0},Class:{configurable:!0},$:{configurable:!0}};return(u.prototype.constructor=u).prototype.slidesPerViewDynamic=function(){var e=this,t=e.params,a=e.slides,i=e.slidesGrid,s=e.size,n=e.activeIndex,r=1;if(t.centeredSlides){for(var o,l=a[n].swiperSlideSize,d=n+1;d<a.length;d+=1)a[d]&&!o&&(r+=1,s<(l+=a[d].swiperSlideSize)&&(o=!0));for(var c=n-1;0<=c;--c)a[c]&&!o&&(r+=1,s<(l+=a[c].swiperSlideSize)&&(o=!0))}else for(var p=n+1;p<a.length;p+=1)i[p]-i[n]<s&&(r+=1);return r},u.prototype.update=function(){var e,t,a=this;function i(){var e=a.rtlTranslate?-1*a.translate:a.translate,t=Math.min(Math.max(e,a.maxTranslate()),a.minTranslate());a.setTranslate(t),a.updateActiveIndex(),a.updateSlidesClasses()}a&&!a.destroyed&&(e=a.snapGrid,(t=a.params).breakpoints&&a.setBreakpoint(),a.updateSize(),a.updateSlides(),a.updateProgress(),a.updateSlidesClasses(),a.params.freeMode?(i(),a.params.autoHeight&&a.updateAutoHeight()):(("auto"===a.params.slidesPerView||1<a.params.slidesPerView)&&a.isEnd&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0))||i(),t.watchOverflow&&e!==a.snapGrid&&a.checkOverflow(),a.emit("update"))},u.prototype.changeDirection=function(a,e){void 0===e&&(e=!0);var t=this,i=t.params.direction;return(a=a||("horizontal"===i?"vertical":"horizontal"))===i||"horizontal"!==a&&"vertical"!==a||(t.$el.removeClass(""+t.params.containerModifierClass+i+" wp8-"+i).addClass(""+t.params.containerModifierClass+a),(ie.isIE||ie.isEdge)&&(ae.pointerEvents||ae.prefixedPointerEvents)&&t.$el.addClass(t.params.containerModifierClass+"wp8-"+a),t.params.direction=a,t.slides.each(function(e,t){"vertical"===a?t.style.width="":t.style.height=""}),t.emit("changeDirection"),e&&t.update()),t},u.prototype.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))},u.prototype.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var a=this,i=a.params,s=a.$el,n=a.$wrapperEl,r=a.slides;return void 0===a.params||a.destroyed||(a.emit("beforeDestroy"),a.initialized=!1,a.detachEvents(),i.loop&&a.loopDestroy(),t&&(a.removeClasses(),s.removeAttr("style"),n.removeAttr("style"),r&&r.length&&r.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),a.emit("destroy"),Object.keys(a.eventsListeners).forEach(function(e){a.off(e)}),!1!==e&&(a.$el[0].swiper=null,a.$el.data("swiper",null),te.deleteProps(a)),a.destroyed=!0),null},u.extendDefaults=function(e){te.extend(z,e)},e.extendedDefaults.get=function(){return z},e.defaults.get=function(){return M},e.Class.get=function(){return p},e.$.get=function(){return I},Object.defineProperties(u,e),u}(e),D={name:"device",proto:{device:$},static:{device:$}},A={name:"support",proto:{support:ae},static:{support:ae}},O={name:"browser",proto:{browser:ie},static:{browser:ie}},H={name:"resize",create:function(){var e=this;te.extend(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(){ee.addEventListener("resize",this.resize.resizeHandler),ee.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy:function(){ee.removeEventListener("resize",this.resize.resizeHandler),ee.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}},F={func:ee.MutationObserver||ee.WebkitMutationObserver,attach:function(e,t){void 0===t&&(t={});var a=this,i=new F.func(function(e){var t;1!==e.length?(t=function(){a.emit("observerUpdate",e[0])},ee.requestAnimationFrame?ee.requestAnimationFrame(t):ee.setTimeout(t,0)):a.emit("observerUpdate",e[0])});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),a.observer.observers.push(i)},init:function(){var e=this;if(ae.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),a=0;a<t.length;a+=1)e.observer.attach(t[a]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach(function(e){e.disconnect()}),this.observer.observers=[]}},B={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){te.extend(this,{observer:{init:F.init.bind(this),attach:F.attach.bind(this),destroy:F.destroy.bind(this),observers:[]}})},on:{init:function(){this.observer.init()},destroy:function(){this.observer.destroy()}}},X={update:function(e){var t=this,a=t.params,i=a.slidesPerView,s=a.slidesPerGroup,n=a.centeredSlides,r=t.params.virtual,o=r.addSlidesBefore,l=r.addSlidesAfter,d=t.virtual,c=d.from,p=d.to,u=d.slides,h=d.slidesGrid,f=d.renderSlide,m=d.offset;t.updateActiveIndex();var g,v=t.activeIndex||0,b=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",y=n?(g=Math.floor(i/2)+s+o,Math.floor(i/2)+s+l):(g=i+(s-1)+o,s+l),x=Math.max((v||0)-y,0),w=Math.min((v||0)+g,u.length-1),T=(t.slidesGrid[x]||0)-(t.slidesGrid[0]||0);function S(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(te.extend(t.virtual,{from:x,to:w,offset:T,slidesGrid:t.slidesGrid}),c===x&&p===w&&!e)return t.slidesGrid!==h&&T!==m&&t.slides.css(b,T+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:T,from:x,to:w,slides:function(){for(var e=[],t=x;t<=w;t+=1)e.push(u[t]);return e}()}),void S();var C=[],E=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var $=c;$<=p;$+=1)($<x||w<$)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+$+'"]').remove();for(var P=0;P<u.length;P+=1)x<=P&&P<=w&&(void 0===p||e?E.push(P):(p<P&&E.push(P),P<c&&C.push(P)));E.forEach(function(e){t.$wrapperEl.append(f(u[e],e))}),C.sort(function(e,t){return t-e}).forEach(function(e){t.$wrapperEl.prepend(f(u[e],e))}),t.$wrapperEl.children(".swiper-slide").css(b,T+"px"),S()},renderSlide:function(e,t){var a=this,i=a.params.virtual;if(i.cache&&a.virtual.cache[t])return a.virtual.cache[t];var s=i.renderSlide?I(i.renderSlide.call(a,e,t)):I('<div class="'+a.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),i.cache&&(a.virtual.cache[t]=s),s},appendSlide:function(e){if("object"==typeof e&&"length"in e)for(var t=0;t<e.length;t+=1)e[t]&&this.virtual.slides.push(e[t]);else this.virtual.slides.push(e);this.virtual.update(!0)},prependSlide:function(e){var t,a,i=this,s=i.activeIndex,n=s+1,r=1;if(Array.isArray(e)){for(var o=0;o<e.length;o+=1)e[o]&&i.virtual.slides.unshift(e[o]);n=s+e.length,r=e.length}else i.virtual.slides.unshift(e);i.params.virtual.cache&&(t=i.virtual.cache,a={},Object.keys(t).forEach(function(e){a[parseInt(e,10)+r]=t[e]}),i.virtual.cache=a),i.virtual.update(!0),i.slideTo(n,0)},removeSlide:function(e){var t=this;if(null!=e){var a=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;0<=i;--i)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<a&&--a,a=Math.max(a,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<a&&--a,a=Math.max(a,0);t.virtual.update(!0),t.slideTo(a,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},Y={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,addSlidesBefore:0,addSlidesAfter:0}},create:function(){var e=this;te.extend(e,{virtual:{update:X.update.bind(e),appendSlide:X.appendSlide.bind(e),prependSlide:X.prependSlide.bind(e),removeSlide:X.removeSlide.bind(e),removeAllSlides:X.removeAllSlides.bind(e),renderSlide:X.renderSlide.bind(e),slides:e.params.virtual.slides,cache:{}}})},on:{beforeInit:function(){var e,t=this;t.params.virtual.enabled&&(t.classNames.push(t.params.containerModifierClass+"virtual"),e={watchSlidesProgress:!0},te.extend(t.params,e),te.extend(t.originalParams,e),t.params.initialSlide||t.virtual.update())},setTranslate:function(){this.params.virtual.enabled&&this.virtual.update()}}},V={handle:function(e){var t=this,a=t.rtlTranslate,i=e;i.originalEvent&&(i=i.originalEvent);var s=i.keyCode||i.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===s||t.isVertical()&&40===s||34===s))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===s||t.isVertical()&&38===s||33===s))return!1;if(!(i.shiftKey||i.altKey||i.ctrlKey||i.metaKey||m.activeElement&&m.activeElement.nodeName&&("input"===m.activeElement.nodeName.toLowerCase()||"textarea"===m.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(33===s||34===s||37===s||39===s||38===s||40===s)){var n=!1;if(0<t.$el.parents("."+t.params.slideClass).length&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var r=ee.innerWidth,o=ee.innerHeight,l=t.$el.offset();a&&(l.left-=t.$el[0].scrollLeft);for(var d=[[l.left,l.top],[l.left+t.width,l.top],[l.left,l.top+t.height],[l.left+t.width,l.top+t.height]],c=0;c<d.length;c+=1){var p=d[c];0<=p[0]&&p[0]<=r&&0<=p[1]&&p[1]<=o&&(n=!0)}if(!n)return}t.isHorizontal()?(33!==s&&34!==s&&37!==s&&39!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),(34!==s&&39!==s||a)&&(33!==s&&37!==s||!a)||t.slideNext(),(33!==s&&37!==s||a)&&(34!==s&&39!==s||!a)||t.slidePrev()):(33!==s&&34!==s&&38!==s&&40!==s||(i.preventDefault?i.preventDefault():i.returnValue=!1),34!==s&&40!==s||t.slideNext(),33!==s&&38!==s||t.slidePrev()),t.emit("keyPress",s)}},enable:function(){this.keyboard.enabled||(I(m).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable:function(){this.keyboard.enabled&&(I(m).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}},R={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create:function(){te.extend(this,{keyboard:{enabled:!1,enable:V.enable.bind(this),disable:V.disable.bind(this),handle:V.handle.bind(this)}})},on:{init:function(){this.params.keyboard.enabled&&this.keyboard.enable()},destroy:function(){this.keyboard.enabled&&this.keyboard.disable()}}};var N,G,q,j={lastScrollTime:te.now(),event:-1<ee.navigator.userAgent.indexOf("firefox")?"DOMMouseScroll":((q=(G="onwheel")in m)||((N=m.createElement("div")).setAttribute(G,"return;"),q="function"==typeof N[G]),!q&&m.implementation&&m.implementation.hasFeature&&!0!==m.implementation.hasFeature("","")&&(q=m.implementation.hasFeature("Events.wheel","3.0")),q?"wheel":"mousewheel"),normalize:function(e){var t=0,a=0,i=0,s=0;return"detail"in e&&(a=e.detail),"wheelDelta"in e&&(a=-e.wheelDelta/120),"wheelDeltaY"in e&&(a=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),i=10*t,s=10*a,"deltaY"in e&&(s=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||s)&&e.deltaMode&&(1===e.deltaMode?(i*=40,s*=40):(i*=800,s*=800)),i&&!t&&(t=i<1?-1:1),s&&!a&&(a=s<1?-1:1),{spinX:t,spinY:a,pixelX:i,pixelY:s}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,a=this,i=a.params.mousewheel;if(!a.mouseEntered&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var s=0,n=a.rtlTranslate?-1:1,r=j.normalize(t);if(i.forceToAxis)if(a.isHorizontal()){if(!(Math.abs(r.pixelX)>Math.abs(r.pixelY)))return!0;s=r.pixelX*n}else{if(!(Math.abs(r.pixelY)>Math.abs(r.pixelX)))return!0;s=r.pixelY}else s=Math.abs(r.pixelX)>Math.abs(r.pixelY)?-r.pixelX*n:-r.pixelY;if(0===s)return!0;if(i.invert&&(s=-s),a.params.freeMode){a.params.loop&&a.loopFix();var o=a.getTranslate()+s*i.sensitivity,l=a.isBeginning,d=a.isEnd;if(o>=a.minTranslate()&&(o=a.minTranslate()),o<=a.maxTranslate()&&(o=a.maxTranslate()),a.setTransition(0),a.setTranslate(o),a.updateProgress(),a.updateActiveIndex(),a.updateSlidesClasses(),(!l&&a.isBeginning||!d&&a.isEnd)&&a.updateSlidesClasses(),a.params.freeModeSticky&&(clearTimeout(a.mousewheel.timeout),a.mousewheel.timeout=te.nextTick(function(){a.slideToClosest()},300)),a.emit("scroll",t),a.params.autoplay&&a.params.autoplayDisableOnInteraction&&a.autoplay.stop(),o===a.minTranslate()||o===a.maxTranslate())return!0}else{if(60<te.now()-a.mousewheel.lastScrollTime)if(s<0)if(a.isEnd&&!a.params.loop||a.animating){if(i.releaseOnEdges)return!0}else a.slideNext(),a.emit("scroll",t);else if(a.isBeginning&&!a.params.loop||a.animating){if(i.releaseOnEdges)return!0}else a.slidePrev(),a.emit("scroll",t);a.mousewheel.lastScrollTime=(new ee.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable:function(){var e=this;if(!j.event)return!1;if(e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=I(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(j.event,e.mousewheel.handle),e.mousewheel.enabled=!0},disable:function(){var e=this;if(!j.event)return!1;if(!e.mousewheel.enabled)return!1;var t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=I(e.params.mousewheel.eventsTarged)),t.off(j.event,e.mousewheel.handle),!(e.mousewheel.enabled=!1)}},W={update:function(){var e,t,a,i=this,s=i.params.navigation;i.params.loop||(t=(e=i.navigation).$nextEl,(a=e.$prevEl)&&0<a.length&&(i.isBeginning?a.addClass(s.disabledClass):a.removeClass(s.disabledClass),a[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](s.lockClass)),t&&0<t.length&&(i.isEnd?t.addClass(s.disabledClass):t.removeClass(s.disabledClass),t[i.params.watchOverflow&&i.isLocked?"addClass":"removeClass"](s.lockClass)))},onPrevClick:function(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick:function(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init:function(){var e,t,a=this,i=a.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=I(i.nextEl),a.params.uniqueNavElements&&"string"==typeof i.nextEl&&1<e.length&&1===a.$el.find(i.nextEl).length&&(e=a.$el.find(i.nextEl))),i.prevEl&&(t=I(i.prevEl),a.params.uniqueNavElements&&"string"==typeof i.prevEl&&1<t.length&&1===a.$el.find(i.prevEl).length&&(t=a.$el.find(i.prevEl))),e&&0<e.length&&e.on("click",a.navigation.onNextClick),t&&0<t.length&&t.on("click",a.navigation.onPrevClick),te.extend(a.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,a=t.$nextEl,i=t.$prevEl;a&&a.length&&(a.off("click",e.navigation.onNextClick),a.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},_={update:function(){var e=this,t=e.rtl,s=e.params.pagination;if(s.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n,a,i,r,o,l=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,d=e.pagination.$el,c=e.params.loop?Math.ceil((l-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((n=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>l-1-2*e.loopedSlides&&(n-=l-2*e.loopedSlides),c-1<n&&(n-=c),n<0&&"bullets"!==e.params.paginationType&&(n=c+n)):n=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===s.type&&e.pagination.bullets&&0<e.pagination.bullets.length){var p,u,h,f,m,g,v=e.pagination.bullets;if(s.dynamicBullets&&(e.pagination.bulletSize=v.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),d.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(s.dynamicMainBullets+4)+"px"),1<s.dynamicMainBullets&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=n-e.previousIndex,e.pagination.dynamicBulletIndex>s.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=s.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),p=n-e.pagination.dynamicBulletIndex,h=((u=p+(Math.min(v.length,s.dynamicMainBullets)-1))+p)/2),v.removeClass(s.bulletActiveClass+" "+s.bulletActiveClass+"-next "+s.bulletActiveClass+"-next-next "+s.bulletActiveClass+"-prev "+s.bulletActiveClass+"-prev-prev "+s.bulletActiveClass+"-main"),1<d.length)v.each(function(e,t){var a=I(t),i=a.index();i===n&&a.addClass(s.bulletActiveClass),s.dynamicBullets&&(p<=i&&i<=u&&a.addClass(s.bulletActiveClass+"-main"),i===p&&a.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),i===u&&a.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next"))});else if(v.eq(n).addClass(s.bulletActiveClass),s.dynamicBullets){for(var b=v.eq(p),y=v.eq(u),x=p;x<=u;x+=1)v.eq(x).addClass(s.bulletActiveClass+"-main");b.prev().addClass(s.bulletActiveClass+"-prev").prev().addClass(s.bulletActiveClass+"-prev-prev"),y.next().addClass(s.bulletActiveClass+"-next").next().addClass(s.bulletActiveClass+"-next-next")}s.dynamicBullets&&(f=Math.min(v.length,s.dynamicMainBullets+4),m=(e.pagination.bulletSize*f-e.pagination.bulletSize)/2-h*e.pagination.bulletSize,g=t?"right":"left",v.css(e.isHorizontal()?g:"top",m+"px"))}"fraction"===s.type&&(d.find("."+s.currentClass).text(s.formatFractionCurrent(n+1)),d.find("."+s.totalClass).text(s.formatFractionTotal(c))),"progressbar"===s.type&&(a=s.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical",i=(n+1)/c,o=r=1,"horizontal"===a?r=i:o=i,d.find("."+s.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+r+") scaleY("+o+")").transition(e.params.speed)),"custom"===s.type&&s.renderCustom?(d.html(s.renderCustom(e,n+1,c)),e.emit("paginationRender",e,d[0])):e.emit("paginationUpdate",e,d[0]),d[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](s.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var a=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,s="";if("bullets"===t.type){for(var n=e.params.loop?Math.ceil((a-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,r=0;r<n;r+=1)t.renderBullet?s+=t.renderBullet.call(e,r,t.bulletClass):s+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(s),e.pagination.bullets=i.find("."+t.bulletClass)}"fraction"===t.type&&(s=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(s)),"progressbar"===t.type&&(s=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(s)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e,a=this,t=a.params.pagination;!t.el||0!==(e=I(t.el)).length&&(a.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&1===a.$el.find(t.el).length&&(e=a.$el.find(t.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),a.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click","."+t.bulletClass,function(e){e.preventDefault();var t=I(this).index()*a.params.slidesPerGroup;a.params.loop&&(t+=a.loopedSlides),a.slideTo(t)}),te.extend(a.pagination,{$el:e,el:e[0]}))},destroy:function(){var e,t=this,a=t.params.pagination;a.el&&t.pagination.el&&t.pagination.$el&&0!==t.pagination.$el.length&&((e=t.pagination.$el).removeClass(a.hiddenClass),e.removeClass(a.modifierClass+a.type),t.pagination.bullets&&t.pagination.bullets.removeClass(a.bulletActiveClass),a.clickable&&e.off("click","."+a.bulletClass))}},U={setTranslate:function(){var e,t,a,i,s,n,r,o,l,d,c=this;c.params.scrollbar.el&&c.scrollbar.el&&(e=c.scrollbar,t=c.rtlTranslate,a=c.progress,i=e.dragSize,s=e.trackSize,n=e.$dragEl,r=e.$el,o=c.params.scrollbar,d=(s-(l=i))*a,t?0<(d=-d)?(l=i-d,d=0):s<-d+i&&(l=s+d):d<0?(l=i+d,d=0):s<d+i&&(l=s-d),c.isHorizontal()?(ae.transforms3d?n.transform("translate3d("+d+"px, 0, 0)"):n.transform("translateX("+d+"px)"),n[0].style.width=l+"px"):(ae.transforms3d?n.transform("translate3d(0px, "+d+"px, 0)"):n.transform("translateY("+d+"px)"),n[0].style.height=l+"px"),o.hide&&(clearTimeout(c.scrollbar.timeout),r[0].style.opacity=1,c.scrollbar.timeout=setTimeout(function(){r[0].style.opacity=0,r.transition(400)},1e3)))},setTransition:function(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize:function(){var e,t,a,i,s,n,r,o=this;o.params.scrollbar.el&&o.scrollbar.el&&(t=(e=o.scrollbar).$dragEl,a=e.$el,t[0].style.width="",t[0].style.height="",i=o.isHorizontal()?a[0].offsetWidth:a[0].offsetHeight,n=(s=o.size/o.virtualSize)*(i/o.size),r="auto"===o.params.scrollbar.dragSize?i*s:parseInt(o.params.scrollbar.dragSize,10),o.isHorizontal()?t[0].style.width=r+"px":t[0].style.height=r+"px",a[0].style.display=1<=s?"none":"",o.params.scrollbar.hide&&(a[0].style.opacity=0),te.extend(e,{trackSize:i,divider:s,moveDivider:n,dragSize:r}),e.$el[o.params.watchOverflow&&o.isLocked?"addClass":"removeClass"](o.params.scrollbar.lockClass))},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY},setDragPosition:function(e){var t=this,a=t.scrollbar,i=t.rtlTranslate,s=a.$el,n=a.dragSize,r=a.trackSize,o=a.dragStartPos,l=(a.getPointerPosition(e)-s.offset()[t.isHorizontal()?"left":"top"]-(null!==o?o:n/2))/(r-n);l=Math.max(Math.min(l,1),0),i&&(l=1-l);var d=t.minTranslate()+(t.maxTranslate()-t.minTranslate())*l;t.updateProgress(d),t.setTranslate(d),t.updateActiveIndex(),t.updateSlidesClasses()},onDragStart:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar,s=t.$wrapperEl,n=i.$el,r=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===r[0]||e.target===r?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),n.transition(0),a.hide&&n.css("opacity",1),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this.scrollbar,a=this.$wrapperEl,i=t.$el,s=t.$dragEl;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),a.transition(0),i.transition(0),s.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,a=t.params.scrollbar,i=t.scrollbar.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,a.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=te.nextTick(function(){i.css("opacity",0),i.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),a.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e,t,a,i,s,n,r,o=this;o.params.scrollbar.el&&(e=o.scrollbar,t=o.touchEventsTouch,a=o.touchEventsDesktop,i=o.params,s=e.$el[0],n=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!1,capture:!1},r=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1},ae.touch?(s.addEventListener(t.start,o.scrollbar.onDragStart,n),s.addEventListener(t.move,o.scrollbar.onDragMove,n),s.addEventListener(t.end,o.scrollbar.onDragEnd,r)):(s.addEventListener(a.start,o.scrollbar.onDragStart,n),m.addEventListener(a.move,o.scrollbar.onDragMove,n),m.addEventListener(a.end,o.scrollbar.onDragEnd,r)))},disableDraggable:function(){var e,t,a,i,s,n,r,o=this;o.params.scrollbar.el&&(e=o.scrollbar,t=o.touchEventsTouch,a=o.touchEventsDesktop,i=o.params,s=e.$el[0],n=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!1,capture:!1},r=!(!ae.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1},ae.touch?(s.removeEventListener(t.start,o.scrollbar.onDragStart,n),s.removeEventListener(t.move,o.scrollbar.onDragMove,n),s.removeEventListener(t.end,o.scrollbar.onDragEnd,r)):(s.removeEventListener(a.start,o.scrollbar.onDragStart,n),m.removeEventListener(a.move,o.scrollbar.onDragMove,n),m.removeEventListener(a.end,o.scrollbar.onDragEnd,r)))},init:function(){var e,t,a,i,s,n=this;n.params.scrollbar.el&&(e=n.scrollbar,t=n.$el,i=I((a=n.params.scrollbar).el),n.params.uniqueNavElements&&"string"==typeof a.el&&1<i.length&&1===t.find(a.el).length&&(i=t.find(a.el)),0===(s=i.find("."+n.params.scrollbar.dragClass)).length&&(s=I('<div class="'+n.params.scrollbar.dragClass+'"></div>'),i.append(s)),te.extend(e,{$el:i,el:i[0],$dragEl:s,dragEl:s[0]}),a.draggable&&e.enableDraggable())},destroy:function(){this.scrollbar.disableDraggable()}},K={setTransform:function(e,t){var a,i,s=this.rtl,n=I(e),r=s?-1:1,o=n.attr("data-swiper-parallax")||"0",l=n.attr("data-swiper-parallax-x"),d=n.attr("data-swiper-parallax-y"),c=n.attr("data-swiper-parallax-scale"),p=n.attr("data-swiper-parallax-opacity");l||d?(l=l||"0",d=d||"0"):this.isHorizontal()?(l=o,d="0"):(d=o,l="0"),l=0<=l.indexOf("%")?parseInt(l,10)*t*r+"%":l*t*r+"px",d=0<=d.indexOf("%")?parseInt(d,10)*t+"%":d*t+"px",null!=p&&(a=p-(p-1)*(1-Math.abs(t)),n[0].style.opacity=a),null==c?n.transform("translate3d("+l+", "+d+", 0px)"):(i=c-(c-1)*(1-Math.abs(t)),n.transform("translate3d("+l+", "+d+", 0px) scale("+i+")"))},setTranslate:function(){var i=this,e=i.$el,t=i.slides,s=i.progress,n=i.snapGrid;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){i.parallax.setTransform(t,s)}),t.each(function(e,t){var a=t.progress;1<i.params.slidesPerGroup&&"auto"!==i.params.slidesPerView&&(a+=Math.ceil(e/2)-s*(n.length-1)),a=Math.min(Math.max(a,-1),1),I(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){i.parallax.setTransform(t,a)})})},setTransition:function(s){void 0===s&&(s=this.params.speed);this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(function(e,t){var a=I(t),i=parseInt(a.attr("data-swiper-parallax-duration"),10)||s;0===s&&(i=0),a.transition(i)})}},Z={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,s=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(s-a,2))},onGestureStart:function(e){var t=this,a=t.params.zoom,i=t.zoom,s=i.gesture;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!ae.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,s.scaleStart=Z.getDistanceBetweenTouches(e)}s.$slideEl&&s.$slideEl.length||(s.$slideEl=I(e.target).closest(".swiper-slide"),0===s.$slideEl.length&&(s.$slideEl=t.slides.eq(t.activeIndex)),s.$imageEl=s.$slideEl.find("img, svg, canvas"),s.$imageWrapEl=s.$imageEl.parent("."+a.containerClass),s.maxRatio=s.$imageWrapEl.attr("data-swiper-zoom")||a.maxRatio,0!==s.$imageWrapEl.length)?(s.$imageEl.transition(0),t.zoom.isScaling=!0):s.$imageEl=void 0},onGestureChange:function(e){var t=this.params.zoom,a=this.zoom,i=a.gesture;if(!ae.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;a.fakeGestureMoved=!0,i.scaleMove=Z.getDistanceBetweenTouches(e)}i.$imageEl&&0!==i.$imageEl.length&&(ae.gestures?a.scale=e.scale*a.currentScale:a.scale=i.scaleMove/i.scaleStart*a.currentScale,a.scale>i.maxRatio&&(a.scale=i.maxRatio-1+Math.pow(a.scale-i.maxRatio+1,.5)),a.scale<t.minRatio&&(a.scale=t.minRatio+1-Math.pow(t.minRatio-a.scale+1,.5)),i.$imageEl.transform("translate3d(0,0,0) scale("+a.scale+")"))},onGestureEnd:function(e){var t=this.params.zoom,a=this.zoom,i=a.gesture;if(!ae.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!$.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}i.$imageEl&&0!==i.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,i.maxRatio),t.minRatio),i.$imageEl.transition(this.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(i.$slideEl=void 0))},onTouchStart:function(e){var t=this.zoom,a=t.gesture,i=t.image;a.$imageEl&&0!==a.$imageEl.length&&(i.isTouched||($.android&&e.preventDefault(),i.isTouched=!0,i.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,a=t.zoom,i=a.gesture,s=a.image,n=a.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,s.isTouched&&i.$slideEl)){s.isMoved||(s.width=i.$imageEl[0].offsetWidth,s.height=i.$imageEl[0].offsetHeight,s.startX=te.getTranslate(i.$imageWrapEl[0],"x")||0,s.startY=te.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(s.startX=-s.startX,s.startY=-s.startY));var r=s.width*a.scale,o=s.height*a.scale;if(!(r<i.slideWidth&&o<i.slideHeight)){if(s.minX=Math.min(i.slideWidth/2-r/2,0),s.maxX=-s.minX,s.minY=Math.min(i.slideHeight/2-o/2,0),s.maxY=-s.minY,s.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,s.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!s.isMoved&&!a.isScaling){if(t.isHorizontal()&&(Math.floor(s.minX)===Math.floor(s.startX)&&s.touchesCurrent.x<s.touchesStart.x||Math.floor(s.maxX)===Math.floor(s.startX)&&s.touchesCurrent.x>s.touchesStart.x))return void(s.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(s.minY)===Math.floor(s.startY)&&s.touchesCurrent.y<s.touchesStart.y||Math.floor(s.maxY)===Math.floor(s.startY)&&s.touchesCurrent.y>s.touchesStart.y))return void(s.isTouched=!1)}e.preventDefault(),e.stopPropagation(),s.isMoved=!0,s.currentX=s.touchesCurrent.x-s.touchesStart.x+s.startX,s.currentY=s.touchesCurrent.y-s.touchesStart.y+s.startY,s.currentX<s.minX&&(s.currentX=s.minX+1-Math.pow(s.minX-s.currentX+1,.8)),s.currentX>s.maxX&&(s.currentX=s.maxX-1+Math.pow(s.currentX-s.maxX+1,.8)),s.currentY<s.minY&&(s.currentY=s.minY+1-Math.pow(s.minY-s.currentY+1,.8)),s.currentY>s.maxY&&(s.currentY=s.maxY-1+Math.pow(s.currentY-s.maxY+1,.8)),n.prevPositionX||(n.prevPositionX=s.touchesCurrent.x),n.prevPositionY||(n.prevPositionY=s.touchesCurrent.y),n.prevTime||(n.prevTime=Date.now()),n.x=(s.touchesCurrent.x-n.prevPositionX)/(Date.now()-n.prevTime)/2,n.y=(s.touchesCurrent.y-n.prevPositionY)/(Date.now()-n.prevTime)/2,Math.abs(s.touchesCurrent.x-n.prevPositionX)<2&&(n.x=0),Math.abs(s.touchesCurrent.y-n.prevPositionY)<2&&(n.y=0),n.prevPositionX=s.touchesCurrent.x,n.prevPositionY=s.touchesCurrent.y,n.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+s.currentX+"px, "+s.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,a=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!a.isTouched||!a.isMoved)return a.isTouched=!1,void(a.isMoved=!1);a.isTouched=!1,a.isMoved=!1;var s=300,n=300,r=i.x*s,o=a.currentX+r,l=i.y*n,d=a.currentY+l;0!==i.x&&(s=Math.abs((o-a.currentX)/i.x)),0!==i.y&&(n=Math.abs((d-a.currentY)/i.y));var c=Math.max(s,n);a.currentX=o,a.currentY=d;var p=a.width*e.scale,u=a.height*e.scale;a.minX=Math.min(t.slideWidth/2-p/2,0),a.maxX=-a.minX,a.minY=Math.min(t.slideHeight/2-u/2,0),a.maxY=-a.minY,a.currentX=Math.max(Math.min(a.currentX,a.maxX),a.minX),a.currentY=Math.max(Math.min(a.currentY,a.maxY),a.minY),t.$imageWrapEl.transition(c).transform("translate3d("+a.currentX+"px, "+a.currentY+"px,0)")}},onTransitionEnd:function(){var e=this.zoom,t=e.gesture;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,e.currentScale=1,t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,a,i,s,n,r,o,l,d,c,p,u,h,f,m,g,v=this,b=v.zoom,y=v.params.zoom,x=b.gesture,w=b.image;x.$slideEl||(x.$slideEl=v.clickedSlide?I(v.clickedSlide):v.slides.eq(v.activeIndex),x.$imageEl=x.$slideEl.find("img, svg, canvas"),x.$imageWrapEl=x.$imageEl.parent("."+y.containerClass)),x.$imageEl&&0!==x.$imageEl.length&&(x.$slideEl.addClass(""+y.zoomedSlideClass),a=void 0===w.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,"touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=w.touchesStart.x,w.touchesStart.y),b.scale=x.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,b.currentScale=x.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(m=x.$slideEl[0].offsetWidth,g=x.$slideEl[0].offsetHeight,i=x.$slideEl.offset().left+m/2-t,s=x.$slideEl.offset().top+g/2-a,o=x.$imageEl[0].offsetWidth,l=x.$imageEl[0].offsetHeight,d=o*b.scale,c=l*b.scale,h=-(p=Math.min(m/2-d/2,0)),f=-(u=Math.min(g/2-c/2,0)),(n=i*b.scale)<p&&(n=p),h<n&&(n=h),(r=s*b.scale)<u&&(r=u),f<r&&(r=f)):r=n=0,x.$imageWrapEl.transition(300).transform("translate3d("+n+"px, "+r+"px,0)"),x.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+b.scale+")"))},out:function(){var e=this,t=e.zoom,a=e.params.zoom,i=t.gesture;i.$slideEl||(i.$slideEl=e.clickedSlide?I(e.clickedSlide):e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent("."+a.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+a.zoomedSlideClass),i.$slideEl=void 0)},enable:function(){var e,t=this,a=t.zoom;a.enabled||(a.enabled=!0,e=!("touchstart"!==t.touchEvents.start||!ae.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},ae.gestures?(t.$wrapperEl.on("gesturestart",".swiper-slide",a.onGestureStart,e),t.$wrapperEl.on("gesturechange",".swiper-slide",a.onGestureChange,e),t.$wrapperEl.on("gestureend",".swiper-slide",a.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.on(t.touchEvents.start,".swiper-slide",a.onGestureStart,e),t.$wrapperEl.on(t.touchEvents.move,".swiper-slide",a.onGestureChange,e),t.$wrapperEl.on(t.touchEvents.end,".swiper-slide",a.onGestureEnd,e)),t.$wrapperEl.on(t.touchEvents.move,"."+t.params.zoom.containerClass,a.onTouchMove))},disable:function(){var e,t=this,a=t.zoom;a.enabled&&(t.zoom.enabled=!1,e=!("touchstart"!==t.touchEvents.start||!ae.passiveListener||!t.params.passiveListeners)&&{passive:!0,capture:!1},ae.gestures?(t.$wrapperEl.off("gesturestart",".swiper-slide",a.onGestureStart,e),t.$wrapperEl.off("gesturechange",".swiper-slide",a.onGestureChange,e),t.$wrapperEl.off("gestureend",".swiper-slide",a.onGestureEnd,e)):"touchstart"===t.touchEvents.start&&(t.$wrapperEl.off(t.touchEvents.start,".swiper-slide",a.onGestureStart,e),t.$wrapperEl.off(t.touchEvents.move,".swiper-slide",a.onGestureChange,e),t.$wrapperEl.off(t.touchEvents.end,".swiper-slide",a.onGestureEnd,e)),t.$wrapperEl.off(t.touchEvents.move,"."+t.params.zoom.containerClass,a.onTouchMove))}},Q={loadInSlide:function(e,l){void 0===l&&(l=!0);var d,t,c=this,p=c.params.lazy;void 0!==e&&0!==c.slides.length&&(t=(d=c.virtual&&c.params.virtual.enabled?c.$wrapperEl.children("."+c.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):c.slides.eq(e)).find("."+p.elementClass+":not(."+p.loadedClass+"):not(."+p.loadingClass+")"),!d.hasClass(p.elementClass)||d.hasClass(p.loadedClass)||d.hasClass(p.loadingClass)||(t=t.add(d[0])),0!==t.length&&t.each(function(e,t){var i=I(t);i.addClass(p.loadingClass);var s=i.attr("data-background"),n=i.attr("data-src"),r=i.attr("data-srcset"),o=i.attr("data-sizes");c.loadImage(i[0],n||s,r,o,!1,function(){var e,t,a;null==c||!c||c&&!c.params||c.destroyed||(s?(i.css("background-image",'url("'+s+'")'),i.removeAttr("data-background")):(r&&(i.attr("srcset",r),i.removeAttr("data-srcset")),o&&(i.attr("sizes",o),i.removeAttr("data-sizes")),n&&(i.attr("src",n),i.removeAttr("data-src"))),i.addClass(p.loadedClass).removeClass(p.loadingClass),d.find("."+p.preloaderClass).remove(),c.params.loop&&l&&(e=d.attr("data-swiper-slide-index"),d.hasClass(c.params.slideDuplicateClass)?(t=c.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+c.params.slideDuplicateClass+")"),c.lazy.loadInSlide(t.index(),!1)):(a=c.$wrapperEl.children("."+c.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]'),c.lazy.loadInSlide(a.index(),!1))),c.emit("lazyImageReady",d[0],i[0]))}),c.emit("lazyImageLoad",d[0],i[0])}))},load:function(){var i=this,t=i.$wrapperEl,a=i.params,s=i.slides,e=i.activeIndex,n=i.virtual&&a.virtual.enabled,r=a.lazy,o=a.slidesPerView;function l(e){if(n){if(t.children("."+a.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return 1}else if(s[e])return 1}function d(e){return n?I(e).attr("data-swiper-slide-index"):I(e).index()}if("auto"===o&&(o=0),i.lazy.initialImageLoaded||(i.lazy.initialImageLoaded=!0),i.params.watchSlidesVisibility)t.children("."+a.slideVisibleClass).each(function(e,t){var a=n?I(t).attr("data-swiper-slide-index"):I(t).index();i.lazy.loadInSlide(a)});else if(1<o)for(var c=e;c<e+o;c+=1)l(c)&&i.lazy.loadInSlide(c);else i.lazy.loadInSlide(e);if(r.loadPrevNext)if(1<o||r.loadPrevNextAmount&&1<r.loadPrevNextAmount){for(var p=r.loadPrevNextAmount,u=o,h=Math.min(e+u+Math.max(p,u),s.length),f=Math.max(e-Math.max(u,p),0),m=e+o;m<h;m+=1)l(m)&&i.lazy.loadInSlide(m);for(var g=f;g<e;g+=1)l(g)&&i.lazy.loadInSlide(g)}else{var v=t.children("."+a.slideNextClass);0<v.length&&i.lazy.loadInSlide(d(v));var b=t.children("."+a.slidePrevClass);0<b.length&&i.lazy.loadInSlide(d(b))}}},J={LinearSpline:function(e,t){var a,i,s,n,r,o=function(e,t){for(i=-1,a=e.length;1<a-i;)e[s=a+i>>1]<=t?i=s:a=s;return a};return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=o(this.x,e),n=r-1,(e-this.x[n])*(this.y[r]-this.y[n])/(this.x[r]-this.x[n])+this.y[n]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new J.LinearSpline(t.slidesGrid,e.slidesGrid):new J.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var a,i,s=this,n=s.controller.control;function r(e){var t=s.rtlTranslate?-s.translate:s.translate;"slide"===s.params.controller.by&&(s.controller.getInterpolateFunction(e),i=-s.controller.spline.interpolate(-t)),i&&"container"!==s.params.controller.by||(a=(e.maxTranslate()-e.minTranslate())/(s.maxTranslate()-s.minTranslate()),i=(t-s.minTranslate())*a+e.minTranslate()),s.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,s),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(n))for(var o=0;o<n.length;o+=1)n[o]!==t&&n[o]instanceof L&&r(n[o]);else n instanceof L&&t!==n&&r(n)},setTransition:function(t,e){var a,i=this,s=i.controller.control;function n(e){e.setTransition(t,i),0!==t&&(e.transitionStart(),e.params.autoHeight&&te.nextTick(function(){e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(function(){s&&(e.params.loop&&"slide"===i.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(a=0;a<s.length;a+=1)s[a]!==e&&s[a]instanceof L&&n(s[a]);else s instanceof L&&e!==s&&n(s)}},se={makeElFocusable:function(e){return e.attr("tabIndex","0"),e},addElRole:function(e,t){return e.attr("role",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t,a=this,i=a.params.a11y;13===e.keyCode&&(t=I(e.target),a.navigation&&a.navigation.$nextEl&&t.is(a.navigation.$nextEl)&&(a.isEnd&&!a.params.loop||a.slideNext(),a.isEnd?a.a11y.notify(i.lastSlideMessage):a.a11y.notify(i.nextSlideMessage)),a.navigation&&a.navigation.$prevEl&&t.is(a.navigation.$prevEl)&&(a.isBeginning&&!a.params.loop||a.slidePrev(),a.isBeginning?a.a11y.notify(i.firstSlideMessage):a.a11y.notify(i.prevSlideMessage)),a.pagination&&t.is("."+a.params.pagination.bulletClass)&&t[0].click())},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e,t,a,i=this;i.params.loop||(t=(e=i.navigation).$nextEl,(a=e.$prevEl)&&0<a.length&&(i.isBeginning?i.a11y.disableEl(a):i.a11y.enableEl(a)),t&&0<t.length&&(i.isEnd?i.a11y.disableEl(t):i.a11y.enableEl(t)))},updatePagination:function(){var i=this,s=i.params.a11y;i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.bullets.each(function(e,t){var a=I(t);i.a11y.makeElFocusable(a),i.a11y.addElRole(a,"button"),i.a11y.addElLabel(a,s.paginationBulletMessage.replace(/{{index}}/,a.index()+1))})},init:function(){var e=this;e.$el.append(e.a11y.liveRegion);var t,a,i=e.params.a11y;e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(a=e.navigation.$prevEl),t&&(e.a11y.makeElFocusable(t),e.a11y.addElRole(t,"button"),e.a11y.addElLabel(t,i.nextSlideMessage),t.on("keydown",e.a11y.onEnterKey)),a&&(e.a11y.makeElFocusable(a),e.a11y.addElRole(a,"button"),e.a11y.addElLabel(a,i.prevSlideMessage),a.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass,e.a11y.onEnterKey)},destroy:function(){var e,t,a=this;a.a11y.liveRegion&&0<a.a11y.liveRegion.length&&a.a11y.liveRegion.remove(),a.navigation&&a.navigation.$nextEl&&(e=a.navigation.$nextEl),a.navigation&&a.navigation.$prevEl&&(t=a.navigation.$prevEl),e&&e.off("keydown",a.a11y.onEnterKey),t&&t.off("keydown",a.a11y.onEnterKey),a.pagination&&a.params.pagination.clickable&&a.pagination.bullets&&a.pagination.bullets.length&&a.pagination.$el.off("keydown","."+a.params.pagination.bulletClass,a.a11y.onEnterKey)}},ne={init:function(){var e=this;if(e.params.history){if(!ee.history||!ee.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var t=e.history;t.initialized=!0,t.paths=ne.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||ee.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){this.params.history.replaceState||ee.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){this.history.paths=ne.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues:function(){var e=ee.location.pathname.slice(1).split("/").filter(function(e){return""!==e}),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory:function(e,t){var a,i,s;this.history.initialized&&this.params.history.enabled&&(a=this.slides.eq(t),i=ne.slugify(a.attr("data-history")),ee.location.pathname.includes(e)||(i=e+"/"+i),(s=ee.history.state)&&s.value===i||(this.params.history.replaceState?ee.history.replaceState({value:i},null,i):ee.history.pushState({value:i},null,i)))},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,a){var i=this;if(t)for(var s=0,n=i.slides.length;s<n;s+=1){var r,o=i.slides.eq(s);ne.slugify(o.attr("data-history"))!==t||o.hasClass(i.params.slideDuplicateClass)||(r=o.index(),i.slideTo(r,e,a))}else i.slideTo(0,e,a)}},re={onHashCange:function(){var e=this,t=m.location.hash.replace("#","");if(t!==e.slides.eq(e.activeIndex).attr("data-hash")){var a=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+t+'"]').index();if(void 0===a)return;e.slideTo(a)}},setHash:function(){var e,t,a=this;a.hashNavigation.initialized&&a.params.hashNavigation.enabled&&(a.params.hashNavigation.replaceState&&ee.history&&ee.history.replaceState?ee.history.replaceState(null,null,"#"+a.slides.eq(a.activeIndex).attr("data-hash")||""):(t=(e=a.slides.eq(a.activeIndex)).attr("data-hash")||e.attr("data-history"),m.location.hash=t||""))},init:function(){var e=this;if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var t=m.location.hash.replace("#","");if(t)for(var a=0,i=e.slides.length;a<i;a+=1){var s,n=e.slides.eq(a);(n.attr("data-hash")||n.attr("data-history"))!==t||n.hasClass(e.params.slideDuplicateClass)||(s=n.index(),e.slideTo(s,0,e.params.runCallbacksOnInit,!0))}e.params.hashNavigation.watchState&&I(ee).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){this.params.hashNavigation.watchState&&I(ee).off("hashchange",this.hashNavigation.onHashCange)}},oe={run:function(){var e=this,t=e.slides.eq(e.activeIndex),a=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(a=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=te.nextTick(function(){e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},a)},start:function(){var e=this;return void 0===e.autoplay.timeout&&(!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0))},stop:function(){var e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}},le={setTranslate:function(){for(var e=this,t=e.slides,a=0;a<t.length;a+=1){var i=e.slides.eq(a),s=-i[0].swiperSlideOffset;e.params.virtualTranslate||(s-=e.translate);var n=0;e.isHorizontal()||(n=s,s=0);var r=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:r}).transform("translate3d("+s+"px, "+n+"px, 0px)")}},setTransition:function(e){var a,i=this,t=i.slides,s=i.$wrapperEl;t.transition(e),i.params.virtualTranslate&&0!==e&&(a=!1,t.transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)s.trigger(e[t])}}))}},de={setTranslate:function(){var e,t=this,a=t.$el,i=t.$wrapperEl,s=t.slides,n=t.width,r=t.height,o=t.rtlTranslate,l=t.size,d=t.params.cubeEffect,c=t.isHorizontal(),p=t.virtual&&t.params.virtual.enabled,u=0;d.shadow&&(c?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=I('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:n+"px"})):0===(e=a.find(".swiper-cube-shadow")).length&&(e=I('<div class="swiper-cube-shadow"></div>'),a.append(e)));for(var h,f,m,g,v,b=0;b<s.length;b+=1){var y=s.eq(b),x=b;p&&(x=parseInt(y.attr("data-swiper-slide-index"),10));var w=90*x,T=Math.floor(w/360);o&&(w=-w,T=Math.floor(-w/360));var S=Math.max(Math.min(y[0].progress,1),-1),C=0,E=0,$=0;x%4==0?(C=4*-T*l,$=0):(x-1)%4==0?(C=0,$=4*-T*l):(x-2)%4==0?(C=l+4*T*l,$=l):(x-3)%4==0&&(C=-l,$=3*l+4*l*T),o&&(C=-C),c||(E=C,C=0);var P,M,k="rotateX("+(c?0:-w)+"deg) rotateY("+(c?w:0)+"deg) translate3d("+C+"px, "+E+"px, "+$+"px)";S<=1&&-1<S&&(u=o?90*-x-90*S:90*x+90*S),y.transform(k),d.slideShadows&&(P=c?y.find(".swiper-slide-shadow-left"):y.find(".swiper-slide-shadow-top"),M=c?y.find(".swiper-slide-shadow-right"):y.find(".swiper-slide-shadow-bottom"),0===P.length&&(P=I('<div class="swiper-slide-shadow-'+(c?"left":"top")+'"></div>'),y.append(P)),0===M.length&&(M=I('<div class="swiper-slide-shadow-'+(c?"right":"bottom")+'"></div>'),y.append(M)),P.length&&(P[0].style.opacity=Math.max(-S,0)),M.length&&(M[0].style.opacity=Math.max(S,0)))}i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow&&(c?e.transform("translate3d(0px, "+(n/2+d.shadowOffset)+"px, "+-n/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")"):(h=Math.abs(u)-90*Math.floor(Math.abs(u)/90),f=1.5-(Math.sin(2*h*Math.PI/360)/2+Math.cos(2*h*Math.PI/360)/2),m=d.shadowScale,g=d.shadowScale/f,v=d.shadowOffset,e.transform("scale3d("+m+", 1, "+g+") translate3d(0px, "+(r/2+v)+"px, "+-r/2/g+"px) rotateX(-90deg)")));var z=ie.isSafari||ie.isUiWebView?-l/2:0;i.transform("translate3d(0px,0,"+z+"px) rotateX("+(t.isHorizontal()?0:u)+"deg) rotateY("+(t.isHorizontal()?-u:0)+"deg)")},setTransition:function(e){var t=this.$el;this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}},ce={setTranslate:function(){for(var e=this,t=e.slides,a=e.rtlTranslate,i=0;i<t.length;i+=1){var s=t.eq(i),n=s[0].progress;e.params.flipEffect.limitRotation&&(n=Math.max(Math.min(s[0].progress,1),-1));var r,o,l=-180*n,d=0,c=-s[0].swiperSlideOffset,p=0;e.isHorizontal()?a&&(l=-l):(p=c,d=-l,l=c=0),s[0].style.zIndex=-Math.abs(Math.round(n))+t.length,e.params.flipEffect.slideShadows&&(r=e.isHorizontal()?s.find(".swiper-slide-shadow-left"):s.find(".swiper-slide-shadow-top"),o=e.isHorizontal()?s.find(".swiper-slide-shadow-right"):s.find(".swiper-slide-shadow-bottom"),0===r.length&&(r=I('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),s.append(r)),0===o.length&&(o=I('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),s.append(o)),r.length&&(r[0].style.opacity=Math.max(-n,0)),o.length&&(o[0].style.opacity=Math.max(n,0))),s.transform("translate3d("+c+"px, "+p+"px, 0px) rotateX("+d+"deg) rotateY("+l+"deg)")}},setTransition:function(e){var a,i=this,t=i.slides,s=i.activeIndex,n=i.$wrapperEl;t.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),i.params.virtualTranslate&&0!==e&&(a=!1,t.eq(s).transitionEnd(function(){if(!a&&i&&!i.destroyed){a=!0,i.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],t=0;t<e.length;t+=1)n.trigger(e[t])}}))}},pe={setTranslate:function(){for(var e=this,t=e.width,a=e.height,i=e.slides,s=e.$wrapperEl,n=e.slidesSizesGrid,r=e.params.coverflowEffect,o=e.isHorizontal(),l=e.translate,d=o?t/2-l:a/2-l,c=o?r.rotate:-r.rotate,p=r.depth,u=0,h=i.length;u<h;u+=1){var f=i.eq(u),m=n[u],g=(d-f[0].swiperSlideOffset-m/2)/m*r.modifier,v=o?c*g:0,b=o?0:c*g,y=-p*Math.abs(g),x=o?0:r.stretch*g,w=o?r.stretch*g:0;Math.abs(w)<.001&&(w=0),Math.abs(x)<.001&&(x=0),Math.abs(y)<.001&&(y=0),Math.abs(v)<.001&&(v=0),Math.abs(b)<.001&&(b=0);var T,S,C="translate3d("+w+"px,"+x+"px,"+y+"px)  rotateX("+b+"deg) rotateY("+v+"deg)";f.transform(C),f[0].style.zIndex=1-Math.abs(Math.round(g)),r.slideShadows&&(T=o?f.find(".swiper-slide-shadow-left"):f.find(".swiper-slide-shadow-top"),S=o?f.find(".swiper-slide-shadow-right"):f.find(".swiper-slide-shadow-bottom"),0===T.length&&(T=I('<div class="swiper-slide-shadow-'+(o?"left":"top")+'"></div>'),f.append(T)),0===S.length&&(S=I('<div class="swiper-slide-shadow-'+(o?"right":"bottom")+'"></div>'),f.append(S)),T.length&&(T[0].style.opacity=0<g?g:0),S.length&&(S[0].style.opacity=0<-g?-g:0))}(ae.pointerEvents||ae.prefixedPointerEvents)&&(s[0].style.perspectiveOrigin=d+"px 50%")},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},ue={init:function(){var e=this,t=e.params.thumbs,a=e.constructor;t.swiper instanceof a?(e.thumbs.swiper=t.swiper,te.extend(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),te.extend(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):te.isObject(t.swiper)&&(e.thumbs.swiper=new a(te.extend({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick)},onThumbClick:function(){var e,t,a,i,s,n,r=this,o=r.thumbs.swiper;o&&(e=o.clickedIndex,(t=o.clickedSlide)&&I(t).hasClass(r.params.thumbs.slideThumbActiveClass)||null!=e&&(n=o.params.loop?parseInt(I(o.clickedSlide).attr("data-swiper-slide-index"),10):e,r.params.loop&&(a=r.activeIndex,r.slides.eq(a).hasClass(r.params.slideDuplicateClass)&&(r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft,a=r.activeIndex),i=r.slides.eq(a).prevAll('[data-swiper-slide-index="'+n+'"]').eq(0).index(),s=r.slides.eq(a).nextAll('[data-swiper-slide-index="'+n+'"]').eq(0).index(),n=void 0===i||void 0!==s&&s-a<a-i?s:i),r.slideTo(n)))},update:function(e){var t=this,a=t.thumbs.swiper;if(a){var i,s,n,r,o="auto"===a.params.slidesPerView?a.slidesPerViewDynamic():a.params.slidesPerView;t.realIndex!==a.realIndex&&(i=a.activeIndex,r=a.params.loop?(a.slides.eq(i).hasClass(a.params.slideDuplicateClass)&&(a.loopFix(),a._clientLeft=a.$wrapperEl[0].clientLeft,i=a.activeIndex),s=a.slides.eq(i).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),n=a.slides.eq(i).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),void 0===s?n:void 0===n?s:n-i==i-s?i:n-i<i-s?n:s):t.realIndex,a.visibleSlidesIndexes&&a.visibleSlidesIndexes.indexOf(r)<0&&(a.params.centeredSlides?r=i<r?r-Math.floor(o/2)+1:r+Math.floor(o/2)-1:i<r&&(r=r-o+1),a.slideTo(r,e?0:void 0)));var l=1,d=t.params.thumbs.slideThumbActiveClass;if(1<t.params.slidesPerView&&!t.params.centeredSlides&&(l=t.params.slidesPerView),a.slides.removeClass(d),a.params.loop||a.params.virtual)for(var c=0;c<l;c+=1)a.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+c)+'"]').addClass(d);else for(var p=0;p<l;p+=1)a.slides.eq(t.realIndex+p).addClass(d)}}},he=[D,A,O,H,B,Y,R,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create:function(){var e=this;te.extend(e,{mousewheel:{enabled:!1,enable:j.enable.bind(e),disable:j.disable.bind(e),handle:j.handle.bind(e),handleMouseEnter:j.handleMouseEnter.bind(e),handleMouseLeave:j.handleMouseLeave.bind(e),lastScrollTime:te.now()}})},on:{init:function(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy:function(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){var e=this;te.extend(e,{navigation:{init:W.init.bind(e),update:W.update.bind(e),destroy:W.destroy.bind(e),onNextClick:W.onNextClick.bind(e),onPrevClick:W.onPrevClick.bind(e)}})},on:{init:function(){this.navigation.init(),this.navigation.update()},toEdge:function(){this.navigation.update()},fromEdge:function(){this.navigation.update()},destroy:function(){this.navigation.destroy()},click:function(e){var t,a=this,i=a.navigation,s=i.$nextEl,n=i.$prevEl;!a.params.navigation.hideOnClick||I(e.target).is(n)||I(e.target).is(s)||(s?t=s.hasClass(a.params.navigation.hiddenClass):n&&(t=n.hasClass(a.params.navigation.hiddenClass)),!0===t?a.emit("navigationShow",a):a.emit("navigationHide",a),s&&s.toggleClass(a.params.navigation.hiddenClass),n&&n.toggleClass(a.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){var e=this;te.extend(e,{pagination:{init:_.init.bind(e),render:_.render.bind(e),update:_.update.bind(e),destroy:_.destroy.bind(e),dynamicBulletIndex:0}})},on:{init:function(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange:function(){!this.params.loop&&void 0!==this.snapIndex||this.pagination.update()},snapIndexChange:function(){this.params.loop||this.pagination.update()},slidesLengthChange:function(){this.params.loop&&(this.pagination.render(),this.pagination.update())},snapGridLengthChange:function(){this.params.loop||(this.pagination.render(),this.pagination.update())},destroy:function(){this.pagination.destroy()},click:function(e){var t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&0<t.pagination.$el.length&&!I(e.target).hasClass(t.params.pagination.bulletClass)&&(!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){var e=this;te.extend(e,{scrollbar:{init:U.init.bind(e),destroy:U.destroy.bind(e),updateSize:U.updateSize.bind(e),setTranslate:U.setTranslate.bind(e),setTransition:U.setTransition.bind(e),enableDraggable:U.enableDraggable.bind(e),disableDraggable:U.disableDraggable.bind(e),setDragPosition:U.setDragPosition.bind(e),getPointerPosition:U.getPointerPosition.bind(e),onDragStart:U.onDragStart.bind(e),onDragMove:U.onDragMove.bind(e),onDragEnd:U.onDragEnd.bind(e),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init:function(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update:function(){this.scrollbar.updateSize()},resize:function(){this.scrollbar.updateSize()},observerUpdate:function(){this.scrollbar.updateSize()},setTranslate:function(){this.scrollbar.setTranslate()},setTransition:function(e){this.scrollbar.setTransition(e)},destroy:function(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){te.extend(this,{parallax:{setTransform:K.setTransform.bind(this),setTranslate:K.setTranslate.bind(this),setTransition:K.setTransition.bind(this)}})},on:{beforeInit:function(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},init:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTranslate:function(){this.params.parallax.enabled&&this.parallax.setTranslate()},setTransition:function(e){this.params.parallax.enabled&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var i=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(function(e){t[e]=Z[e].bind(i)}),te.extend(i,{zoom:t});var s=1;Object.defineProperty(i.zoom,"scale",{get:function(){return s},set:function(e){var t,a;s!==e&&(t=i.zoom.gesture.$imageEl?i.zoom.gesture.$imageEl[0]:void 0,a=i.zoom.gesture.$slideEl?i.zoom.gesture.$slideEl[0]:void 0,i.emit("zoomChange",e,t,a)),s=e}})},on:{init:function(){this.params.zoom.enabled&&this.zoom.enable()},destroy:function(){this.zoom.disable()},touchStart:function(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd:function(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap:function(e){this.params.zoom.enabled&&this.zoom.enabled&&this.params.zoom.toggle&&this.zoom.toggle(e)},transitionEnd:function(){this.zoom.enabled&&this.params.zoom.enabled&&this.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){te.extend(this,{lazy:{initialImageLoaded:!1,load:Q.load.bind(this),loadInSlide:Q.loadInSlide.bind(this)}})},on:{beforeInit:function(){this.params.lazy.enabled&&this.params.preloadImages&&(this.params.preloadImages=!1)},init:function(){this.params.lazy.enabled&&!this.params.loop&&0===this.params.initialSlide&&this.lazy.load()},scroll:function(){this.params.freeMode&&!this.params.freeModeSticky&&this.lazy.load()},resize:function(){this.params.lazy.enabled&&this.lazy.load()},scrollbarDragMove:function(){this.params.lazy.enabled&&this.lazy.load()},transitionStart:function(){var e=this;e.params.lazy.enabled&&(!e.params.lazy.loadOnTransitionStart&&(e.params.lazy.loadOnTransitionStart||e.lazy.initialImageLoaded)||e.lazy.load())},transitionEnd:function(){this.params.lazy.enabled&&!this.params.lazy.loadOnTransitionStart&&this.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){var e=this;te.extend(e,{controller:{control:e.params.controller.control,getInterpolateFunction:J.getInterpolateFunction.bind(e),setTranslate:J.setTranslate.bind(e),setTransition:J.setTransition.bind(e)}})},on:{update:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},resize:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},observerUpdate:function(){this.controller.control&&this.controller.spline&&(this.controller.spline=void 0,delete this.controller.spline)},setTranslate:function(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition:function(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create:function(){var t=this;te.extend(t,{a11y:{liveRegion:I('<span class="'+t.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')}}),Object.keys(se).forEach(function(e){t.a11y[e]=se[e].bind(t)})},on:{init:function(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge:function(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate:function(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy:function(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){var e=this;te.extend(e,{history:{init:ne.init.bind(e),setHistory:ne.setHistory.bind(e),setHistoryPopState:ne.setHistoryPopState.bind(e),scrollToSlide:ne.scrollToSlide.bind(e),destroy:ne.destroy.bind(e)}})},on:{init:function(){this.params.history.enabled&&this.history.init()},destroy:function(){this.params.history.enabled&&this.history.destroy()},transitionEnd:function(){this.history.initialized&&this.history.setHistory(this.params.history.key,this.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){var e=this;te.extend(e,{hashNavigation:{initialized:!1,init:re.init.bind(e),destroy:re.destroy.bind(e),setHash:re.setHash.bind(e),onHashCange:re.onHashCange.bind(e)}})},on:{init:function(){this.params.hashNavigation.enabled&&this.hashNavigation.init()},destroy:function(){this.params.hashNavigation.enabled&&this.hashNavigation.destroy()},transitionEnd:function(){this.hashNavigation.initialized&&this.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){var t=this;te.extend(t,{autoplay:{running:!1,paused:!1,run:oe.run.bind(t),start:oe.start.bind(t),stop:oe.stop.bind(t),pause:oe.pause.bind(t),onTransitionEnd:function(e){t&&!t.destroyed&&t.$wrapperEl&&e.target===this&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}}})},on:{init:function(){this.params.autoplay.enabled&&this.autoplay.start()},beforeTransitionStart:function(e,t){this.autoplay.running&&(t||!this.params.autoplay.disableOnInteraction?this.autoplay.pause(e):this.autoplay.stop())},sliderFirstMove:function(){this.autoplay.running&&(this.params.autoplay.disableOnInteraction?this.autoplay.stop():this.autoplay.pause())},destroy:function(){this.autoplay.running&&this.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){te.extend(this,{fadeEffect:{setTranslate:le.setTranslate.bind(this),setTransition:le.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"fade"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"fade"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},te.extend(t.params,e),te.extend(t.originalParams,e))},setTranslate:function(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition:function(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){te.extend(this,{cubeEffect:{setTranslate:de.setTranslate.bind(this),setTransition:de.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"cube"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"cube"),t.classNames.push(t.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0},te.extend(t.params,e),te.extend(t.originalParams,e))},setTranslate:function(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition:function(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){te.extend(this,{flipEffect:{setTranslate:ce.setTranslate.bind(this),setTransition:ce.setTransition.bind(this)}})},on:{beforeInit:function(){var e,t=this;"flip"===t.params.effect&&(t.classNames.push(t.params.containerModifierClass+"flip"),t.classNames.push(t.params.containerModifierClass+"3d"),e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0},te.extend(t.params,e),te.extend(t.originalParams,e))},setTranslate:function(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition:function(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create:function(){te.extend(this,{coverflowEffect:{setTranslate:pe.setTranslate.bind(this),setTransition:pe.setTransition.bind(this)}})},on:{beforeInit:function(){var e=this;"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition:function(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}},{name:"thumbs",params:{thumbs:{swiper:null,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){te.extend(this,{thumbs:{swiper:null,init:ue.init.bind(this),update:ue.update.bind(this),onThumbClick:ue.onThumbClick.bind(this)}})},on:{beforeInit:function(){var e=this.params.thumbs;e&&e.swiper&&(this.thumbs.init(),this.thumbs.update(!0))},slideChange:function(){this.thumbs.swiper&&this.thumbs.update()},update:function(){this.thumbs.swiper&&this.thumbs.update()},resize:function(){this.thumbs.swiper&&this.thumbs.update()},observerUpdate:function(){this.thumbs.swiper&&this.thumbs.update()},setTransition:function(e){var t=this.thumbs.swiper;t&&t.setTransition(e)},beforeDestroy:function(){var e=this.thumbs.swiper;e&&this.thumbs.swiperCreated&&e&&e.destroy()}}}];return void 0===L.use&&(L.use=L.Class.use,L.installModule=L.Class.installModule),L.use(he),L}),function(l,p,m,g){"use strict";var e,s,r,n,u,t,d,h,c,i,a,o,f,v;function b(e,t){var a,i,s,n=[],r=0;e&&e.isDefaultPrevented()||(e.preventDefault(),t=t||{},e&&e.data&&(t=c(e.data.options,t)),a=t.$target||m(e.currentTarget).trigger("blur"),(s=m.fancybox.getInstance())&&s.$trigger&&s.$trigger.is(a)||(n=t.selector?m(t.selector):(i=a.attr("data-fancybox")||"")?(n=e.data?e.data.items:[]).length?n.filter('[data-fancybox="'+i+'"]'):m('[data-fancybox="'+i+'"]'):[a],(r=m(n).index(a))<0&&(r=0),(s=m.fancybox.open(n,t,r)).$trigger=a))}l.console=l.console||{info:function(e){}},m&&(m.fn.fancybox?console.info("fancyBox already initialized"):(e={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:m.noop,beforeLoad:m.noop,afterLoad:m.noop,beforeShow:m.noop,afterShow:m.noop,beforeClose:m.noop,afterClose:m.noop,onActivate:m.noop,onDeactivate:m.noop,clickContent:function(e,t){return"image"===e.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(e,t){return"image"===e.type&&"toggleControls"},clickSlide:function(e,t){return"image"===e.type?"toggleControls":"close"},dblclickContent:function(e,t){return"image"===e.type&&"zoom"},dblclickSlide:function(e,t){return"image"===e.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schliessen",NEXT:"Weiter",PREV:"Zurück",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es später nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Maßstab"}}},s=m(l),r=m(p),n=0,u=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(e){return l.setTimeout(e,1e3/60)},t=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(e){l.clearTimeout(e)},d=function(){var e,t=p.createElement("fakeelement"),a={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(e in a)if(t.style[e]!==g)return a[e];return"transitionend"}(),h=function(e){return e&&e.length&&e[0].offsetHeight},c=function(e,t){var a=m.extend(!0,{},e,t);return m.each(t,function(e,t){m.isArray(t)&&(a[e]=t)}),a},i=function(e,t,a){var i=this;i.opts=c({index:a},m.fancybox.defaults),m.isPlainObject(t)&&(i.opts=c(i.opts,t)),m.fancybox.isMobile&&(i.opts=c(i.opts,i.opts.mobile)),i.id=i.opts.id||++n,i.currIndex=parseInt(i.opts.index,10)||0,i.prevIndex=null,i.prevPos=null,i.currPos=0,i.firstRun=!0,i.group=[],i.slides={},i.addContent(e),i.group.length&&i.init()},m.extend(i.prototype,{init:function(){var t,a,i=this,s=i.group[i.currIndex].opts;s.closeExisting&&m.fancybox.close(!0),m("body").addClass("fancybox-active"),!m.fancybox.getInstance()&&!1!==s.hideScrollbar&&!m.fancybox.isMobile&&p.body.scrollHeight>l.innerHeight&&(m("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-p.documentElement.clientWidth)+"px;}</style>"),m("body").addClass("compensate-for-scrollbar")),a="",m.each(s.buttons,function(e,t){a+=s.btnTpl[t]||""}),t=m(i.translate(i,s.baseTpl.replace("{{buttons}}",a).replace("{{arrows}}",s.btnTpl.arrowLeft+s.btnTpl.arrowRight))).attr("id","fancybox-container-"+i.id).addClass(s.baseClass).data("FancyBox",i).appendTo(s.parentEl),i.$refs={container:t},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(e){i.$refs[e]=t.find(".fancybox-"+e)}),i.trigger("onInit"),i.activate(),i.jumpTo(i.currIndex)},translate:function(e,t){var i=e.opts.i18n[e.opts.lang]||e.opts.i18n.en;return t.replace(/\{\{(\w+)\}\}/g,function(e,t){var a=i[t];return a===g?e:a})},addContent:function(e){var t,d=this,a=m.makeArray(e);m.each(a,function(e,t){var a,i,s,n,r,o={},l={};m.isPlainObject(t)?l=(o=t).opts||t:"object"===m.type(t)&&m(t).length?(l=(a=m(t)).data()||{},(l=m.extend(!0,{},l,l.options)).$orig=a,o.src=d.opts.src||l.src||a.attr("href"),o.type||o.src||(o.type="inline",o.src=t)):o={type:"html",src:t+""},o.opts=m.extend(!0,{},d.opts,l),m.isArray(l.buttons)&&(o.opts.buttons=l.buttons),m.fancybox.isMobile&&o.opts.mobile&&(o.opts=c(o.opts,o.opts.mobile)),i=o.type||o.opts.type,n=o.src||"",!i&&n&&((s=n.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(i="video",o.opts.video.format||(o.opts.video.format="video/"+("ogv"===s[1]?"ogg":s[1]))):n.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?i="image":n.match(/\.(pdf)((\?|#).*)?$/i)?(i="iframe",o=m.extend(!0,o,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===n.charAt(0)&&(i="inline")),i?o.type=i:d.trigger("objectNeedsType",o),o.contentType||(o.contentType=-1<m.inArray(o.type,["html","inline","ajax"])?"html":o.type),o.index=d.group.length,"auto"==o.opts.smallBtn&&(o.opts.smallBtn=-1<m.inArray(o.type,["html","inline","ajax"])),"auto"===o.opts.toolbar&&(o.opts.toolbar=!o.opts.smallBtn),o.$thumb=o.opts.$thumb||null,o.opts.$trigger&&o.index===d.opts.index&&(o.$thumb=o.opts.$trigger.find("img:first"),o.$thumb.length&&(o.opts.$orig=o.opts.$trigger)),o.$thumb&&o.$thumb.length||!o.opts.$orig||(o.$thumb=o.opts.$orig.find("img:first")),o.$thumb&&!o.$thumb.length&&(o.$thumb=null),o.thumb=o.opts.thumb||(o.$thumb?o.$thumb[0].src:null),"function"===m.type(o.opts.caption)&&(o.opts.caption=o.opts.caption.apply(t,[d,o])),"function"===m.type(d.opts.caption)&&(o.opts.caption=d.opts.caption.apply(t,[d,o])),o.opts.caption instanceof m||(o.opts.caption=o.opts.caption===g?"":o.opts.caption+""),"ajax"===o.type&&1<(r=n.split(/\s+/,2)).length&&(o.src=r.shift(),o.opts.filter=r.shift()),o.opts.modal&&(o.opts=m.extend(!0,o.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),d.group.push(o)}),Object.keys(d.slides).length&&(d.updateControls(),(t=d.Thumbs)&&t.isActive&&(t.create(),t.focus()))},addEvents:function(){var i=this;i.removeEvents(),i.$refs.container.on("click.fb-close","[data-fancybox-close]",function(e){e.stopPropagation(),e.preventDefault(),i.close(e)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(e){e.stopPropagation(),e.preventDefault(),i.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(e){e.stopPropagation(),e.preventDefault(),i.next()}).on("click.fb","[data-fancybox-zoom]",function(e){i[i.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(e){e&&e.originalEvent&&"resize"===e.originalEvent.type?(i.requestId&&t(i.requestId),i.requestId=u(function(){i.update(e)})):(i.current&&"iframe"===i.current.type&&i.$refs.stage.hide(),setTimeout(function(){i.$refs.stage.show(),i.update(e)},m.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(e){var t=(m.fancybox?m.fancybox.getInstance():null).current,a=e.keyCode||e.which;if(9!=a){if(!(!t.opts.keyboard||e.ctrlKey||e.altKey||e.shiftKey||m(e.target).is("input")||m(e.target).is("textarea")))return 8===a||27===a?(e.preventDefault(),void i.close(e)):37===a||38===a?(e.preventDefault(),void i.previous()):39===a||40===a?(e.preventDefault(),void i.next()):void i.trigger("afterKeydown",e,a)}else t.opts.trapFocus&&i.focus(e)}),i.group[i.currIndex].opts.idleTime&&(i.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(e){i.idleSecondsCounter=0,i.isIdle&&i.showControls(),i.isIdle=!1}),i.idleInterval=l.setInterval(function(){i.idleSecondsCounter++,i.idleSecondsCounter>=i.group[i.currIndex].opts.idleTime&&!i.isDragging&&(i.isIdle=!0,i.idleSecondsCounter=0,i.hideControls())},1e3))},removeEvents:function(){s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(e){return this.jumpTo(this.currPos-1,e)},next:function(e){return this.jumpTo(this.currPos+1,e)},jumpTo:function(e,i){var t,a,s,n,r,o,l,d,c,p=this,u=p.group.length;if(!(p.isDragging||p.isClosing||p.isAnimating&&p.firstRun)){if(e=parseInt(e,10),!(s=p.current?p.current.opts.loop:p.opts.loop)&&(e<0||u<=e))return!1;if(t=p.firstRun=!Object.keys(p.slides).length,r=p.current,p.prevIndex=p.currIndex,p.prevPos=p.currPos,n=p.createSlide(e),1<u&&((s||n.index<u-1)&&p.createSlide(e+1),(s||0<n.index)&&p.createSlide(e-1)),p.current=n,p.currIndex=n.index,p.currPos=n.pos,p.trigger("beforeShow",t),p.updateControls(),n.forcedDuration=g,m.isNumeric(i)?n.forcedDuration=i:i=n.opts[t?"animationDuration":"transitionDuration"],i=parseInt(i,10),a=p.isMoved(n),n.$slide.addClass("fancybox-slide--current"),t)return n.opts.animationEffect&&i&&p.$refs.container.css("transition-duration",i+"ms"),p.$refs.container.addClass("fancybox-is-open").trigger("focus"),p.loadSlide(n),void p.preload("image");o=m.fancybox.getTranslate(r.$slide),l=m.fancybox.getTranslate(p.$refs.stage),m.each(p.slides,function(e,t){m.fancybox.stop(t.$slide,!0)}),r.pos!==n.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),a?(c=o.left-(r.pos*o.width+r.pos*r.opts.gutter),m.each(p.slides,function(e,t){t.$slide.removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var a=t.pos*o.width+t.pos*t.opts.gutter;m.fancybox.setTranslate(t.$slide,{top:0,left:a-l.left+c}),t.pos!==n.pos&&t.$slide.addClass("fancybox-slide--"+(t.pos>n.pos?"next":"previous")),h(t.$slide),m.fancybox.animate(t.$slide,{top:0,left:(t.pos-n.pos)*o.width+(t.pos-n.pos)*t.opts.gutter},i,function(){t.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),t.pos===p.currPos&&p.complete()})})):i&&n.opts.transitionEffect&&(d="fancybox-animated fancybox-fx-"+n.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>n.pos?"next":"previous")),m.fancybox.animate(r.$slide,d,i,function(){r.$slide.removeClass(d).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),n.isLoaded?p.revealContent(n):p.loadSlide(n),p.preload("image")}},createSlide:function(e){var t,a=this,i=e%a.group.length;return i=i<0?a.group.length+i:i,!a.slides[e]&&a.group[i]&&(t=m('<div class="fancybox-slide"></div>').appendTo(a.$refs.stage),a.slides[e]=m.extend(!0,{},a.group[i],{pos:e,$slide:t,isLoaded:!1}),a.updateSlide(a.slides[e])),a.slides[e]},scaleToActual:function(e,t,a){var i,s,n,r,o,l=this,d=l.current,c=d.$content,p=m.fancybox.getTranslate(d.$slide).width,u=m.fancybox.getTranslate(d.$slide).height,h=d.width,f=d.height;l.isAnimating||l.isMoved()||!c||"image"!=d.type||!d.isLoaded||d.hasError||(l.isAnimating=!0,m.fancybox.stop(c),e=e===g?.5*p:e,t=t===g?.5*u:t,(i=m.fancybox.getTranslate(c)).top-=m.fancybox.getTranslate(d.$slide).top,i.left-=m.fancybox.getTranslate(d.$slide).left,r=h/i.width,o=f/i.height,s=.5*p-.5*h,n=.5*u-.5*f,p<h&&(0<(s=i.left*r-(e*r-e))&&(s=0),s<p-h&&(s=p-h)),u<f&&(0<(n=i.top*o-(t*o-t))&&(n=0),n<u-f&&(n=u-f)),l.updateCursor(h,f),m.fancybox.animate(c,{top:n,left:s,scaleX:r,scaleY:o},a||330,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(e){var t,a=this,i=a.current,s=i.$content;a.isAnimating||a.isMoved()||!s||"image"!=i.type||!i.isLoaded||i.hasError||(a.isAnimating=!0,m.fancybox.stop(s),t=a.getFitPos(i),a.updateCursor(t.width,t.height),m.fancybox.animate(s,{top:t.top,left:t.left,scaleX:t.width/s.width(),scaleY:t.height/s.height()},e||330,function(){a.isAnimating=!1}))},getFitPos:function(e){var t,a,i,s,n=e.$content,r=e.$slide,o=e.width||e.opts.width,l=e.height||e.opts.height,d={};return!!(e.isLoaded&&n&&n.length)&&(t=m.fancybox.getTranslate(this.$refs.stage).width,a=m.fancybox.getTranslate(this.$refs.stage).height,t-=parseFloat(r.css("paddingLeft"))+parseFloat(r.css("paddingRight"))+parseFloat(n.css("marginLeft"))+parseFloat(n.css("marginRight")),a-=parseFloat(r.css("paddingTop"))+parseFloat(r.css("paddingBottom"))+parseFloat(n.css("marginTop"))+parseFloat(n.css("marginBottom")),o&&l||(o=t,l=a),t-.5<(o*=i=Math.min(1,t/o,a/l))&&(o=t),a-.5<(l*=i)&&(l=a),"image"===e.type?(d.top=Math.floor(.5*(a-l))+parseFloat(r.css("paddingTop")),d.left=Math.floor(.5*(t-o))+parseFloat(r.css("paddingLeft"))):"video"===e.contentType&&(o/(s=e.opts.width&&e.opts.height?o/l:e.opts.ratio||16/9)<l?l=o/s:l*s<o&&(o=l*s)),d.width=o,d.height=l,d)},update:function(a){var i=this;m.each(i.slides,function(e,t){i.updateSlide(t,a)})},updateSlide:function(e,t){var a=this,i=e&&e.$content,s=e.width||e.opts.width,n=e.height||e.opts.height,r=e.$slide;a.adjustCaption(e),i&&(s||n||"video"===e.contentType)&&!e.hasError&&(m.fancybox.stop(i),m.fancybox.setTranslate(i,a.getFitPos(e)),e.pos===a.currPos&&(a.isAnimating=!1,a.updateCursor())),a.adjustLayout(e),r.length&&(r.trigger("refresh"),e.pos===a.currPos&&a.$refs.toolbar.add(a.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),a.trigger("onUpdate",e,t)},centerSlide:function(e){var t=this,a=t.current,i=a.$slide;!t.isClosing&&a&&(i.siblings().css({transform:"",opacity:""}),i.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),m.fancybox.animate(i,{top:0,left:0,opacity:1},e===g?0:e,function(){i.css({transform:"",opacity:""}),a.isComplete||t.complete()},!1))},isMoved:function(e){var t,a,i=e||this.current;return!!i&&(a=m.fancybox.getTranslate(this.$refs.stage),t=m.fancybox.getTranslate(i.$slide),!i.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(t.top-a.top)||.5<Math.abs(t.left-a.left)))},updateCursor:function(e,t){var a,i,s=this,n=s.current,r=s.$refs.container;n&&!s.isClosing&&s.Guestures&&(r.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),i=!!(a=s.canPan(e,t))||s.isZoomable(),r.toggleClass("fancybox-is-zoomable",i),m("[data-fancybox-zoom]").prop("disabled",!i),a?r.addClass("fancybox-can-pan"):i&&("zoom"===n.opts.clickContent||m.isFunction(n.opts.clickContent)&&"zoom"==n.opts.clickContent(n))?r.addClass("fancybox-can-zoomIn"):n.opts.touch&&(n.opts.touch.vertical||1<s.group.length)&&"video"!==n.contentType&&r.addClass("fancybox-can-swipe"))},isZoomable:function(){var e,t=this.current;if(t&&!this.isClosing&&"image"===t.type&&!t.hasError){if(!t.isLoaded)return!0;if((e=this.getFitPos(t))&&(t.width>e.width||t.height>e.height))return!0}return!1},isScaledDown:function(e,t){var a=!1,i=this.current,s=i.$content;return e!==g&&t!==g?a=e<i.width&&t<i.height:s&&(a=(a=m.fancybox.getTranslate(s)).width<i.width&&a.height<i.height),a},canPan:function(e,t){var a=this.current,i=null,s=!1;return"image"===a.type&&(a.isComplete||e&&t)&&!a.hasError&&(s=this.getFitPos(a),e!==g&&t!==g?i={width:e,height:t}:a.isComplete&&(i=m.fancybox.getTranslate(a.$content)),i&&s&&(s=1.5<Math.abs(i.width-s.width)||1.5<Math.abs(i.height-s.height))),s},loadSlide:function(a){var e,t,i,s=this;if(!a.isLoading&&!a.isLoaded){if(!(a.isLoading=!0)===s.trigger("beforeLoad",a))return a.isLoading=!1;switch(e=a.type,(t=a.$slide).off("refresh").trigger("onReset").addClass(a.opts.slideClass),e){case"image":s.setImage(a);break;case"iframe":s.setIframe(a);break;case"html":s.setContent(a,a.src||a.content);break;case"video":s.setContent(a,a.opts.video.tpl.replace(/\{\{src\}\}/gi,a.src).replace("{{format}}",a.opts.videoFormat||a.opts.video.format||"").replace("{{poster}}",a.thumb||""));break;case"inline":m(a.src).length?s.setContent(a,m(a.src)):s.setError(a);break;case"ajax":s.showLoading(a),i=m.ajax(m.extend({},a.opts.ajax.settings,{url:a.src,success:function(e,t){"success"===t&&s.setContent(a,e)},error:function(e,t){e&&"abort"!==t&&s.setError(a)}})),t.one("onReset",function(){i.abort()});break;default:s.setError(a)}return!0}},setImage:function(t){var e,a=this;setTimeout(function(){var e=t.$image;a.isClosing||!t.isLoading||e&&e.length&&e[0].complete||t.hasError||a.showLoading(t)},50),a.checkSrcset(t),t.$content=m('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(t.$slide.addClass("fancybox-slide--image")),!1!==t.opts.preload&&t.opts.width&&t.opts.height&&t.thumb&&(t.width=t.opts.width,t.height=t.opts.height,(e=p.createElement("img")).onerror=function(){m(this).remove(),t.$ghost=null},e.onload=function(){a.afterLoad(t)},t.$ghost=m(e).addClass("fancybox-image").appendTo(t.$content).attr("src",t.thumb)),a.setBigImage(t)},checkSrcset:function(e){var t,a,i,s,n=e.opts.srcset||e.opts.image.srcset;if(n){i=l.devicePixelRatio||1,s=l.innerWidth*i,(a=n.split(",").map(function(e){var i={};return e.trim().split(/\s+/).forEach(function(e,t){var a=parseInt(e.substring(0,e.length-1),10);if(0===t)return i.url=e;a&&(i.value=a,i.postfix=e[e.length-1])}),i})).sort(function(e,t){return e.value-t.value});for(var r=0;r<a.length;r++){var o=a[r];if("w"===o.postfix&&o.value>=s||"x"===o.postfix&&o.value>=i){t=o;break}}!t&&a.length&&(t=a[a.length-1]),t&&(e.src=t.url,e.width&&e.height&&"w"==t.postfix&&(e.height=e.width/e.height*t.value,e.width=t.value),e.opts.srcset=n)}},setBigImage:function(t){var a=this,e=p.createElement("img"),i=m(e);t.$image=i.one("error",function(){a.setError(t)}).one("load",function(){var e;t.$ghost||(a.resolveImageSlideSize(t,this.naturalWidth,this.naturalHeight),a.afterLoad(t)),a.isClosing||(t.opts.srcset&&((e=t.opts.sizes)&&"auto"!==e||(e=(1<t.width/t.height&&1<s.width()/s.height()?"100":Math.round(t.width/t.height*100))+"vw"),i.attr("sizes",e).attr("srcset",t.opts.srcset)),t.$ghost&&setTimeout(function(){t.$ghost&&!a.isClosing&&t.$ghost.hide()},Math.min(300,Math.max(1e3,t.height/1600))),a.hideLoading(t))}).addClass("fancybox-image").attr("src",t.src).appendTo(t.$content),(e.complete||"complete"==e.readyState)&&i.naturalWidth&&i.naturalHeight?i.trigger("load"):e.error&&i.trigger("error")},resolveImageSlideSize:function(e,t,a){var i=parseInt(e.opts.width,10),s=parseInt(e.opts.height,10);e.width=t,e.height=a,0<i&&(e.width=i,e.height=Math.floor(i*a/t)),0<s&&(e.width=Math.floor(s*t/a),e.height=s)},setIframe:function(s){var n,t=this,r=s.opts.iframe,o=s.$slide;m.fancybox.isMobile&&(r.css.overflow="scroll"),s.$content=m('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(o),o.addClass("fancybox-slide--"+s.contentType),s.$iframe=n=m(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(s.$content),r.preload?(t.showLoading(s),n.on("load.fb error.fb",function(e){this.isReady=1,s.$slide.trigger("refresh"),t.afterLoad(s)}),o.on("refresh.fb",function(){var e,t=s.$content,a=r.css.width,i=r.css.height;if(1===n[0].isReady){try{e=n.contents().find("body")}catch(e){}e&&e.length&&e.children().length&&(o.css("overflow","visible"),t.css({width:"100%","max-width":"100%",height:"9999px"}),a===g&&(a=Math.ceil(Math.max(e[0].clientWidth,e.outerWidth(!0)))),t.css("width",a||"").css("max-width",""),i===g&&(i=Math.ceil(Math.max(e[0].clientHeight,e.outerHeight(!0)))),t.css("height",i||""),o.css("overflow","auto")),t.removeClass("fancybox-is-hidden")}})):t.afterLoad(s),n.attr("src",s.src),o.one("onReset",function(){try{m(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(e){}m(this).off("refresh.fb").empty(),s.isLoaded=!1,s.isRevealed=!1})},setContent:function(e,t){var a;this.isClosing||(this.hideLoading(e),e.$content&&m.fancybox.stop(e.$content),e.$slide.empty(),(a=t)&&a.hasOwnProperty&&a instanceof m&&t.parent().length?((t.hasClass("fancybox-content")||t.parent().hasClass("fancybox-content"))&&t.parents(".fancybox-slide").trigger("onReset"),e.$placeholder=m("<div>").hide().insertAfter(t),t.css("display","inline-block")):e.hasError||("string"===m.type(t)&&(t=m("<div>").append(m.trim(t)).contents()),e.opts.filter&&(t=m("<div>").html(t).find(e.opts.filter))),e.$slide.one("onReset",function(){m(this).find("video,audio").trigger("pause"),e.$placeholder&&(e.$placeholder.after(t.removeClass("fancybox-content").hide()).remove(),e.$placeholder=null),e.$smallBtn&&(e.$smallBtn.remove(),e.$smallBtn=null),e.hasError||(m(this).empty(),e.isLoaded=!1,e.isRevealed=!1)}),m(t).appendTo(e.$slide),m(t).is("video,audio")&&(m(t).addClass("fancybox-video"),m(t).wrap("<div></div>"),e.contentType="video",e.opts.width=e.opts.width||m(t).attr("width"),e.opts.height=e.opts.height||m(t).attr("height")),e.$content=e.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),e.$content.siblings().hide(),e.$content.length||(e.$content=e.$slide.wrapInner("<div></div>").children().first()),e.$content.addClass("fancybox-content"),e.$slide.addClass("fancybox-slide--"+e.contentType),this.afterLoad(e))},setError:function(e){e.hasError=!0,e.$slide.trigger("onReset").removeClass("fancybox-slide--"+e.contentType).addClass("fancybox-slide--error"),e.contentType="html",this.setContent(e,this.translate(e,e.opts.errorTpl)),e.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(e){(e=e||this.current)&&!e.$spinner&&(e.$spinner=m(this.translate(this,this.opts.spinnerTpl)).appendTo(e.$slide).hide().fadeIn("fast"))},hideLoading:function(e){(e=e||this.current)&&e.$spinner&&(e.$spinner.stop().remove(),delete e.$spinner)},afterLoad:function(e){var t=this;t.isClosing||(e.isLoading=!1,e.isLoaded=!0,t.trigger("afterLoad",e),t.hideLoading(e),!e.opts.smallBtn||e.$smallBtn&&e.$smallBtn.length||(e.$smallBtn=m(t.translate(e,e.opts.btnTpl.smallBtn)).appendTo(e.$content)),e.opts.protect&&e.$content&&!e.hasError&&(e.$content.on("contextmenu.fb",function(e){return 2==e.button&&e.preventDefault(),!0}),"image"===e.type&&m('<div class="fancybox-spaceball"></div>').appendTo(e.$content)),t.adjustCaption(e),t.adjustLayout(e),e.pos===t.currPos&&t.updateCursor(),t.revealContent(e))},adjustCaption:function(e){var t=this,a=e||t.current,i=a.opts.caption,s=t.$refs.caption,n=!1;a.opts.preventCaptionOverlap&&i&&i.length&&(a.pos!==t.currPos?((s=s.clone().empty().appendTo(s.parent())).html(i),n=s.outerHeight(!0),s.empty().remove()):t.$caption&&(n=t.$caption.outerHeight(!0)),a.$slide.css("padding-bottom",n||""))},adjustLayout:function(e){var t,a,i,s,n=e||this.current;n.isLoaded&&!0!==n.opts.disableLayoutFix&&(n.$content.css("margin-bottom",""),n.$content.outerHeight()>n.$slide.height()+.5&&(i=n.$slide[0].style["padding-bottom"],s=n.$slide.css("padding-bottom"),0<parseFloat(s)&&(t=n.$slide[0].scrollHeight,n.$slide.css("padding-bottom",0),Math.abs(t-n.$slide[0].scrollHeight)<1&&(a=s),n.$slide.css("padding-bottom",i))),n.$content.css("margin-bottom",a))},revealContent:function(e){var t,a,i,s,n=this,r=e.$slide,o=!1,l=!1,d=n.isMoved(e),c=e.isRevealed;return e.isRevealed=!0,t=e.opts[n.firstRun?"animationEffect":"transitionEffect"],i=e.opts[n.firstRun?"animationDuration":"transitionDuration"],i=parseInt(e.forcedDuration===g?i:e.forcedDuration,10),!d&&e.pos===n.currPos&&i||(t=!1),"zoom"===t&&(e.pos===n.currPos&&i&&"image"===e.type&&!e.hasError&&(l=n.getThumbPos(e))?o=n.getFitPos(e):t="fade"),"zoom"===t?(n.isAnimating=!0,o.scaleX=o.width/l.width,o.scaleY=o.height/l.height,"auto"==(s=e.opts.zoomOpacity)&&(s=.1<Math.abs(e.width/e.height-l.width/l.height)),s&&(l.opacity=.1,o.opacity=1),m.fancybox.setTranslate(e.$content.removeClass("fancybox-is-hidden"),l),h(e.$content),void m.fancybox.animate(e.$content,o,i,function(){n.isAnimating=!1,n.complete()})):(n.updateSlide(e),t?(m.fancybox.stop(r),a="fancybox-slide--"+(e.pos>=n.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+t,r.addClass(a).removeClass("fancybox-slide--current"),e.$content.removeClass("fancybox-is-hidden"),h(r),"image"!==e.type&&e.$content.hide().show(0),void m.fancybox.animate(r,"fancybox-slide--current",i,function(){r.removeClass(a).css({transform:"",opacity:""}),e.pos===n.currPos&&n.complete()},!0)):(e.$content.removeClass("fancybox-is-hidden"),c||!d||"image"!==e.type||e.hasError||e.$content.hide().fadeIn("fast"),void(e.pos===n.currPos&&n.complete())))},getThumbPos:function(e){var t,a,i,s,n,r,o,l,d,c=e.$thumb;return!!(c&&(o=c[0])&&o.ownerDocument===p&&(m(".fancybox-container").css("pointer-events","none"),l={x:o.getBoundingClientRect().left+o.offsetWidth/2,y:o.getBoundingClientRect().top+o.offsetHeight/2},d=p.elementFromPoint(l.x,l.y)===o,m(".fancybox-container").css("pointer-events",""),d))&&(a=m.fancybox.getTranslate(c),i=parseFloat(c.css("border-top-width")||0),s=parseFloat(c.css("border-right-width")||0),n=parseFloat(c.css("border-bottom-width")||0),r=parseFloat(c.css("border-left-width")||0),t={top:a.top+i,left:a.left+r,width:a.width-s-r,height:a.height-i-n,scaleX:1,scaleY:1},0<a.width&&0<a.height&&t)},complete:function(){var e,a=this,t=a.current,i={};!a.isMoved()&&t.isLoaded&&(t.isComplete||(t.isComplete=!0,t.$slide.siblings().trigger("onReset"),a.preload("inline"),h(t.$slide),t.$slide.addClass("fancybox-slide--complete"),m.each(a.slides,function(e,t){t.pos>=a.currPos-1&&t.pos<=a.currPos+1?i[t.pos]=t:t&&(m.fancybox.stop(t.$slide),t.$slide.off().remove())}),a.slides=i),a.isAnimating=!1,a.updateCursor(),a.trigger("afterShow"),t.opts.video.autoStart&&t.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){this.webkitExitFullscreen&&this.webkitExitFullscreen(),a.next()}),t.opts.autoFocus&&"html"===t.contentType&&((e=t.$content.find("input[autofocus]:enabled:visible:first")).length?e.trigger("focus"):a.focus(null,!0)),t.$slide.scrollTop(0).scrollLeft(0))},preload:function(e){var t,a,i=this;i.group.length<2||(a=i.slides[i.currPos+1],(t=i.slides[i.currPos-1])&&t.type===e&&i.loadSlide(t),a&&a.type===e&&i.loadSlide(a))},focus:function(e,t){var a,i,s=this,n=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");s.isClosing||((a=(a=!e&&s.current&&s.current.isComplete?s.current.$slide.find("*:visible"+(t?":not(.fancybox-close-small)":"")):s.$refs.container.find("*:visible")).filter(n).filter(function(){return"hidden"!==m(this).css("visibility")&&!m(this).hasClass("disabled")})).length?(i=a.index(p.activeElement),e&&e.shiftKey?(i<0||0==i)&&(e.preventDefault(),a.eq(a.length-1).trigger("focus")):(i<0||i==a.length-1)&&(e&&e.preventDefault(),a.eq(0).trigger("focus"))):s.$refs.container.trigger("focus"))},activate:function(){var t=this;m(".fancybox-container").each(function(){var e=m(this).data("FancyBox");e&&e.id!==t.id&&!e.isClosing&&(e.trigger("onDeactivate"),e.removeEvents(),e.isVisible=!1)}),t.isVisible=!0,(t.current||t.isIdle)&&(t.update(),t.updateControls()),t.trigger("onActivate"),t.addEvents()},close:function(e,t){function a(){c.cleanUp(e)}var i,s,n,r,o,l,d,c=this,p=c.current;return!c.isClosing&&(!(c.isClosing=!0)===c.trigger("beforeClose",e)?(c.isClosing=!1,u(function(){c.update()}),!1):(c.removeEvents(),n=p.$content,i=p.opts.animationEffect,s=m.isNumeric(t)?t:i?p.opts.animationDuration:0,p.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==e?m.fancybox.stop(p.$slide):i=!1,p.$slide.siblings().trigger("onReset").remove(),s&&c.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",s+"ms"),c.hideLoading(p),c.hideControls(!0),c.updateCursor(),"zoom"!==i||n&&s&&"image"===p.type&&!c.isMoved()&&!p.hasError&&(d=c.getThumbPos(p))||(i="fade"),"zoom"===i?(m.fancybox.stop(n),l={top:(r=m.fancybox.getTranslate(n)).top,left:r.left,scaleX:r.width/d.width,scaleY:r.height/d.height,width:d.width,height:d.height},"auto"==(o=p.opts.zoomOpacity)&&(o=.1<Math.abs(p.width/p.height-d.width/d.height)),o&&(d.opacity=0),m.fancybox.setTranslate(n,l),h(n),m.fancybox.animate(n,d,s,a)):i&&s?m.fancybox.animate(p.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+i,s,a):!0===e?setTimeout(a,s):a(),!0))},cleanUp:function(e){var t,a,i,s=this,n=s.current.opts.$orig;s.current.$slide.trigger("onReset"),s.$refs.container.empty().remove(),s.trigger("afterClose",e),s.current.opts.backFocus&&(n&&n.length&&n.is(":visible")||(n=s.$trigger),n&&n.length&&(a=l.scrollX,i=l.scrollY,n.trigger("focus"),m("html, body").scrollTop(i).scrollLeft(a))),s.current=null,(t=m.fancybox.getInstance())?t.activate():(m("body").removeClass("fancybox-active compensate-for-scrollbar"),m("#fancybox-style-noscroll").remove())},trigger:function(e,t){var a,i=Array.prototype.slice.call(arguments,1),s=this,n=t&&t.opts?t:s.current;if(n?i.unshift(n):n=s,i.unshift(s),m.isFunction(n.opts[e])&&(a=n.opts[e].apply(n,i)),!1===a)return a;"afterClose"!==e&&s.$refs?s.$refs.container.trigger(e+".fb",i):r.trigger(e+".fb",i)},updateControls:function(){var e=this,t=e.current,a=t.index,i=e.$refs.container,s=e.$refs.caption,n=t.opts.caption;t.$slide.trigger("refresh"),e.$caption=n&&n.length?s.html(n):null,e.hasHiddenControls||e.isIdle||e.showControls(),i.find("[data-fancybox-count]").html(e.group.length),i.find("[data-fancybox-index]").html(a+1),i.find("[data-fancybox-prev]").prop("disabled",!t.opts.loop&&a<=0),i.find("[data-fancybox-next]").prop("disabled",!t.opts.loop&&a>=e.group.length-1),"image"===t.type?i.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",t.opts.image.src||t.src).show():t.opts.toolbar&&i.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),m(p.activeElement).is(":hidden,[disabled]")&&e.$refs.container.trigger("focus")},hideControls:function(e){var t=["infobar","toolbar","nav"];!e&&this.current.opts.preventCaptionOverlap||t.push("caption"),this.$refs.container.removeClass(t.map(function(e){return"fancybox-show-"+e}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var e=this,t=e.current?e.current.opts:e.opts,a=e.$refs.container;e.hasHiddenControls=!1,e.idleSecondsCounter=0,a.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<e.group.length)).toggleClass("fancybox-show-caption",!!e.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<e.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),m.fancybox={version:"3.5.2",defaults:e,getInstance:function(e){var t=m('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),a=Array.prototype.slice.call(arguments,1);return t instanceof i&&("string"===m.type(e)?t[e].apply(t,a):"function"===m.type(e)&&e.apply(t,a),t)},open:function(e,t,a){return new i(e,t,a)},close:function(e){var t=this.getInstance();t&&(t.close(),!0===e&&this.close(e))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(a=p.createElement("div"),l.getComputedStyle&&l.getComputedStyle(a)&&l.getComputedStyle(a).getPropertyValue("transform")&&!(p.documentMode&&p.documentMode<11)),getTranslate:function(e){var t;return!(!e||!e.length)&&{top:(t=e[0].getBoundingClientRect()).top||0,left:t.left||0,width:t.width,height:t.height,opacity:parseFloat(e.css("opacity"))}},setTranslate:function(e,t){var a="",i={};if(e&&t)return t.left===g&&t.top===g||(a=(t.left===g?e.position().left:t.left)+"px, "+(t.top===g?e.position().top:t.top)+"px",a=this.use3d?"translate3d("+a+", 0px)":"translate("+a+")"),t.scaleX!==g&&t.scaleY!==g?a+=" scale("+t.scaleX+", "+t.scaleY+")":t.scaleX!==g&&(a+=" scaleX("+t.scaleX+")"),a.length&&(i.transform=a),t.opacity!==g&&(i.opacity=t.opacity),t.width!==g&&(i.width=t.width),t.height!==g&&(i.height=t.height),e.css(i)},animate:function(t,a,i,s,n){var r,o=this;m.isFunction(i)&&(s=i,i=null),o.stop(t),r=o.getTranslate(t),t.on(d,function(e){e&&e.originalEvent&&(!t.is(e.originalEvent.target)||"z-index"==e.originalEvent.propertyName)||(o.stop(t),m.isNumeric(i)&&t.css("transition-duration",""),m.isPlainObject(a)?a.scaleX!==g&&a.scaleY!==g&&o.setTranslate(t,{top:a.top,left:a.left,width:r.width*a.scaleX,height:r.height*a.scaleY,scaleX:1,scaleY:1}):!0!==n&&t.removeClass(a),m.isFunction(s)&&s(e))}),m.isNumeric(i)&&t.css("transition-duration",i+"ms"),m.isPlainObject(a)?(a.scaleX!==g&&a.scaleY!==g&&(delete a.width,delete a.height,t.parent().hasClass("fancybox-slide--image")&&t.parent().addClass("fancybox-is-scaling")),m.fancybox.setTranslate(t,a)):t.addClass(a),t.data("timer",setTimeout(function(){t.trigger(d)},i+33))},stop:function(e,t){e&&e.length&&(clearTimeout(e.data("timer")),t&&e.trigger(d),e.off(d).css("transition-duration",""),e.parent().removeClass("fancybox-is-scaling"))}},m.fn.fancybox=function(e){var t;return(t=(e=e||{}).selector||!1)?m("body").off("click.fb-start",t).on("click.fb-start",t,{options:e},b):this.off("click.fb-start").on("click.fb-start",{items:this,options:e},b),this},r.on("click.fb-start","[data-fancybox]",b),r.on("click.fb-start","[data-fancybox-trigger]",function(e){m('[data-fancybox="'+m(this).attr("data-fancybox-trigger")+'"]').eq(m(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:m(this)})}),o=".fancybox-button",f="fancybox-focus",v=null,r.on("mousedown mouseup focus blur",o,function(e){switch(e.type){case"mousedown":v=m(this);break;case"mouseup":v=null;break;case"focusin":m(o).removeClass(f),m(this).is(v)||m(this).is("[disabled]")||m(this).addClass(f);break;case"focusout":m(o).removeClass(f)}})))}(window,document,jQuery),function(h){"use strict";function f(a,e,t){if(a)return t=t||"","object"===h.type(t)&&(t=h.param(t,!0)),h.each(e,function(e,t){a=a.replace("$"+e,t||"")}),t.length&&(a+=(0<a.indexOf("?")?"&":"?")+t),a}var i={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"//www.youtube-nocookie.com/embed/$4",thumb:"//img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/?ll="+(e[9]?e[9]+"&z="+Math.floor(e[10])+(e[12]?e[12].replace(/^\//,"&"):""):e[12]+"").replace(/\?/,"&")+"&output="+(e[12]&&0<e[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(e){return"//maps.google."+e[2]+"/maps?q="+e[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};h(document).on("objectNeedsType.fb",function(e,t,s){var n,r,o,l,d,c,p=s.src||"",u=!1,a=h.extend(!0,{},i,s.opts.media);h.each(a,function(e,t){if(r=p.match(t.matcher)){if(u=t.type,c=e,d={},t.paramPlace&&r[t.paramPlace]){"?"==(l=r[t.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var a=0;a<l.length;++a){var i=l[a].split("=",2);2==i.length&&(d[i[0]]=decodeURIComponent(i[1].replace(/\+/g," ")))}}return o=h.extend(!0,{},t.params,s.opts[e],d),p="function"===h.type(t.url)?t.url.call(this,r,o,s):f(t.url,r,o),n="function"===h.type(t.thumb)?t.thumb.call(this,r,o,s):f(t.thumb,r),"youtube"===e?p=p.replace(/&t=((\d+)m)?(\d+)s/,function(e,t,a,i){return"&start="+((a?60*parseInt(a,10):0)+parseInt(i,10))}):"vimeo"===e&&(p=p.replace("&%23","#")),!1}}),u?(s.opts.thumb||s.opts.$thumb&&s.opts.$thumb.length||(s.opts.thumb=n),"iframe"===u&&(s.opts=h.extend(!0,s.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),h.extend(s,{type:u,src:p,origSrc:s.src,contentSource:c,contentType:"image"===u?"image":"gmap_place"==c||"gmap_search"==c?"map":"video"})):p&&(s.type=s.opts.defaultType)});var s={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(e){var t,a=this;this[e].loaded?setTimeout(function(){a.done(e)}):this[e].loading||(this[e].loading=!0,(t=document.createElement("script")).type="text/javascript",t.src=this[e].src,"youtube"===e?window.onYouTubeIframeAPIReady=function(){a[e].loaded=!0,a.done(e)}:t.onload=function(){a[e].loaded=!0,a.done(e)},document.body.appendChild(t))},done:function(e){var t,a;"youtube"===e&&delete window.onYouTubeIframeAPIReady,(t=h.fancybox.getInstance())&&(a=t.current.$content.find("iframe"),"youtube"===e&&void 0!==YT&&YT?new YT.Player(a.attr("id"),{events:{onStateChange:function(e){0==e.data&&t.next()}}}):"vimeo"===e&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(a).on("ended",function(){t.next()}))}};h(document).on({"afterShow.fb":function(e,t,a){1<t.group.length&&("youtube"===a.contentSource||"vimeo"===a.contentSource)&&s.load(a.contentSource)}})}(jQuery),function(m,l,g){"use strict";function c(e){var t=[];for(var a in e=(e=e.originalEvent||e||m.e).touches&&e.touches.length?e.touches:e.changedTouches&&e.changedTouches.length?e.changedTouches:[e])e[a].pageX?t.push({x:e[a].pageX,y:e[a].pageY}):e[a].clientX&&t.push({x:e[a].clientX,y:e[a].clientY});return t}function v(e,t,a){return t&&e?"x"===a?e.x-t.x:"y"===a?e.y-t.y:Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2)):0}function d(e){if(e.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||g.isFunction(e.get(0).onclick)||e.data("selectable"))return 1;for(var t=0,a=e[0].attributes,i=a.length;t<i;t++)if("data-fancybox-"===a[t].nodeName.substr(0,14))return 1}function p(e){for(var t,a,i,s,n,r=!1;t=e.get(0),0,a=m.getComputedStyle(t)["overflow-y"],i=m.getComputedStyle(t)["overflow-x"],s=("scroll"===a||"auto"===a)&&t.scrollHeight>t.clientHeight,n=("scroll"===i||"auto"===i)&&t.scrollWidth>t.clientWidth,!(r=s||n)&&(e=e.parent()).length&&!e.hasClass("fancybox-stage")&&!e.is("body"););return r}function a(e){var t=this;t.instance=e,t.$bg=e.$refs.bg,t.$stage=e.$refs.stage,t.$container=e.$refs.container,t.destroy(),t.$container.on("touchstart.fb.touch mousedown.fb.touch",g.proxy(t,"ontouchstart"))}var b=m.requestAnimationFrame||m.webkitRequestAnimationFrame||m.mozRequestAnimationFrame||m.oRequestAnimationFrame||function(e){return m.setTimeout(e,1e3/60)},y=m.cancelAnimationFrame||m.webkitCancelAnimationFrame||m.mozCancelAnimationFrame||m.oCancelAnimationFrame||function(e){m.clearTimeout(e)};a.prototype.destroy=function(){var e=this;e.$container.off(".fb.touch"),g(l).off(".fb.touch"),e.requestId&&(y(e.requestId),e.requestId=null),e.tapped&&(clearTimeout(e.tapped),e.tapped=null)},a.prototype.ontouchstart=function(e){var t=this,a=g(e.target),i=t.instance,s=i.current,n=s.$slide,r=s.$content,o="touchstart"==e.type;if(o&&t.$container.off("mousedown.fb.touch"),(!e.originalEvent||2!=e.originalEvent.button)&&n.length&&a.length&&!d(a)&&!d(a.parent())&&(a.is("img")||!(e.originalEvent.clientX>a[0].clientWidth+a.offset().left))){if(!s||i.isAnimating||s.$slide.hasClass("fancybox-animated"))return e.stopPropagation(),void e.preventDefault();t.realPoints=t.startPoints=c(e),t.startPoints.length&&(s.touch&&e.stopPropagation(),t.startEvent=e,t.canTap=!0,t.$target=a,t.$content=r,t.opts=s.opts.touch,t.isPanning=!1,t.isSwiping=!1,t.isZooming=!1,t.isScrolling=!1,t.canPan=i.canPan(),t.startTime=(new Date).getTime(),t.distanceX=t.distanceY=t.distance=0,t.canvasWidth=Math.round(n[0].clientWidth),t.canvasHeight=Math.round(n[0].clientHeight),t.contentLastPos=null,t.contentStartPos=g.fancybox.getTranslate(t.$content)||{top:0,left:0},t.sliderStartPos=g.fancybox.getTranslate(n),t.stagePos=g.fancybox.getTranslate(i.$refs.stage),t.sliderStartPos.top-=t.stagePos.top,t.sliderStartPos.left-=t.stagePos.left,t.contentStartPos.top-=t.stagePos.top,t.contentStartPos.left-=t.stagePos.left,g(l).off(".fb.touch").on(o?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",g.proxy(t,"ontouchend")).on(o?"touchmove.fb.touch":"mousemove.fb.touch",g.proxy(t,"ontouchmove")),g.fancybox.isMobile&&l.addEventListener("scroll",t.onscroll,!0),((t.opts||t.canPan)&&(a.is(t.$stage)||t.$stage.find(a).length)||(a.is(".fancybox-image")&&e.preventDefault(),g.fancybox.isMobile&&a.hasClass("fancybox-caption")))&&(t.isScrollable=p(a)||p(a.parent()),g.fancybox.isMobile&&t.isScrollable||e.preventDefault(),1!==t.startPoints.length&&!s.hasError||(t.canPan?(g.fancybox.stop(t.$content),t.isPanning=!0):t.isSwiping=!0,t.$container.addClass("fancybox-is-grabbing")),2===t.startPoints.length&&"image"===s.type&&(s.isLoaded||s.$ghost)&&(t.canTap=!1,t.isSwiping=!1,t.isPanning=!1,t.isZooming=!0,g.fancybox.stop(t.$content),t.centerPointStartX=.5*(t.startPoints[0].x+t.startPoints[1].x)-g(m).scrollLeft(),t.centerPointStartY=.5*(t.startPoints[0].y+t.startPoints[1].y)-g(m).scrollTop(),t.percentageOfImageAtPinchPointX=(t.centerPointStartX-t.contentStartPos.left)/t.contentStartPos.width,t.percentageOfImageAtPinchPointY=(t.centerPointStartY-t.contentStartPos.top)/t.contentStartPos.height,t.startDistanceBetweenFingers=v(t.startPoints[0],t.startPoints[1]))))}},a.prototype.onscroll=function(e){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},a.prototype.ontouchmove=function(e){var t=this;void 0===e.originalEvent.buttons||0!==e.originalEvent.buttons?t.isScrolling?t.canTap=!1:(t.newPoints=c(e),(t.opts||t.canPan)&&t.newPoints.length&&t.newPoints.length&&(t.isSwiping&&!0===t.isSwiping||e.preventDefault(),t.distanceX=v(t.newPoints[0],t.startPoints[0],"x"),t.distanceY=v(t.newPoints[0],t.startPoints[0],"y"),t.distance=v(t.newPoints[0],t.startPoints[0]),0<t.distance&&(t.isSwiping?t.onSwipe(e):t.isPanning?t.onPan():t.isZooming&&t.onZoom()))):t.ontouchend(e)},a.prototype.onSwipe=function(e){var t,s=this,n=s.instance,a=s.isSwiping,i=s.sliderStartPos.left||0;if(!0!==a)"x"==a&&(0<s.distanceX&&(s.instance.group.length<2||0===s.instance.current.index&&!s.instance.current.opts.loop)?i+=Math.pow(s.distanceX,.8):s.distanceX<0&&(s.instance.group.length<2||s.instance.current.index===s.instance.group.length-1&&!s.instance.current.opts.loop)?i-=Math.pow(-s.distanceX,.8):i+=s.distanceX),s.sliderLastPos={top:"x"==a?0:s.sliderStartPos.top+s.distanceY,left:i},s.requestId&&(y(s.requestId),s.requestId=null),s.requestId=b(function(){s.sliderLastPos&&(g.each(s.instance.slides,function(e,t){var a=t.pos-s.instance.currPos;g.fancybox.setTranslate(t.$slide,{top:s.sliderLastPos.top,left:s.sliderLastPos.left+a*s.canvasWidth+a*t.opts.gutter})}),s.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(s.distance)){if(s.canTap=!1,n.group.length<2&&s.opts.vertical?s.isSwiping="y":n.isDragging||!1===s.opts.vertical||"auto"===s.opts.vertical&&800<g(m).width()?s.isSwiping="x":(t=Math.abs(180*Math.atan2(s.distanceY,s.distanceX)/Math.PI),s.isSwiping=45<t&&t<135?"y":"x"),"y"===s.isSwiping&&g.fancybox.isMobile&&s.isScrollable)return void(s.isScrolling=!0);n.isDragging=s.isSwiping,s.startPoints=s.newPoints,g.each(n.slides,function(e,t){var a,i;g.fancybox.stop(t.$slide),a=g.fancybox.getTranslate(t.$slide),i=g.fancybox.getTranslate(n.$refs.stage),t.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(e,t){return(t.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),t.pos===n.current.pos&&(s.sliderStartPos.top=a.top-i.top,s.sliderStartPos.left=a.left-i.left),g.fancybox.setTranslate(t.$slide,{top:a.top-i.top,left:a.left-i.left})}),n.SlideShow&&n.SlideShow.isActive&&n.SlideShow.stop()}},a.prototype.onPan=function(){var e=this;v(e.newPoints[0],e.realPoints[0])<(g.fancybox.isMobile?10:5)?e.startPoints=e.newPoints:(e.canTap=!1,e.contentLastPos=e.limitMovement(),e.requestId&&y(e.requestId),e.requestId=b(function(){g.fancybox.setTranslate(e.$content,e.contentLastPos)}))},a.prototype.limitMovement=function(){var e=this,t=e.canvasWidth,a=e.canvasHeight,i=e.distanceX,s=e.distanceY,n=e.contentStartPos,r=n.left,o=n.top,l=n.width,d=n.height,c=t<l?r+i:r,p=o+s,u=Math.max(0,.5*t-.5*l),h=Math.max(0,.5*a-.5*d),f=Math.min(t-l,.5*t-.5*l),m=Math.min(a-d,.5*a-.5*d);return 0<i&&u<c&&(c=u-1+Math.pow(-u+r+i,.8)||0),i<0&&c<f&&(c=f+1-Math.pow(f-r-i,.8)||0),0<s&&h<p&&(p=h-1+Math.pow(-h+o+s,.8)||0),s<0&&p<m&&(p=m+1-Math.pow(m-o-s,.8)||0),{top:p,left:c}},a.prototype.limitPosition=function(e,t,a,i){var s=this.canvasWidth,n=this.canvasHeight;return e=s<a?(e=0<e?0:e)<s-a?s-a:e:Math.max(0,s/2-a/2),{top:t=n<i?(t=0<t?0:t)<n-i?n-i:t:Math.max(0,n/2-i/2),left:e}},a.prototype.onZoom=function(){var e=this,t=e.contentStartPos,a=t.width,i=t.height,s=t.left,n=t.top,r=v(e.newPoints[0],e.newPoints[1])/e.startDistanceBetweenFingers,o=Math.floor(a*r),l=Math.floor(i*r),d=(a-o)*e.percentageOfImageAtPinchPointX,c=(i-l)*e.percentageOfImageAtPinchPointY,p=(e.newPoints[0].x+e.newPoints[1].x)/2-g(m).scrollLeft(),u=(e.newPoints[0].y+e.newPoints[1].y)/2-g(m).scrollTop(),h=p-e.centerPointStartX,f={top:n+(c+(u-e.centerPointStartY)),left:s+(d+h),scaleX:r,scaleY:r};e.canTap=!1,e.newWidth=o,e.newHeight=l,e.contentLastPos=f,e.requestId&&y(e.requestId),e.requestId=b(function(){g.fancybox.setTranslate(e.$content,e.contentLastPos)})},a.prototype.ontouchend=function(e){var t=this,a=t.isSwiping,i=t.isPanning,s=t.isZooming,n=t.isScrolling;if(t.endPoints=c(e),t.dMs=Math.max((new Date).getTime()-t.startTime,1),t.$container.removeClass("fancybox-is-grabbing"),g(l).off(".fb.touch"),l.removeEventListener("scroll",t.onscroll,!0),t.requestId&&(y(t.requestId),t.requestId=null),t.isSwiping=!1,t.isPanning=!1,t.isZooming=!1,t.isScrolling=!1,t.instance.isDragging=!1,t.canTap)return t.onTap(e);t.speed=100,t.velocityX=t.distanceX/t.dMs*.5,t.velocityY=t.distanceY/t.dMs*.5,i?t.endPanning():s?t.endZooming():t.endSwiping(a,n)},a.prototype.endSwiping=function(e,t){var a=this,i=!1,s=a.instance.group.length,n=Math.abs(a.distanceX),r="x"==e&&1<s&&(130<a.dMs&&10<n||50<n);a.sliderLastPos=null,"y"==e&&!t&&50<Math.abs(a.distanceY)?(g.fancybox.animate(a.instance.current.$slide,{top:a.sliderStartPos.top+a.distanceY+150*a.velocityY,opacity:0},200),i=a.instance.close(!0,250)):r&&0<a.distanceX?i=a.instance.previous(300):r&&a.distanceX<0&&(i=a.instance.next(300)),!1!==i||"x"!=e&&"y"!=e||a.instance.centerSlide(200),a.$container.removeClass("fancybox-is-sliding")},a.prototype.endPanning=function(){var e,t,a,i=this;i.contentLastPos&&(t=!1===i.opts.momentum||350<i.dMs?(e=i.contentLastPos.left,i.contentLastPos.top):(e=i.contentLastPos.left+500*i.velocityX,i.contentLastPos.top+500*i.velocityY),(a=i.limitPosition(e,t,i.contentStartPos.width,i.contentStartPos.height)).width=i.contentStartPos.width,a.height=i.contentStartPos.height,g.fancybox.animate(i.$content,a,330))},a.prototype.endZooming=function(){var e,t,a,i,s=this,n=s.instance.current,r=s.newWidth,o=s.newHeight;s.contentLastPos&&(e=s.contentLastPos.left,i={top:t=s.contentLastPos.top,left:e,width:r,height:o,scaleX:1,scaleY:1},g.fancybox.setTranslate(s.$content,i),r<s.canvasWidth&&o<s.canvasHeight?s.instance.scaleToFit(150):r>n.width||o>n.height?s.instance.scaleToActual(s.centerPointStartX,s.centerPointStartY,150):(a=s.limitPosition(e,t,r,o),g.fancybox.animate(s.$content,a,150)))},a.prototype.onTap=function(a){function e(e){var t=r.opts[e];if(g.isFunction(t)&&(t=t.apply(n,[r,a])),t)switch(t){case"close":n.close(i.startEvent);break;case"toggleControls":n.toggleControls();break;case"next":n.next();break;case"nextOrClose":1<n.group.length?n.next():n.close(i.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(n.canPan()?n.scaleToFit():n.isScaledDown()?n.scaleToActual(l,d):n.group.length<2&&n.close(i.startEvent))}}var t,i=this,s=g(a.target),n=i.instance,r=n.current,o=a&&c(a)||i.startPoints,l=o[0]?o[0].x-g(m).scrollLeft()-i.stagePos.left:0,d=o[0]?o[0].y-g(m).scrollTop()-i.stagePos.top:0;if((!a.originalEvent||2!=a.originalEvent.button)&&(s.is("img")||!(l>s[0].clientWidth+s.offset().left))){if(s.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))t="Outside";else if(s.is(".fancybox-slide"))t="Slide";else{if(!n.current.$content||!n.current.$content.find(s).addBack().filter(s).length)return;t="Content"}if(i.tapped){if(clearTimeout(i.tapped),i.tapped=null,50<Math.abs(l-i.tapX)||50<Math.abs(d-i.tapY))return this;e("dblclick"+t)}else i.tapX=l,i.tapY=d,r.opts["dblclick"+t]&&r.opts["dblclick"+t]!==r.opts["click"+t]?i.tapped=setTimeout(function(){i.tapped=null,n.isAnimating||e("click"+t)},500):e("click"+t);return this}},g(l).on("onActivate.fb",function(e,t){t&&!t.Guestures&&(t.Guestures=new a(t))}).on("beforeClose.fb",function(e,t){t&&t.Guestures&&t.Guestures.destroy()})}(window,document,jQuery),function(r,o){"use strict";o.extend(!0,o.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function a(e){this.instance=e,this.init()}o.extend(a.prototype,{timer:null,isActive:!1,$button:null,init:function(){var e=this,t=e.instance,a=t.group[t.currIndex].opts.slideShow;e.$button=t.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){e.toggle()}),t.group.length<2||!a?e.$button.hide():a.progress&&(e.$progress=o('<div class="fancybox-progress"></div>').appendTo(t.$refs.inner))},set:function(e){var t=this,a=t.instance,i=a.current;i&&(!0===e||i.opts.loop||a.currIndex<a.group.length-1)?t.isActive&&"video"!==i.contentType&&(t.$progress&&o.fancybox.animate(t.$progress.show(),{scaleX:1},i.opts.slideShow.speed),t.timer=setTimeout(function(){a.current.opts.loop||a.current.index!=a.group.length-1?a.next():a.jumpTo(0)},i.opts.slideShow.speed)):(t.stop(),a.idleSecondsCounter=0,a.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var e=this,t=e.instance.current;t&&(e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),e.isActive=!0,t.isComplete&&e.set(!0),e.instance.trigger("onSlideShowChange",!0))},stop:function(){var e=this,t=e.instance.current;e.clear(),e.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),e.isActive=!1,e.instance.trigger("onSlideShowChange",!1),e.$progress&&e.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),o(r).on({"onInit.fb":function(e,t){t&&!t.SlideShow&&(t.SlideShow=new a(t))},"beforeShow.fb":function(e,t,a,i){var s=t&&t.SlideShow;i?s&&a.opts.slideShow.autoStart&&s.start():s&&s.isActive&&s.clear()},"afterShow.fb":function(e,t,a){var i=t&&t.SlideShow;i&&i.isActive&&i.set()},"afterKeydown.fb":function(e,t,a,i,s){var n=t&&t.SlideShow;!n||!a.opts.slideShow||80!==s&&32!==s||o(r.activeElement).is("button,a,input")||(i.preventDefault(),n.toggle())},"beforeClose.fb onDeactivate.fb":function(e,t){var a=t&&t.SlideShow;a&&a.stop()}}),o(r).on("visibilitychange",function(){var e=o.fancybox.getInstance(),t=e&&e.SlideShow;t&&t.isActive&&(r.hidden?t.clear():t.set())})}(document,jQuery),function(n,a){"use strict";var i,s=function(){for(var e=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],t={},a=0;a<e.length;a++){var i=e[a];if(i&&i[1]in n){for(var s=0;s<i.length;s++)t[e[0][s]]=i[s];return t}}return!1}();s&&(i={request:function(e){(e=e||n.documentElement)[s.requestFullscreen](e.ALLOW_KEYBOARD_INPUT)},exit:function(){n[s.exitFullscreen]()},toggle:function(e){e=e||n.documentElement,this.isFullscreen()?this.exit():this.request(e)},isFullscreen:function(){return Boolean(n[s.fullscreenElement])},enabled:function(){return Boolean(n[s.fullscreenEnabled])}},a.extend(!0,a.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),a(n).on(s.fullscreenchange,function(){var e=i.isFullscreen(),t=a.fancybox.getInstance();t&&(t.current&&"image"===t.current.type&&t.isAnimating&&(t.current.$content.css("transition","none"),t.isAnimating=!1,t.update(!0,!0,0)),t.trigger("onFullscreenChange",e),t.$refs.container.toggleClass("fancybox-is-fullscreen",e),t.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!e).toggleClass("fancybox-button--fsexit",e))})),a(n).on({"onInit.fb":function(e,t){s?t&&t.group[t.currIndex].opts.fullScreen?(t.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(e){e.stopPropagation(),e.preventDefault(),i.toggle()}),t.opts.fullScreen&&!0===t.opts.fullScreen.autoStart&&i.request(),t.FullScreen=i):t&&t.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():t.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(e,t,a,i,s){t&&t.FullScreen&&70===s&&(i.preventDefault(),t.FullScreen.toggle())},"beforeClose.fb":function(e,t){t&&t.FullScreen&&t.$refs.container.hasClass("fancybox-is-fullscreen")&&i.exit()}})}(document,jQuery),function(e,n){"use strict";var r="fancybox-thumbs",o=r+"-active";n.fancybox.defaults=n.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},n.fancybox.defaults);function i(e){this.init(e)}n.extend(i.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(e){var t=this,a=e.group,i=0;t.instance=e,t.opts=a[e.currIndex].opts.thumbs,(e.Thumbs=t).$button=e.$refs.toolbar.find("[data-fancybox-thumbs]");for(var s=0,n=a.length;s<n&&(a[s].thumb&&i++,!(1<i));s++);1<i&&t.opts?(t.$button.removeAttr("style").on("click",function(){t.toggle()}),t.isActive=!0):t.$button.hide()},create:function(){var a,e=this,t=e.instance,i=e.opts.parentEl,s=[];e.$grid||(e.$grid=n('<div class="'+r+" "+r+"-"+e.opts.axis+'"></div>').appendTo(t.$refs.container.find(i).addBack().filter(i)),e.$grid.on("click","a",function(){t.jumpTo(n(this).attr("data-index"))})),e.$list||(e.$list=n('<div class="'+r+'__list">').appendTo(e.$grid)),n.each(t.group,function(e,t){(a=t.thumb)||"image"!==t.type||(a=t.src),s.push('<a href="javascript:;" tabindex="0" data-index="'+e+'"'+(a&&a.length?' style="background-image:url('+a+')"':'class="fancybox-thumbs-missing"')+"></a>")}),e.$list[0].innerHTML=s.join(""),"x"===e.opts.axis&&e.$list.width(parseInt(e.$grid.css("padding-right"),10)+t.group.length*e.$list.children().eq(0).outerWidth(!0))},focus:function(e){var t,a,i=this,s=i.$list,n=i.$grid;i.instance.current&&(a=(t=s.children().removeClass(o).filter('[data-index="'+i.instance.current.index+'"]').addClass(o)).position(),"y"===i.opts.axis&&(a.top<0||a.top>s.height()-t.outerHeight())?s.stop().animate({scrollTop:s.scrollTop()+a.top},e):"x"===i.opts.axis&&(a.left<n.scrollLeft()||a.left>n.scrollLeft()+(n.width()-t.outerWidth()))&&s.parent().stop().animate({scrollLeft:a.left},e))},update:function(){var e=this;e.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),e.isVisible?(e.$grid||e.create(),e.instance.trigger("onThumbsShow"),e.focus(0)):e.$grid&&e.instance.trigger("onThumbsHide"),e.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),n(e).on({"onInit.fb":function(e,t){var a;t&&!t.Thumbs&&(a=new i(t)).isActive&&!0===a.opts.autoStart&&a.show()},"beforeShow.fb":function(e,t,a,i){var s=t&&t.Thumbs;s&&s.isVisible&&s.focus(i?0:250)},"afterKeydown.fb":function(e,t,a,i,s){var n=t&&t.Thumbs;n&&n.isActive&&71===s&&(i.preventDefault(),n.toggle())},"beforeClose.fb":function(e,t){var a=t&&t.Thumbs;a&&a.isVisible&&!1!==a.opts.hideOnClose&&a.$grid.hide()}})}(document,jQuery),function(e,n){"use strict";n.extend(!0,n.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(e,t){return!e.currentHash&&"inline"!==t.type&&"html"!==t.type&&(t.origSrc||t.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),n(e).on("click","[data-fancybox-share]",function(){var e,t,a,i=n.fancybox.getInstance(),s=i.current||null;s&&("function"===n.type(s.opts.share.url)&&(e=s.opts.share.url.apply(s,[i,s])),t=s.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===s.type?encodeURIComponent(s.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(e)).replace(/\{\{url_raw\}\}/g,(a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(e).replace(/[&<>"'`=\/]/g,function(e){return a[e]}))).replace(/\{\{descr\}\}/g,i.$caption?encodeURIComponent(i.$caption.text()):""),n.fancybox.open({src:i.translate(i,t),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(e,t){i.$refs.container.one("beforeClose.fb",function(){e.close(null,0)}),t.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(n,r,s){"use strict";function o(){var e=n.location.hash.substr(1),t=e.split("-"),a=1<t.length&&/^\+?\d+$/.test(t[t.length-1])&&parseInt(t.pop(-1),10)||1;return{hash:e,index:a<1?1:a,gallery:t.join("-")}}function t(e){""!==e.gallery&&s("[data-fancybox='"+s.escapeSelector(e.gallery)+"']").eq(e.index-1).focus().trigger("click.fb-start")}function l(e){var t,a;return!!e&&(""!==(a=(t=e.current?e.current.opts:e.opts).hash||(t.$orig?t.$orig.data("fancybox")||t.$orig.data("fancybox-trigger"):""))&&a)}s.escapeSelector||(s.escapeSelector=function(e){return(e+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e})}),s(function(){!1!==s.fancybox.defaults.hash&&(s(r).on({"onInit.fb":function(e,t){var a,i;!1!==t.group[t.currIndex].opts.hash&&(a=o(),(i=l(t))&&a.gallery&&i==a.gallery&&(t.currIndex=a.index-1))},"beforeShow.fb":function(e,t,a,i){var s;a&&!1!==a.opts.hash&&(s=l(t))&&(t.currentHash=s+(1<t.group.length?"-"+(a.index+1):""),n.location.hash!=="#"+t.currentHash&&(i&&!t.origHash&&(t.origHash=n.location.hash),t.hashTimer&&clearTimeout(t.hashTimer),t.hashTimer=setTimeout(function(){"replaceState"in n.history?(n.history[i?"pushState":"replaceState"]({},r.title,n.location.pathname+n.location.search+"#"+t.currentHash),i&&(t.hasCreatedHistory=!0)):n.location.hash=t.currentHash,t.hashTimer=null},300)))},"beforeClose.fb":function(e,t,a){!1!==a.opts.hash&&(clearTimeout(t.hashTimer),t.currentHash&&t.hasCreatedHistory?n.history.back():t.currentHash&&("replaceState"in n.history?n.history.replaceState({},r.title,n.location.pathname+n.location.search+(t.origHash||"")):n.location.hash=t.origHash),t.currentHash=null)}}),s(n).on("hashchange.fb",function(){var e=o(),i=null;s.each(s(".fancybox-container").get().reverse(),function(e,t){var a=s(t).data("FancyBox");if(a&&a.currentHash)return i=a,!1}),i?i.currentHash===e.gallery+"-"+e.index||1===e.index&&i.currentHash==e.gallery||(i.currentHash=null,i.close()):""!==e.gallery&&t(e)}),setTimeout(function(){s.fancybox.getInstance()||t(o())},50))})}(window,document,jQuery),function(e,t){"use strict";var s=(new Date).getTime();t(e).on({"onInit.fb":function(e,i,t){i.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(e){var t=i.current,a=(new Date).getTime();i.group.length<2||!1===t.opts.wheel||"auto"===t.opts.wheel&&"image"!==t.type||(e.preventDefault(),e.stopPropagation(),t.$slide.hasClass("fancybox-animated")||(e=e.originalEvent||e,a-s<250||(s=a,i[(-e.deltaY||-e.deltaX||e.wheelDelta||-e.detail)<0?"next":"previous"]())))})}})}(document,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zd2lwZXIvZGlzdC9qcy9zd2lwZXIuanMiLCIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGZhbmN5YXBwcy9mYW5jeWJveC9kaXN0L2pxdWVyeS5mYW5jeWJveC5qcyJdLCJuYW1lcyI6WyJnbG9iYWwiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInNlbGYiLCJTd2lwZXIiLCJ0aGlzIiwiZG9jIiwiZG9jdW1lbnQiLCJib2R5IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhY3RpdmVFbGVtZW50IiwiYmx1ciIsIm5vZGVOYW1lIiwicXVlcnlTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY3JlYXRlRWxlbWVudCIsImNoaWxkcmVuIiwiY2hpbGROb2RlcyIsInN0eWxlIiwic2V0QXR0cmlidXRlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsb2NhdGlvbiIsImhhc2giLCJ3aW4iLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwiQ3VzdG9tRXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIkltYWdlIiwiRGF0ZSIsInNjcmVlbiIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJEb203IiwiYXJyIiwiaSIsImxlbmd0aCIsIiQiLCJzZWxlY3RvciIsImNvbnRleHQiLCJlbHMiLCJ0ZW1wUGFyZW50IiwiaHRtbCIsInRyaW0iLCJpbmRleE9mIiwidG9DcmVhdGUiLCJpbm5lckhUTUwiLCJwdXNoIiwibWF0Y2giLCJzcGxpdCIsIm5vZGVUeXBlIiwidW5pcXVlIiwidW5pcXVlQXJyYXkiLCJmbiIsInByb3RvdHlwZSIsIkNsYXNzIiwiTWV0aG9kcyIsImFkZENsYXNzIiwiY2xhc3NOYW1lIiwiY2xhc3NlcyIsImoiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmVDbGFzcyIsInJlbW92ZSIsImhhc0NsYXNzIiwiY29udGFpbnMiLCJ0b2dnbGVDbGFzcyIsInRvZ2dsZSIsImF0dHIiLCJhdHRycyIsInZhbHVlIiwiYXJndW1lbnRzJDEiLCJhcmd1bWVudHMiLCJnZXRBdHRyaWJ1dGUiLCJhdHRyTmFtZSIsInJlbW92ZUF0dHIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkYXRhIiwia2V5IiwiZWwiLCJkb203RWxlbWVudERhdGFTdG9yYWdlIiwiZGF0YUtleSIsInRyYW5zZm9ybSIsImVsU3R5bGUiLCJ3ZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uIiwiZHVyYXRpb24iLCJ3ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJvbiIsImFyZ3MiLCJsZW4iLCJldmVudFR5cGUiLCJ0YXJnZXRTZWxlY3RvciIsImxpc3RlbmVyIiwiY2FwdHVyZSIsImhhbmRsZUxpdmVFdmVudCIsImUiLCJ0YXJnZXQiLCJldmVudERhdGEiLCJkb203RXZlbnREYXRhIiwidW5zaGlmdCIsImlzIiwiYXBwbHkiLCJwYXJlbnRzIiwiayIsImhhbmRsZUV2ZW50IiwidW5kZWZpbmVkIiwiZXZlbnRzIiwiZXZlbnQkMSIsImRvbTdMaXZlTGlzdGVuZXJzIiwicHJveHlMaXN0ZW5lciIsImV2ZW50IiwiZG9tN0xpc3RlbmVycyIsIm9mZiIsImhhbmRsZXJzIiwiaGFuZGxlciIsImRvbTdwcm94eSIsInNwbGljZSIsInRyaWdnZXIiLCJldnQiLCJkZXRhaWwiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImZpbHRlciIsImRhdGFJbmRleCIsImRpc3BhdGNoRXZlbnQiLCJ0cmFuc2l0aW9uRW5kIiwiY2FsbGJhY2siLCJkb20iLCJmaXJlQ2FsbEJhY2siLCJjYWxsIiwib3V0ZXJXaWR0aCIsImluY2x1ZGVNYXJnaW5zIiwic3R5bGVzIiwib2Zmc2V0V2lkdGgiLCJwYXJzZUZsb2F0Iiwib3V0ZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwidG9wIiwibGVmdCIsImNzcyIsInByb3BzIiwicHJvcCIsImVhY2giLCJ0ZXh0IiwidGV4dENvbnRlbnQiLCJjb21wYXJlV2l0aCIsIm1hdGNoZXMiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImluZGV4IiwiY2hpbGQiLCJwcmV2aW91c1NpYmxpbmciLCJlcSIsInJldHVybkluZGV4IiwiYXBwZW5kIiwibmV3Q2hpbGQiLCJ0ZW1wRGl2IiwiZmlyc3RDaGlsZCIsImFwcGVuZENoaWxkIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsIm5leHQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0QWxsIiwibmV4dEVscyIsInByZXYiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldkFsbCIsInByZXZFbHMiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiY2xvc2VzdCIsImZpbmQiLCJmb3VuZEVsZW1lbnRzIiwiZm91bmQiLCJyZW1vdmVDaGlsZCIsInRvQWRkIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJtZXRob2ROYW1lIiwiU3dpcGVyQ2xhc3MiLCJwYXJhbXMiLCJldmVudHNMaXN0ZW5lcnMiLCJldmVudE5hbWUiLCJ0ZXN0RGl2IiwidWEiLCJVdGlscyIsImRlbGV0ZVByb3BzIiwib2JqIiwib2JqZWN0IiwibmV4dFRpY2siLCJkZWxheSIsIm5vdyIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIm1hcCIsImEiLCJyZXBsYWNlIiwiam9pbiIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwidG9TdHJpbmciLCJtNDEiLCJtNDIiLCJwYXJzZVVybFF1ZXJ5IiwidXJsIiwicGFyYW0iLCJxdWVyeSIsInVybFRvUGFyc2UiLCJocmVmIiwicGFyYW1zUGFydCIsImRlY29kZVVSSUNvbXBvbmVudCIsImlzT2JqZWN0IiwibyIsImNvbnN0cnVjdG9yIiwiZXh0ZW5kIiwibGVuJDEiLCJ0byIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJuZXh0S2V5IiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJTdXBwb3J0IiwidG91Y2giLCJNb2Rlcm5penIiLCJtYXhUb3VjaFBvaW50cyIsIkRvY3VtZW50VG91Y2giLCJwb2ludGVyRXZlbnRzIiwicG9pbnRlckVuYWJsZWQiLCJQb2ludGVyRXZlbnQiLCJwcmVmaXhlZFBvaW50ZXJFdmVudHMiLCJtc1BvaW50ZXJFbmFibGVkIiwidHJhbnNmb3JtczNkIiwiY3NzdHJhbnNmb3JtczNkIiwiZmxleGJveCIsIm9ic2VydmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZ2VzdHVyZXMiLCJCcm93c2VyIiwiaXNJRSIsImlzRWRnZSIsImlzU2FmYXJpIiwidG9Mb3dlckNhc2UiLCJpc1VpV2ViVmlldyIsInRlc3QiLCJzdGF0aWNBY2Nlc3NvcnMiLCJjb21wb25lbnRzIiwiY29uZmlndXJhYmxlIiwicHJpb3JpdHkiLCJtZXRob2QiLCJvbmNlIiwib25jZUhhbmRsZXIiLCJmN3Byb3h5IiwiZXZlbnRIYW5kbGVyIiwiZW1pdCIsIkFycmF5IiwiaXNBcnJheSIsInNsaWNlIiwidXNlTW9kdWxlc1BhcmFtcyIsImluc3RhbmNlUGFyYW1zIiwiaW5zdGFuY2UiLCJtb2R1bGVzIiwibW9kdWxlTmFtZSIsInVzZU1vZHVsZXMiLCJtb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1zIiwibW9kdWxlUHJvcE5hbWUiLCJtb2R1bGVQcm9wIiwiYmluZCIsIm1vZHVsZUV2ZW50TmFtZSIsImNyZWF0ZSIsInNldCIsInVzZSIsImluc3RhbGxNb2R1bGUiLCJuYW1lIiwicHJvdG8iLCJzdGF0aWMiLCJpbnN0YWxsIiwibSIsImNvbmNhdCIsImRlZmluZVByb3BlcnRpZXMiLCJ1cGRhdGUiLCJ1cGRhdGVTaXplIiwic3dpcGVyIiwiJGVsIiwid2lkdGgiLCJjbGllbnRXaWR0aCIsImhlaWdodCIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsInNpemUiLCJ1cGRhdGVTbGlkZXMiLCIkd3JhcHBlckVsIiwic3dpcGVyU2l6ZSIsInJ0bCIsInJ0bFRyYW5zbGF0ZSIsIndyb25nUlRMIiwiaXNWaXJ0dWFsIiwidmlydHVhbCIsImVuYWJsZWQiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJzbGlkZXNQZXJDb2x1bW4iLCJNYXRoIiwiZmxvb3IiLCJjZWlsIiwic2xpZGVzUGVyVmlldyIsInNsaWRlc1BlckNvbHVtbkZpbGwiLCJtYXgiLCJuZXdTbGlkZXNHcmlkIiwiYWxsU2xpZGVzU2l6ZSIsImFsbFNsaWRlc09mZnNldCIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwic2xpZGVTaXplIiwibmV3U2xpZGVPcmRlckluZGV4IiwiZ3JvdXBJbmRleCIsInJvdyIsImNvbHVtbiIsInNsaWRlU3R5bGVzIiwiY3VycmVudFRyYW5zZm9ybSIsImN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0iLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImJveFNpemluZyIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwiYm94U2l6aW5nJDEiLCJzbGlkZSIsInNsaWRlc1Blckdyb3VwIiwiLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCIsIi1tb3otYm94LW9yZGluYWwtZ3JvdXAiLCItbXMtZmxleC1vcmRlciIsIi13ZWJraXQtb3JkZXIiLCJvcmRlciIsInJvdW5kTGVuZ3RocyIsInN3aXBlclNsaWRlU2l6ZSIsImNlbnRlcmVkU2xpZGVzIiwiYWJzIiwiZWZmZWN0Iiwic2V0V3JhcHBlclNpemUiLCJpJDEiLCJzbGlkZXNHcmlkSXRlbSIsImkkMiIsInNsaWRlc0dyaWRJdGVtJDEiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJzbGlkZVNpemVWYWx1ZSIsInNuYXAiLCJzbmFwSW5kZXgiLCJ3YXRjaE92ZXJmbG93IiwiY2hlY2tPdmVyZmxvdyIsIndhdGNoU2xpZGVzUHJvZ3Jlc3MiLCJ3YXRjaFNsaWRlc1Zpc2liaWxpdHkiLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJ1cGRhdGVBdXRvSGVpZ2h0Iiwic3BlZWQiLCJhY3RpdmVTbGlkZXMiLCJuZXdIZWlnaHQiLCJzZXRUcmFuc2l0aW9uIiwiYWN0aXZlSW5kZXgiLCJzd2lwZXJTbGlkZU9mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsInRyYW5zbGF0ZSIsIm9mZnNldENlbnRlciIsInNsaWRlVmlzaWJsZUNsYXNzIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJ2aXNpYmxlU2xpZGVzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsInByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJ0cmFuc2xhdGVzRGlmZiIsIm1heFRyYW5zbGF0ZSIsImlzQmVnaW5uaW5nIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNFbmQiLCJ1cGRhdGVTbGlkZXNDbGFzc2VzIiwiYWN0aXZlU2xpZGUiLCJyZWFsSW5kZXgiLCJzbGlkZUFjdGl2ZUNsYXNzIiwibG9vcCIsInNsaWRlRHVwbGljYXRlQ2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwibmV4dFNsaWRlIiwic2xpZGVOZXh0Q2xhc3MiLCJwcmV2U2xpZGUiLCJzbGlkZVByZXZDbGFzcyIsInNsaWRlRHVwbGljYXRlTmV4dENsYXNzIiwic2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJub3JtYWxpemVTbGlkZUluZGV4IiwiaW5pdGlhbGl6ZWQiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJzbGlkZUZvdW5kIiwiY2xpY2tlZFNsaWRlIiwiY2xpY2tlZEluZGV4Iiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsInZpcnR1YWxUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwieCIsInkiLCJwcmV2aW91c1RyYW5zbGF0ZSIsInRyYW5zaXRpb24kMSIsInRyYW5zaXRpb25TdGFydCIsInJ1bkNhbGxiYWNrcyIsImRpcmVjdGlvbiIsImF1dG9IZWlnaHQiLCJkaXIiLCJhbmltYXRpbmciLCJzbGlkZVRvIiwiaW50ZXJuYWwiLCJzbGlkZUluZGV4IiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwiaW5pdGlhbFNsaWRlIiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwiZGVzdHJveWVkIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsImxvb3BlZFNsaWRlcyIsInNsaWRlTmV4dCIsImxvb3BGaXgiLCJfY2xpZW50TGVmdCIsInNsaWRlUHJldiIsIm5vcm1hbGl6ZSIsInZhbCIsInByZXZJbmRleCIsIm5vcm1hbGl6ZWRUcmFuc2xhdGUiLCJub3JtYWxpemVkU25hcEdyaWQiLCJwcmV2U25hcCIsInNsaWRlUmVzZXQiLCJzbGlkZVRvQ2xvc2VzdCIsImN1cnJlbnRTbmFwIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJzbGlkZVRvSW5kZXgiLCJsb29wQ3JlYXRlIiwibG9vcEZpbGxHcm91cFdpdGhCbGFuayIsImJsYW5rU2xpZGVzTnVtIiwiYmxhbmtOb2RlIiwibG9vcEFkZGl0aW9uYWxTbGlkZXMiLCJwcmVwZW5kU2xpZGVzIiwiYXBwZW5kU2xpZGVzIiwiY2xvbmVOb2RlIiwiZGlmZiIsImxvb3BEZXN0cm95IiwiZ3JhYkN1cnNvciIsInNldEdyYWJDdXJzb3IiLCJtb3ZpbmciLCJzaW11bGF0ZVRvdWNoIiwiaXNMb2NrZWQiLCJjdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJvc1ZlcnNpb25BcnIiLCJtZXRhVmlld3BvcnQiLCJkZXZpY2UiLCJ3aW5kb3dzIiwiYW5kcm9pZCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwibWFuaXB1bGF0aW9uIiwiYXBwZW5kU2xpZGUiLCJwcmVwZW5kU2xpZGUiLCJhZGRTbGlkZSIsImFjdGl2ZUluZGV4QnVmZmVyIiwiYmFzZUxlbmd0aCIsInNsaWRlc0J1ZmZlciIsImN1cnJlbnRTbGlkZSIsInJlbW92ZVNsaWRlIiwic2xpZGVzSW5kZXhlcyIsImluZGV4VG9SZW1vdmUiLCJyZW1vdmVBbGxTbGlkZXMiLCJEZXZpY2UiLCJpb3MiLCJhbmRyb2lkQ2hyb21lIiwiZGVza3RvcCIsImNvcmRvdmEiLCJwaG9uZWdhcCIsIm9zIiwib3NWZXJzaW9uIiwid2ViVmlldyIsIm1pbmltYWxVaSIsInBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwib25SZXNpemUiLCJuZXdUcmFuc2xhdGUiLCJicmVha3BvaW50cyIsInNldEJyZWFrcG9pbnQiLCJmcmVlTW9kZSIsIm1pbiIsImF1dG9wbGF5IiwicnVubmluZyIsInBhdXNlZCIsInJ1biIsImRlZmF1bHRzIiwiaW5pdCIsInRvdWNoRXZlbnRzVGFyZ2V0IiwiZWRnZVN3aXBlRGV0ZWN0aW9uIiwiZWRnZVN3aXBlVGhyZXNob2xkIiwiZnJlZU1vZGVNb21lbnR1bSIsImZyZWVNb2RlTW9tZW50dW1SYXRpbyIsImZyZWVNb2RlTW9tZW50dW1Cb3VuY2UiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW8iLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsImZyZWVNb2RlU3RpY2t5IiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJicmVha3BvaW50c0ludmVyc2UiLCJ0b3VjaFJhdGlvIiwidG91Y2hBbmdsZSIsInNob3J0U3dpcGVzIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsImxvbmdTd2lwZXNNcyIsImZvbGxvd0ZpbmdlciIsImFsbG93VG91Y2hNb3ZlIiwidGhyZXNob2xkIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwidW5pcXVlTmF2RWxlbWVudHMiLCJyZXNpc3RhbmNlIiwicmVzaXN0YW5jZVJhdGlvIiwicHJldmVudENsaWNrcyIsInByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiIsInByZWxvYWRJbWFnZXMiLCJ1cGRhdGVPbkltYWdlc1JlYWR5Iiwic3dpcGVIYW5kbGVyIiwibm9Td2lwaW5nIiwibm9Td2lwaW5nQ2xhc3MiLCJub1N3aXBpbmdTZWxlY3RvciIsInBhc3NpdmVMaXN0ZW5lcnMiLCJjb250YWluZXJNb2RpZmllckNsYXNzIiwic2xpZGVDbGFzcyIsInNsaWRlQmxhbmtDbGFzcyIsIndyYXBwZXJDbGFzcyIsInByb3RvdHlwZXMiLCJhdHRhY2hFdmVudHMiLCJ0b3VjaEV2ZW50cyIsIndyYXBwZXJFbCIsIm9uVG91Y2hTdGFydCIsInN0YXJ0WCIsInN0YXJ0WSIsInByZXZlbnREZWZhdWx0Iiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJ0b3VjaEV2ZW50c0RhdGEiLCJ0b3VjaGVzIiwib3JpZ2luYWxFdmVudCIsImlzVG91Y2hFdmVudCIsInR5cGUiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJhbGxvd0NsaWNrIiwiY3VycmVudFgiLCJ0YXJnZXRUb3VjaGVzIiwicGFnZVgiLCJjdXJyZW50WSIsInBhZ2VZIiwiaU9TRWRnZVN3aXBlRGV0ZWN0aW9uIiwiaU9TRWRnZVN3aXBlVGhyZXNob2xkIiwiYWxsb3dUb3VjaENhbGxiYWNrcyIsImlzU2Nyb2xsaW5nIiwic3RhcnRNb3ZpbmciLCJ0b3VjaFN0YXJ0VGltZSIsInN3aXBlRGlyZWN0aW9uIiwiYWxsb3dUaHJlc2hvbGRNb3ZlIiwiZm9ybUVsZW1lbnRzIiwib25Ub3VjaE1vdmUiLCJwcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwicG93IiwiYXRhbjIiLCJQSSIsIm5lc3RlZCIsInN0b3BQcm9wYWdhdGlvbiIsInN0YXJ0VHJhbnNsYXRlIiwiYWxsb3dNb21lbnR1bUJvdW5jZSIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJ2ZWxvY2l0aWVzIiwicG9zaXRpb24iLCJ0aW1lIiwib25Ub3VjaEVuZCIsImN1cnJlbnRQb3MiLCJsYXN0TW92ZUV2ZW50IiwidmVsb2NpdHlFdmVudCIsImRpc3RhbmNlIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJsYXN0Q2xpY2tUaW1lIiwiY2xpY2tUaW1lb3V0IiwicG9wIiwidmVsb2NpdHkiLCJtb21lbnR1bUR1cmF0aW9uIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsIm5lZWRzTG9vcEZpeCIsImRvQm91bmNlIiwiYm91bmNlQW1vdW50Iiwic3RvcEluZGV4IiwiZ3JvdXBTaXplIiwicmF0aW8iLCJvbkNsaWNrIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RhcnQiLCJwYXNzaXZlIiwibW92ZSIsImVuZCIsImRldGFjaEV2ZW50cyIsImJyZWFrcG9pbnQiLCJicmVha3BvaW50T25seVBhcmFtcyIsImJyZWFrcG9pbnRQYXJhbXMiLCJkaXJlY3Rpb25DaGFuZ2VkIiwibmVlZHNSZUxvb3AiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJwYXJhbVZhbHVlIiwib3JpZ2luYWxQYXJhbXMiLCJjaGFuZ2VEaXJlY3Rpb24iLCJwb2ludHMiLCJwb2ludCIsInNvcnQiLCJiIiwiaW5uZXJXaWR0aCIsIndhc0xvY2tlZCIsIm5hdmlnYXRpb24iLCJhZGRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsInN1ZmZpeGVzIiwic3VmZml4IiwicmVtb3ZlQ2xhc3NlcyIsImltYWdlcyIsImxvYWRJbWFnZSIsImltYWdlRWwiLCJzcmMiLCJzcmNzZXQiLCJzaXplcyIsImNoZWNrRm9yQ29tcGxldGUiLCJpbWFnZSIsIm9uUmVhZHkiLCJjb21wbGV0ZSIsIm9ubG9hZCIsIm9uZXJyb3IiLCJpbWFnZXNMb2FkZWQiLCJpbWFnZXNUb0xvYWQiLCJjdXJyZW50U3JjIiwiZXh0ZW5kZWREZWZhdWx0cyIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJtb2R1bGVQYXJhbU5hbWUiLCJzd2lwZXJQYXJhbXMiLCJwYXNzZWRQYXJhbXMiLCJzd2lwZXJzIiwiY29udGFpbmVyRWwiLCJuZXdQYXJhbXMiLCJ0b3VjaEV2ZW50c1RvdWNoIiwidG91Y2hFdmVudHNEZXNrdG9wIiwiX19wcm90b19fIiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsInNsaWRlRWwiLCJkZXN0cm95IiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsImV4dGVuZERlZmF1bHRzIiwibmV3RGVmYXVsdHMiLCJEZXZpY2UkMSIsIlN1cHBvcnQkMSIsInN1cHBvcnQiLCJCcm93c2VyJDEiLCJicm93c2VyIiwiUmVzaXplIiwicmVzaXplIiwicmVzaXplSGFuZGxlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIk9ic2VydmVyIiwiZnVuYyIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwiYXR0YWNoIiwib3B0aW9ucyIsIm11dGF0aW9ucyIsIm9ic2VydmVyVXBkYXRlIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib2JzZXJ2ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZXJzIiwib2JzZXJ2ZVBhcmVudHMiLCJjb250YWluZXJQYXJlbnRzIiwib2JzZXJ2ZVNsaWRlQ2hpbGRyZW4iLCJkaXNjb25uZWN0IiwiT2JzZXJ2ZXIkMSIsIlZpcnR1YWwiLCJmb3JjZSIsInJlZiIsInJlZiQxIiwiYWRkU2xpZGVzQmVmb3JlIiwiYWRkU2xpZGVzQWZ0ZXIiLCJyZWYkMiIsInByZXZpb3VzRnJvbSIsImZyb20iLCJwcmV2aW91c1RvIiwicHJldmlvdXNTbGlkZXNHcmlkIiwicmVuZGVyU2xpZGUiLCJwcmV2aW91c09mZnNldCIsInNsaWRlc0FmdGVyIiwib2Zmc2V0UHJvcCIsInNsaWRlc0JlZm9yZSIsIm9uUmVuZGVyZWQiLCJsYXp5IiwibG9hZCIsInJlbmRlckV4dGVybmFsIiwic2xpZGVzVG9SZW5kZXIiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCJjYWNoZSIsIiRzbGlkZUVsIiwibmV3Q2FjaGUiLCJudW1iZXJPZk5ld1NsaWRlcyIsImNhY2hlZEluZGV4IiwiVmlydHVhbCQxIiwiYmVmb3JlSW5pdCIsIm92ZXJ3cml0ZVBhcmFtcyIsIktleWJvYXJkIiwiaGFuZGxlIiwia2MiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJzaGlmdEtleSIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwia2V5Ym9hcmQiLCJvbmx5SW5WaWV3cG9ydCIsImluVmlldyIsIndpbmRvd1dpZHRoIiwid2luZG93SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJzd2lwZXJPZmZzZXQiLCJzd2lwZXJDb29yZCIsInJldHVyblZhbHVlIiwiZW5hYmxlIiwiZGlzYWJsZSIsIktleWJvYXJkJDEiLCJlbGVtZW50IiwiaXNTdXBwb3J0ZWQiLCJNb3VzZXdoZWVsIiwibGFzdFNjcm9sbFRpbWUiLCJpbXBsZW1lbnRhdGlvbiIsImhhc0ZlYXR1cmUiLCJzWCIsInNZIiwicFgiLCJwWSIsIndoZWVsRGVsdGEiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGFYIiwiSE9SSVpPTlRBTF9BWElTIiwiZGVsdGFZIiwiZGVsdGFYIiwiZGVsdGFNb2RlIiwic3BpblgiLCJzcGluWSIsInBpeGVsWCIsInBpeGVsWSIsImhhbmRsZU1vdXNlRW50ZXIiLCJtb3VzZUVudGVyZWQiLCJoYW5kbGVNb3VzZUxlYXZlIiwibW91c2V3aGVlbCIsInJlbGVhc2VPbkVkZ2VzIiwiZGVsdGEiLCJydGxGYWN0b3IiLCJmb3JjZVRvQXhpcyIsImludmVydCIsInNlbnNpdGl2aXR5IiwidGltZW91dCIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJzdG9wIiwiZ2V0VGltZSIsImV2ZW50c1RhcmdlZCIsIk5hdmlnYXRpb24iLCIkbmV4dEVsIiwiJHByZXZFbCIsImRpc2FibGVkQ2xhc3MiLCJsb2NrQ2xhc3MiLCJvblByZXZDbGljayIsIm9uTmV4dENsaWNrIiwibmV4dEVsIiwicHJldkVsIiwiUGFnaW5hdGlvbiIsInBhZ2luYXRpb24iLCJjdXJyZW50IiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInRvdGFsIiwicGFnaW5hdGlvblR5cGUiLCJidWxsZXRzIiwiZmlyc3RJbmRleCIsImxhc3RJbmRleCIsIm1pZEluZGV4IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0IiwiZHluYW1pY0J1bGxldHMiLCJidWxsZXRTaXplIiwiZHluYW1pY01haW5CdWxsZXRzIiwiZHluYW1pY0J1bGxldEluZGV4IiwiYnVsbGV0IiwiJGJ1bGxldCIsImJ1bGxldEluZGV4IiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCIkZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCIkbGFzdERpc3BsYXllZEJ1bGxldCIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJwcm9ncmVzc2Jhck9wcG9zaXRlIiwicmVuZGVyQ3VzdG9tIiwicmVuZGVyIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRDbGFzcyIsInJlbmRlckZyYWN0aW9uIiwiY3VycmVudENsYXNzIiwidG90YWxDbGFzcyIsInJlbmRlclByb2dyZXNzYmFyIiwicHJvZ3Jlc3NiYXJGaWxsQ2xhc3MiLCJjbGlja2FibGUiLCJjbGlja2FibGVDbGFzcyIsIm1vZGlmaWVyQ2xhc3MiLCJwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MiLCJoaWRkZW5DbGFzcyIsIlNjcm9sbGJhciIsInNjcm9sbGJhciIsImRyYWdTaXplIiwidHJhY2tTaXplIiwiJGRyYWdFbCIsIm5ld1NpemUiLCJuZXdQb3MiLCJoaWRlIiwib3BhY2l0eSIsImRpdmlkZXIiLCJtb3ZlRGl2aWRlciIsImRpc3BsYXkiLCJnZXRQb2ludGVyUG9zaXRpb24iLCJjbGllbnRYIiwiY2xpZW50WSIsInNldERyYWdQb3NpdGlvbiIsImRyYWdTdGFydFBvcyIsInBvc2l0aW9uUmF0aW8iLCJvbkRyYWdTdGFydCIsImRyYWdUaW1lb3V0Iiwib25EcmFnTW92ZSIsIm9uRHJhZ0VuZCIsInNuYXBPblJlbGVhc2UiLCJlbmFibGVEcmFnZ2FibGUiLCJhY3RpdmVMaXN0ZW5lciIsImRpc2FibGVEcmFnZ2FibGUiLCIkc3dpcGVyRWwiLCJkcmFnRWwiLCJkcmFnZ2FibGUiLCJQYXJhbGxheCIsInNldFRyYW5zZm9ybSIsImN1cnJlbnRPcGFjaXR5IiwiY3VycmVudFNjYWxlIiwicCIsInBhcmFsbGF4IiwicGFyYWxsYXhFbCIsIiRwYXJhbGxheEVsIiwicGFyYWxsYXhEdXJhdGlvbiIsIlpvb20iLCJnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzIiwieDEiLCJ5MSIsIngyIiwieTIiLCJvbkdlc3R1cmVTdGFydCIsInpvb20iLCJnZXN0dXJlIiwiZmFrZUdlc3R1cmVUb3VjaGVkIiwiZmFrZUdlc3R1cmVNb3ZlZCIsInNjYWxlU3RhcnQiLCIkaW1hZ2VFbCIsIiRpbWFnZVdyYXBFbCIsIm1heFJhdGlvIiwiaXNTY2FsaW5nIiwib25HZXN0dXJlQ2hhbmdlIiwic2NhbGVNb3ZlIiwibWluUmF0aW8iLCJvbkdlc3R1cmVFbmQiLCJjaGFuZ2VkVG91Y2hlcyIsInRvdWNoZXNTdGFydCIsInNsaWRlV2lkdGgiLCJzbGlkZUhlaWdodCIsInNjYWxlZFdpZHRoIiwic2NhbGVkSGVpZ2h0IiwibWluWCIsIm1heFgiLCJtaW5ZIiwibWF4WSIsInRvdWNoZXNDdXJyZW50IiwicHJldlBvc2l0aW9uWCIsInByZXZQb3NpdGlvblkiLCJwcmV2VGltZSIsIm1vbWVudHVtRHVyYXRpb25YIiwibW9tZW50dW1EdXJhdGlvblkiLCJtb21lbnR1bURpc3RhbmNlWCIsIm5ld1Bvc2l0aW9uWCIsIm1vbWVudHVtRGlzdGFuY2VZIiwibmV3UG9zaXRpb25ZIiwib25UcmFuc2l0aW9uRW5kIiwib3V0IiwiaW4iLCJ0b3VjaFgiLCJ0b3VjaFkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsInRyYW5zbGF0ZU1pblgiLCJ0cmFuc2xhdGVNaW5ZIiwidHJhbnNsYXRlTWF4WCIsInRyYW5zbGF0ZU1heFkiLCJMYXp5IiwibG9hZEluU2xpZGUiLCJsb2FkSW5EdXBsaWNhdGUiLCIkaW1hZ2VzIiwiZWxlbWVudENsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJpbWFnZUluZGV4IiwiYmFja2dyb3VuZCIsInNsaWRlT3JpZ2luYWxJbmRleCIsIm9yaWdpbmFsU2xpZGUiLCJkdXBsaWNhdGVkU2xpZGUiLCJzbGlkZUV4aXN0IiwiaW5pdGlhbEltYWdlTG9hZGVkIiwiZWxJbmRleCIsImxvYWRQcmV2TmV4dCIsImxvYWRQcmV2TmV4dEFtb3VudCIsImFtb3VudCIsIm1heEluZGV4IiwibWluSW5kZXgiLCJDb250cm9sbGVyIiwiTGluZWFyU3BsaW5lIiwiZ3Vlc3MiLCJpMSIsImkzIiwiYmluYXJ5U2VhcmNoIiwiYXJyYXkiLCJpbnRlcnBvbGF0ZSIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJjIiwiY29udHJvbGxlciIsInNwbGluZSIsInNldFRyYW5zbGF0ZSQxIiwibXVsdGlwbGllciIsImNvbnRyb2xsZWRUcmFuc2xhdGUiLCJjb250cm9sbGVkIiwiY29udHJvbCIsInNldENvbnRyb2xsZWRUcmFuc2xhdGUiLCJieSIsImludmVyc2UiLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsImExMXkiLCJtYWtlRWxGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxMYWJlbCIsImxhYmVsIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyS2V5IiwiJHRhcmdldEVsIiwibm90aWZ5IiwibGFzdFNsaWRlTWVzc2FnZSIsIm5leHRTbGlkZU1lc3NhZ2UiLCJmaXJzdFNsaWRlTWVzc2FnZSIsInByZXZTbGlkZU1lc3NhZ2UiLCJjbGljayIsIm1lc3NhZ2UiLCJub3RpZmljYXRpb24iLCJsaXZlUmVnaW9uIiwidXBkYXRlTmF2aWdhdGlvbiIsInVwZGF0ZVBhZ2luYXRpb24iLCJidWxsZXRFbCIsIiRidWxsZXRFbCIsInBhZ2luYXRpb25CdWxsZXRNZXNzYWdlIiwiSGlzdG9yeSIsInB1c2hTdGF0ZSIsImhhc2hOYXZpZ2F0aW9uIiwicGF0aHMiLCJnZXRQYXRoVmFsdWVzIiwic2Nyb2xsVG9TbGlkZSIsInJlcGxhY2VTdGF0ZSIsInNldEhpc3RvcnlQb3BTdGF0ZSIsInBhdGhBcnJheSIsInBhdGhuYW1lIiwicGFydCIsInNldEhpc3RvcnkiLCJjdXJyZW50U3RhdGUiLCJzbHVnaWZ5IiwiaW5jbHVkZXMiLCJzdGF0ZSIsIkhhc2hOYXZpZ2F0aW9uIiwib25IYXNoQ2FuZ2UiLCJuZXdIYXNoIiwic2V0SGFzaCIsIndhdGNoU3RhdGUiLCJBdXRvcGxheSIsIiRhY3RpdmVTbGlkZUVsIiwicmV2ZXJzZURpcmVjdGlvbiIsInN0b3BPbkxhc3RTbGlkZSIsInBhdXNlIiwid2FpdEZvclRyYW5zaXRpb24iLCJGYWRlIiwidHgiLCJ0eSIsInNsaWRlT3BhY2l0eSIsImZhZGVFZmZlY3QiLCJjcm9zc0ZhZGUiLCJldmVudFRyaWdnZXJlZCIsInRyaWdnZXJFdmVudHMiLCJDdWJlIiwiJGN1YmVTaGFkb3dFbCIsInN3aXBlcldpZHRoIiwic3dpcGVySGVpZ2h0IiwiY3ViZUVmZmVjdCIsIndyYXBwZXJSb3RhdGUiLCJzaGFkb3ciLCJzaGFkb3dBbmdsZSIsInNjYWxlMSIsInNjYWxlMiIsInNsaWRlQW5nbGUiLCJyb3VuZCIsInR6Iiwic2hhZG93QmVmb3JlIiwic2hhZG93QWZ0ZXIiLCJzbGlkZVNoYWRvd3MiLCItd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4iLCItbW96LXRyYW5zZm9ybS1vcmlnaW4iLCItbXMtdHJhbnNmb3JtLW9yaWdpbiIsInRyYW5zZm9ybS1vcmlnaW4iLCJzaGFkb3dPZmZzZXQiLCJzaW4iLCJjb3MiLCJzaGFkb3dTY2FsZSIsInpGYWN0b3IiLCJGbGlwIiwiZmxpcEVmZmVjdCIsImxpbWl0Um90YXRpb24iLCJyb3RhdGVZIiwicm90YXRlWCIsInpJbmRleCIsIkNvdmVyZmxvdyIsImNvdmVyZmxvd0VmZmVjdCIsImNlbnRlciIsInJvdGF0ZSIsImRlcHRoIiwib2Zmc2V0TXVsdGlwbGllciIsIm1vZGlmaWVyIiwidHJhbnNsYXRlWiIsInN0cmV0Y2giLCIkc2hhZG93QmVmb3JlRWwiLCIkc2hhZG93QWZ0ZXJFbCIsInNsaWRlVHJhbnNmb3JtIiwicGVyc3BlY3RpdmVPcmlnaW4iLCJUaHVtYnMiLCJ0aHVtYnNQYXJhbXMiLCJ0aHVtYnMiLCJzd2lwZXJDcmVhdGVkIiwidGh1bWJzQ29udGFpbmVyQ2xhc3MiLCJvblRodW1iQ2xpY2siLCJjdXJyZW50SW5kZXgiLCJ0aHVtYnNTd2lwZXIiLCJzbGlkZVRodW1iQWN0aXZlQ2xhc3MiLCJpbml0aWFsIiwiY3VycmVudFRodW1ic0luZGV4IiwicHJldlRodW1ic0luZGV4IiwibmV4dFRodW1ic0luZGV4IiwibmV3VGh1bWJzSW5kZXgiLCJ0aHVtYnNUb0FjdGl2YXRlIiwidGh1bWJBY3RpdmVDbGFzcyIsImhpZGVPbkNsaWNrIiwidG9FZGdlIiwiZnJvbUVkZ2UiLCJpc0hpZGRlbiIsImJ1bGxldEVsZW1lbnQiLCJudW1iZXIiLCJhY3RpdmVJbmRleENoYW5nZSIsInNuYXBJbmRleENoYW5nZSIsInNsaWRlc0xlbmd0aENoYW5nZSIsInNuYXBHcmlkTGVuZ3RoQ2hhbmdlIiwiZHJhZ0NsYXNzIiwiY29udGFpbmVyQ2xhc3MiLCJ6b29tZWRTbGlkZUNsYXNzIiwidG91Y2hTdGFydCIsInRvdWNoRW5kIiwiZG91YmxlVGFwIiwibG9hZE9uVHJhbnNpdGlvblN0YXJ0IiwicHJlbG9hZGVyQ2xhc3MiLCJzY3JvbGwiLCJzY3JvbGxiYXJEcmFnTW92ZSIsIm5vdGlmaWNhdGlvbkNsYXNzIiwicGFnaW5hdGlvblVwZGF0ZSIsImRpc2FibGVPbkludGVyYWN0aW9uIiwiYmVmb3JlVHJhbnNpdGlvblN0YXJ0Iiwic2xpZGVyRmlyc3RNb3ZlIiwic2xpZGVDaGFuZ2UiLCJiZWZvcmVEZXN0cm95IiwiJFciLCIkRCIsImNhbGxlZCIsInJlcXVlc3RBRnJhbWUiLCJjYW5jZWxBRnJhbWUiLCJmb3JjZVJlZHJhdyIsIm1lcmdlT3B0cyIsIkZhbmN5Qm94IiwiZGl2IiwiYnV0dG9uU3RyIiwiZm9jdXNTdHIiLCIkcHJlc3NlZCIsIl9ydW4iLCIkdGFyZ2V0IiwiaXRlbXMiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJjdXJyZW50VGFyZ2V0IiwiZmFuY3lib3giLCJnZXRJbnN0YW5jZSIsIiR0cmlnZ2VyIiwib3BlbiIsImNvbnNvbGUiLCJpbmZvIiwic3R1ZmYiLCJjbG9zZUV4aXN0aW5nIiwiZ3V0dGVyIiwicHJldmVudENhcHRpb25PdmVybGFwIiwiYXJyb3dzIiwiaW5mb2JhciIsInNtYWxsQnRuIiwidG9vbGJhciIsImJ1dHRvbnMiLCJpZGxlVGltZSIsInByb3RlY3QiLCJtb2RhbCIsInByZWxvYWQiLCJhamF4Iiwic2V0dGluZ3MiLCJpZnJhbWUiLCJ0cGwiLCJzY3JvbGxpbmciLCJ2aWRlbyIsImZvcm1hdCIsImF1dG9TdGFydCIsImRlZmF1bHRUeXBlIiwiYW5pbWF0aW9uRWZmZWN0IiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ6b29tT3BhY2l0eSIsInRyYW5zaXRpb25FZmZlY3QiLCJiYXNlQ2xhc3MiLCJiYXNlVHBsIiwic3Bpbm5lclRwbCIsImVycm9yVHBsIiwiYnRuVHBsIiwiZG93bmxvYWQiLCJjbG9zZSIsImFycm93TGVmdCIsImFycm93UmlnaHQiLCJwYXJlbnRFbCIsImhpZGVTY3JvbGxiYXIiLCJhdXRvRm9jdXMiLCJiYWNrRm9jdXMiLCJ0cmFwRm9jdXMiLCJmdWxsU2NyZWVuIiwidmVydGljYWwiLCJtb21lbnR1bSIsIm1lZGlhIiwic2xpZGVTaG93IiwiaGlkZU9uQ2xvc2UiLCJ3aGVlbCIsIm9uSW5pdCIsIm5vb3AiLCJiZWZvcmVMb2FkIiwiYWZ0ZXJMb2FkIiwiYmVmb3JlU2hvdyIsImFmdGVyU2hvdyIsImJlZm9yZUNsb3NlIiwiYWZ0ZXJDbG9zZSIsIm9uQWN0aXZhdGUiLCJvbkRlYWN0aXZhdGUiLCJjbGlja0NvbnRlbnQiLCJjbGlja1NsaWRlIiwiY2xpY2tPdXRzaWRlIiwiZGJsY2xpY2tDb250ZW50IiwiZGJsY2xpY2tTbGlkZSIsImRibGNsaWNrT3V0c2lkZSIsIm1vYmlsZSIsImxhbmciLCJpMThuIiwiZW4iLCJDTE9TRSIsIk5FWFQiLCJQUkVWIiwiRVJST1IiLCJQTEFZX1NUQVJUIiwiUExBWV9TVE9QIiwiRlVMTF9TQ1JFRU4iLCJUSFVNQlMiLCJET1dOTE9BRCIsIlNIQVJFIiwiWk9PTSIsImRlIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib1JlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJtb3pDYW5jZWxBbmltYXRpb25GcmFtZSIsIm9DYW5jZWxBbmltYXRpb25GcmFtZSIsImlkIiwidCIsInRyYW5zaXRpb25zIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsIm9wdHMxIiwib3B0czIiLCJyZXoiLCJjb250ZW50IiwiaXNQbGFpbk9iamVjdCIsImlzTW9iaWxlIiwiY3VyckluZGV4IiwicHJldlBvcyIsImN1cnJQb3MiLCJmaXJzdFJ1biIsImdyb3VwIiwiYWRkQ29udGVudCIsIiRjb250YWluZXIiLCJmaXJzdEl0ZW1PcHRzIiwic2Nyb2xsSGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50IiwiYXBwZW5kVG8iLCIkcmVmcyIsImNvbnRhaW5lciIsIml0ZW0iLCJhY3RpdmF0ZSIsImp1bXBUbyIsInN0ciIsIm4iLCJtYWtlQXJyYXkiLCIkaXRlbSIsInNyY1BhcnRzIiwiJG9yaWciLCJjb250ZW50VHlwZSIsImNoYXJBdCIsImluQXJyYXkiLCIkdGh1bWIiLCJ0aHVtYiIsImNhcHRpb24iLCJzaGlmdCIsInVwZGF0ZUNvbnRyb2xzIiwiaXNBY3RpdmUiLCJmb2N1cyIsImFkZEV2ZW50cyIsInJlbW92ZUV2ZW50cyIsInByZXZpb3VzIiwiaXNTY2FsZWREb3duIiwicmVxdWVzdElkIiwic3RhZ2UiLCJzaG93Iiwia2V5Y29kZSIsImlkbGVTZWNvbmRzQ291bnRlciIsImlzSWRsZSIsInNob3dDb250cm9scyIsImlkbGVJbnRlcnZhbCIsInNldEludGVydmFsIiwiaXNEcmFnZ2luZyIsImhpZGVDb250cm9scyIsImNsZWFySW50ZXJ2YWwiLCJwb3MiLCJzbGlkZVBvcyIsInN0YWdlUG9zIiwiZ3JvdXBMZW4iLCJpc0Nsb3NpbmciLCJpc0FuaW1hdGluZyIsImNyZWF0ZVNsaWRlIiwiZm9yY2VkRHVyYXRpb24iLCJpc051bWVyaWMiLCIkc2xpZGUiLCJsb2FkU2xpZGUiLCJpc0NvbXBsZXRlIiwibGVmdFBvcyIsImFuaW1hdGUiLCJpc0xvYWRlZCIsInJldmVhbENvbnRlbnQiLCJ1cGRhdGVTbGlkZSIsInNjYWxlVG9BY3R1YWwiLCJpbWdQb3MiLCJwb3NYIiwicG9zWSIsIiRjb250ZW50IiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJuZXdJbWdXaWR0aCIsIm5ld0ltZ0hlaWdodCIsImhhc0Vycm9yIiwidXBkYXRlQ3Vyc29yIiwiU2xpZGVTaG93Iiwic2NhbGVUb0ZpdCIsImdldEZpdFBvcyIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwiYXNwZWN0UmF0aW8iLCJhZGp1c3RDYXB0aW9uIiwiYWRqdXN0TGF5b3V0IiwiY2VudGVyU2xpZGUiLCJzaWJsaW5ncyIsIm5leHRXaWR0aCIsIm5leHRIZWlnaHQiLCJjYW5QYW4iLCJpc1pvb21hYmxlIiwiR3Vlc3R1cmVzIiwiaXNGdW5jdGlvbiIsImZpdFBvcyIsImFqYXhMb2FkIiwiaXNMb2FkaW5nIiwic2V0SW1hZ2UiLCJzZXRJZnJhbWUiLCJzZXRDb250ZW50IiwidmlkZW9Gb3JtYXQiLCJzZXRFcnJvciIsInNob3dMb2FkaW5nIiwic3VjY2VzcyIsInRleHRTdGF0dXMiLCJlcnJvciIsImpxWEhSIiwib25lIiwiYWJvcnQiLCJnaG9zdCIsIiRpbWciLCIkaW1hZ2UiLCJjaGVja1NyY3NldCIsIiRnaG9zdCIsInNldEJpZ0ltYWdlIiwidGVtcCIsInB4UmF0aW8iLCJyZXQiLCJzdWJzdHJpbmciLCJwb3N0Zml4IiwiaW1nIiwicmVzb2x2ZUltYWdlU2xpZGVTaXplIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsImhpZGVMb2FkaW5nIiwicmVhZHlTdGF0ZSIsImltZ1dpZHRoIiwiaW1nSGVpZ2h0IiwiJGlmcmFtZSIsIm92ZXJmbG93IiwiaXNSZWFkeSIsIiRib2R5IiwiZnJhbWVXaWR0aCIsImZyYW1lSGVpZ2h0IiwiY29udGVudHMiLCJpZ25vcmUiLCJtYXgtd2lkdGgiLCJ1bmJpbmQiLCJlbXB0eSIsImlzUmV2ZWFsZWQiLCJoYXNPd25Qcm9wZXJ0eSIsIiRwbGFjZWhvbGRlciIsImluc2VydEFmdGVyIiwiYWZ0ZXIiLCIkc21hbGxCdG4iLCJ3cmFwIiwiZmlyc3QiLCJ3cmFwSW5uZXIiLCIkc3Bpbm5lciIsImZhZGVJbiIsIiRjYXB0aW9uIiwiY2FwdGlvbkgiLCJjbG9uZSIsImlubGluZVBhZGRpbmciLCJhY3R1YWxQYWRkaW5nIiwiZGlzYWJsZUxheW91dEZpeCIsImVmZmVjdENsYXNzTmFtZSIsImdldFRodW1iUG9zIiwidGh1bWJQb3MiLCJidHciLCJicnciLCJiYnciLCJibHciLCJlbGVtIiwiZWxlbUNlbnRlciIsIm93bmVyRG9jdW1lbnQiLCJlbGVtZW50RnJvbVBvaW50Iiwid2Via2l0RXhpdEZ1bGxzY3JlZW4iLCJmb2N1c2FibGVJdGVtcyIsImZvY3VzZWRJdGVtSW5kZXgiLCJmb2N1c2FibGVTdHIiLCJpc1Zpc2libGUiLCJkIiwiZG9uZSIsImNsZWFuVXAiLCJkb21SZWN0IiwiJGZvY3VzIiwiaGFzSGlkZGVuQ29udHJvbHMiLCJhbmRDYXB0aW9uIiwidG9nZ2xlQ29udHJvbHMiLCJ2ZXJzaW9uIiwiY29tbWFuZCIsImFsbCIsInVzZTNkIiwiZG9jdW1lbnRNb2RlIiwibGVhdmVBbmltYXRpb25OYW1lIiwicHJvcGVydHlOYW1lIiwiY2FsbENhbGxiYWNrIiwialF1ZXJ5IiwieW91dHViZSIsIm1hdGNoZXIiLCJhdXRvaGlkZSIsImZzIiwicmVsIiwiaGQiLCJ3bW9kZSIsImVuYWJsZWpzYXBpIiwiaHRtbDUiLCJwYXJhbVBsYWNlIiwidmltZW8iLCJzaG93X3RpdGxlIiwic2hvd19ieWxpbmUiLCJzaG93X3BvcnRyYWl0IiwiZnVsbHNjcmVlbiIsImluc3RhZ3JhbSIsImdtYXBfcGxhY2UiLCJnbWFwX3NlYXJjaCIsInVybFBhcmFtcyIsInBhcmFtT2JqIiwicHJvdmlkZXIiLCJwcm92aWRlck5hbWUiLCJwcm92aWRlck9wdHMiLCJwMSIsInMiLCJvcmlnU3JjIiwiY29udGVudFNvdXJjZSIsIlZpZGVvQVBJTG9hZGVyIiwiY2xhc3MiLCJsb2FkaW5nIiwibG9hZGVkIiwidmVuZG9yIiwic2NyaXB0IiwiX3RoaXMiLCJvbllvdVR1YmVJZnJhbWVBUElSZWFkeSIsIllUIiwiUGxheWVyIiwib25TdGF0ZUNoYW5nZSIsIlZpbWVvIiwiYWZ0ZXJTaG93LmZiIiwiZ2V0UG9pbnRlclhZIiwicmVzdWx0IiwicG9pbnQyIiwicG9pbnQxIiwid2hhdCIsImlzQ2xpY2thYmxlIiwib25jbGljayIsImF0dHMiLCJzdWJzdHIiLCJpc1Njcm9sbGFibGUiLCJvdmVyZmxvd1kiLCJvdmVyZmxvd1giLCJob3Jpem9udGFsIiwic2Nyb2xsV2lkdGgiLCIkYmciLCJiZyIsIiRzdGFnZSIsInByb3h5IiwidGFwcGVkIiwib250b3VjaHN0YXJ0IiwiaXNUb3VjaERldmljZSIsInJlYWxQb2ludHMiLCJzdGFydFBvaW50cyIsInN0YXJ0RXZlbnQiLCJjYW5UYXAiLCJpc1Bhbm5pbmciLCJpc1N3aXBpbmciLCJpc1pvb21pbmciLCJzdGFydFRpbWUiLCJkaXN0YW5jZVgiLCJkaXN0YW5jZVkiLCJjb250ZW50TGFzdFBvcyIsImNvbnRlbnRTdGFydFBvcyIsInNsaWRlclN0YXJ0UG9zIiwib25zY3JvbGwiLCJjZW50ZXJQb2ludFN0YXJ0WCIsImNlbnRlclBvaW50U3RhcnRZIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRYIiwicGVyY2VudGFnZU9mSW1hZ2VBdFBpbmNoUG9pbnRZIiwic3RhcnREaXN0YW5jZUJldHdlZW5GaW5nZXJzIiwib250b3VjaG1vdmUiLCJuZXdQb2ludHMiLCJvblN3aXBlIiwib25QYW4iLCJvblpvb20iLCJvbnRvdWNoZW5kIiwiYW5nbGUiLCJzd2lwaW5nIiwic2xpZGVyTGFzdFBvcyIsInRyYW5zaXRpb24tZHVyYXRpb24iLCJsaW1pdE1vdmVtZW50IiwiY3VycmVudE9mZnNldFgiLCJjdXJyZW50T2Zmc2V0WSIsImN1cnJlbnRXaWR0aCIsImN1cnJlbnRIZWlnaHQiLCJuZXdPZmZzZXRYIiwibmV3T2Zmc2V0WSIsIm1pblRyYW5zbGF0ZVgiLCJtaW5UcmFuc2xhdGVZIiwibWF4VHJhbnNsYXRlWCIsIm1heFRyYW5zbGF0ZVkiLCJsaW1pdFBvc2l0aW9uIiwibmV3V2lkdGgiLCJwaW5jaFJhdGlvIiwidHJhbnNsYXRlRnJvbVpvb21pbmdYIiwidHJhbnNsYXRlRnJvbVpvb21pbmdZIiwiY2VudGVyUG9pbnRFbmRYIiwiY2VudGVyUG9pbnRFbmRZIiwidHJhbnNsYXRlRnJvbVRyYW5zbGF0aW5nWCIsInBhbm5pbmciLCJ6b29taW5nIiwiZW5kUG9pbnRzIiwiZE1zIiwib25UYXAiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJlbmRQYW5uaW5nIiwiZW5kWm9vbWluZyIsImVuZFN3aXBpbmciLCJjYW5BZHZhbmNlIiwicmVzZXQiLCJwcm9jZXNzIiwicHJlZml4IiwiYWN0aW9uIiwidGFwWCIsInRhcFkiLCJ3aGVyZSIsImFkZEJhY2siLCJ0aW1lciIsIiRidXR0b24iLCIkcHJvZ3Jlc3MiLCJpbm5lciIsImNsZWFyIiwib25Jbml0LmZiIiwiYmVmb3JlU2hvdy5mYiIsImFmdGVyS2V5ZG93bi5mYiIsImtleXByZXNzIiwiYmVmb3JlQ2xvc2UuZmIgb25EZWFjdGl2YXRlLmZiIiwiaGlkZGVuIiwiRnVsbFNjcmVlbiIsImZuTWFwIiwicmVxdWVzdCIsInJlcXVlc3RGdWxsc2NyZWVuIiwiQUxMT1dfS0VZQk9BUkRfSU5QVVQiLCJleGl0IiwiZXhpdEZ1bGxzY3JlZW4iLCJpc0Z1bGxzY3JlZW4iLCJCb29sZWFuIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsImZ1bGxzY3JlZW5jaGFuZ2UiLCJiZWZvcmVDbG9zZS5mYiIsIkNMQVNTIiwiQ0xBU1NfQUNUSVZFIiwiRmFuY3lUaHVtYnMiLCIkZ3JpZCIsIiRsaXN0IiwibGlzdCIsInRoYXQiLCJzaGFyZSIsImN1cnJlbnRIYXNoIiwiZW50aXR5TWFwIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiJiIsIjwiLCI+IiwiXCIiLCInIiwiLyIsImAiLCI9IiwiU3RyaW5nIiwic2hhcmVJbnN0YW5jZSIsInNoYXJlQ3VycmVudCIsInBhcnNlVXJsIiwiZ2FsbGVyeSIsInRyaWdnZXJGcm9tVXJsIiwiZXNjYXBlU2VsZWN0b3IiLCJnZXRHYWxsZXJ5SUQiLCJzZWwiLCJjaCIsImFzQ29kZVBvaW50IiwiY2hhckNvZGVBdCIsIm9yaWdIYXNoIiwiaGFzaFRpbWVyIiwidGl0bGUiLCJzZWFyY2giLCJoYXNDcmVhdGVkSGlzdG9yeSIsImJhY2siLCJmYiIsInJldmVyc2UiLCJ0bXAiLCJjdXJyVGltZSJdLCJtYXBwaW5ncyI6IkNBWUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxvQkFBQUMsT0FBQUEsT0FBQUQsUUFBQUQsSUFDQSxtQkFBQUcsUUFBQUEsT0FBQUMsSUFBQUQsT0FBQUgsSUFDQUQsRUFBQUEsR0FBQU0sTUFBQUMsT0FBQU4sSUFIQSxDQUlBTyxLQUFBLHdCQWFBLElBQUFDLEVBQUEsb0JBQUFDLFNBQUEsQ0FDQUMsS0FBQSxHQUNBQyxpQkFBQSxhQUNBQyxvQkFBQSxhQUNBQyxjQUFBLENBQ0FDLEtBQUEsYUFDQUMsU0FBQSxJQUVBQyxjQUFBLFdBQ0EsT0FBQSxNQUVBQyxpQkFBQSxXQUNBLE1BQUEsSUFFQUMsZUFBQSxXQUNBLE9BQUEsTUFFQUMsWUFBQSxXQUNBLE1BQUEsQ0FDQUMsVUFBQSxlQUdBQyxjQUFBLFdBQ0EsTUFBQSxDQUNBQyxTQUFB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QUFBNC9CLE1BQUF2dkMsT0FBQSxJQUFBLElBQUEwekIsRUFBQXpsQixLQUFBODlCLE9BQUEsU0FBQXJZLEVBQUF6bEIsS0FBQTg5QixPQUFBLFVBQUFyWSxFQUFBNVAsT0FJQWhnQixFQUFBMGYsaUJBQ0ExZixFQUFBNmhCLGtCQUVBK04sRUFBQWtmLE9BQUEvd0MsU0FBQSx1QkFJQWlDLEVBQUFBLEVBQUE4ZixlQUFBOWYsRUFFQWdqRCxFQUFBbnNCLEVBQUEsTUFJQUEsRUFBQW1zQixFQUVBbjNDLElBQUE3TCxFQUFBMnRCLFNBQUEzdEIsRUFBQTR0QixRQUFBNXRCLEVBQUF1dEIsYUFBQXZ0QixFQUFBd0IsUUFBQSxFQUFBLE9BQUEsc0JBOUJBLENBa0NBMUgsU0FBQWk5QyIsImZpbGUiOiJwbHVnaW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTd2lwZXIgNC41LjFcbiAqIE1vc3QgbW9kZXJuIG1vYmlsZSB0b3VjaCBzbGlkZXIgYW5kIGZyYW1ld29yayB3aXRoIGhhcmR3YXJlIGFjY2VsZXJhdGVkIHRyYW5zaXRpb25zXG4gKiBodHRwOi8vd3d3LmlkYW5nZXJvLnVzL3N3aXBlci9cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDE5IFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IFNlcHRlbWJlciAxMywgMjAxOVxuICovXG5cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuU3dpcGVyID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIFNTUiBXaW5kb3cgMS4wLjFcbiAgICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAgICpcbiAgICogQ29weXJpZ2h0IDIwMTgsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gICAqXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICAgKlxuICAgKiBSZWxlYXNlZCBvbjogSnVseSAxOCwgMjAxOFxuICAgKi9cbiAgdmFyIGRvYyA9ICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSA/IHtcbiAgICBib2R5OiB7fSxcbiAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHt9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgIGJsdXI6IGZ1bmN0aW9uIGJsdXIoKSB7fSxcbiAgICAgIG5vZGVOYW1lOiAnJyxcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24gZ2V0RWxlbWVudEJ5SWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbiBjcmVhdGVFdmVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGluaXRFdmVudDogZnVuY3Rpb24gaW5pdEV2ZW50KCkge30sXG4gICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24gY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgc2V0QXR0cmlidXRlOiBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IGZ1bmN0aW9uIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBsb2NhdGlvbjogeyBoYXNoOiAnJyB9LFxuICB9IDogZG9jdW1lbnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICB2YXIgd2luID0gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSA/IHtcbiAgICBkb2N1bWVudDogZG9jLFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgdXNlckFnZW50OiAnJyxcbiAgICB9LFxuICAgIGxvY2F0aW9uOiB7fSxcbiAgICBoaXN0b3J5OiB7fSxcbiAgICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gICAgZ2V0Q29tcHV0ZWRTdHlsZTogZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGdldFByb3BlcnR5VmFsdWU6IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9LFxuICAgIEltYWdlOiBmdW5jdGlvbiBJbWFnZSgpIHt9LFxuICAgIERhdGU6IGZ1bmN0aW9uIERhdGUoKSB7fSxcbiAgICBzY3JlZW46IHt9LFxuICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIHNldFRpbWVvdXQoKSB7fSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIGNsZWFyVGltZW91dCgpIHt9LFxuICB9IDogd2luZG93OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgLyoqXG4gICAqIERvbTcgMi4xLjNcbiAgICogTWluaW1hbGlzdGljIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgRE9NIG1hbmlwdWxhdGlvbiwgd2l0aCBhIGpRdWVyeS1jb21wYXRpYmxlIEFQSVxuICAgKiBodHRwOi8vZnJhbWV3b3JrNy5pby9kb2NzL2RvbS5odG1sXG4gICAqXG4gICAqIENvcHlyaWdodCAyMDE5LCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICAgKiBUaGUgaURhbmdlcm8udXNcbiAgICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9cbiAgICpcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUXG4gICAqXG4gICAqIFJlbGVhc2VkIG9uOiBGZWJydWFyeSAxMSwgMjAxOVxuICAgKi9cblxuICB2YXIgRG9tNyA9IGZ1bmN0aW9uIERvbTcoYXJyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vIENyZWF0ZSBhcnJheS1saWtlIG9iamVjdFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzZWxmW2ldID0gYXJyW2ldO1xuICAgIH1cbiAgICBzZWxmLmxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgLy8gUmV0dXJuIGNvbGxlY3Rpb24gd2l0aCBtZXRob2RzXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgaWYgKHNlbGVjdG9yICYmICFjb250ZXh0KSB7XG4gICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIC8vIFN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGVscztcbiAgICAgICAgdmFyIHRlbXBQYXJlbnQ7XG4gICAgICAgIHZhciBodG1sID0gc2VsZWN0b3IudHJpbSgpO1xuICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICAgICAgdmFyIHRvQ3JlYXRlID0gJ2Rpdic7XG4gICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPGxpJykgPT09IDApIHsgdG9DcmVhdGUgPSAndWwnOyB9XG4gICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRyJykgPT09IDApIHsgdG9DcmVhdGUgPSAndGJvZHknOyB9XG4gICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRkJykgPT09IDAgfHwgaHRtbC5pbmRleE9mKCc8dGgnKSA9PT0gMCkgeyB0b0NyZWF0ZSA9ICd0cic7IH1cbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGJvZHknKSA9PT0gMCkgeyB0b0NyZWF0ZSA9ICd0YWJsZSc7IH1cbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8b3B0aW9uJykgPT09IDApIHsgdG9DcmVhdGUgPSAnc2VsZWN0JzsgfVxuICAgICAgICAgIHRlbXBQYXJlbnQgPSBkb2MuY3JlYXRlRWxlbWVudCh0b0NyZWF0ZSk7XG4gICAgICAgICAgdGVtcFBhcmVudC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY29udGV4dCAmJiBzZWxlY3RvclswXSA9PT0gJyMnICYmICFzZWxlY3Rvci5tYXRjaCgvWyAuPD46fl0vKSkge1xuICAgICAgICAgICAgLy8gUHVyZSBJRCBzZWxlY3RvclxuICAgICAgICAgICAgZWxzID0gW2RvYy5nZXRFbGVtZW50QnlJZChzZWxlY3Rvci50cmltKCkuc3BsaXQoJyMnKVsxXSldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBPdGhlciBzZWxlY3RvcnNcbiAgICAgICAgICAgIGVscyA9IChjb250ZXh0IHx8IGRvYykucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvci50cmltKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoZWxzW2ldKSB7IGFyci5wdXNoKGVsc1tpXSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbiB8fCBzZWxlY3RvciA9PT0gZG9jKSB7XG4gICAgICAgIC8vIE5vZGUvZWxlbWVudFxuICAgICAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdG9yLmxlbmd0aCA+IDAgJiYgc2VsZWN0b3JbMF0ubm9kZVR5cGUpIHtcbiAgICAgICAgLy8gQXJyYXkgb2YgZWxlbWVudHMgb3IgaW5zdGFuY2Ugb2YgRG9tXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBzZWxlY3Rvci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGFyci5wdXNoKHNlbGVjdG9yW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcoYXJyKTtcbiAgfVxuXG4gICQuZm4gPSBEb203LnByb3RvdHlwZTtcbiAgJC5DbGFzcyA9IERvbTc7XG4gICQuRG9tNyA9IERvbTc7XG5cbiAgZnVuY3Rpb24gdW5pcXVlKGFycikge1xuICAgIHZhciB1bmlxdWVBcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAodW5pcXVlQXJyYXkuaW5kZXhPZihhcnJbaV0pID09PSAtMSkgeyB1bmlxdWVBcnJheS5wdXNoKGFycltpXSk7IH1cbiAgICB9XG4gICAgcmV0dXJuIHVuaXF1ZUFycmF5O1xuICB9XG5cbiAgLy8gQ2xhc3NlcyBhbmQgYXR0cmlidXRlc1xuICBmdW5jdGlvbiBhZGRDbGFzcyhjbGFzc05hbWUpIHtcbiAgICBpZiAodHlwZW9mIGNsYXNzTmFtZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgeyB0aGlzW2pdLmNsYXNzTGlzdC5hZGQoY2xhc3Nlc1tpXSk7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgdmFyIGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXNbal0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzW2pdLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHsgdGhpc1tqXS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXNbaV0pOyB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgIGlmICghdGhpc1swXSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICByZXR1cm4gdGhpc1swXS5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTtcbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcbiAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgeyB0aGlzW2pdLmNsYXNzTGlzdC50b2dnbGUoY2xhc3Nlc1tpXSk7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gYXR0cihhdHRycywgdmFsdWUpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgYXR0cnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBHZXQgYXR0clxuICAgICAgaWYgKHRoaXNbMF0pIHsgcmV0dXJuIHRoaXNbMF0uZ2V0QXR0cmlidXRlKGF0dHJzKTsgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBTZXQgYXR0cnNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChhcmd1bWVudHMkMS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJzLCB2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGZvciAodmFyIGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGZ1bmN0aW9uIHJlbW92ZUF0dHIoYXR0cikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIGRhdGEoa2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbDtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZWwgPSB0aGlzWzBdO1xuICAgICAgLy8gR2V0IHZhbHVlXG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgaWYgKGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UgJiYgKGtleSBpbiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlKSkge1xuICAgICAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGF0YUtleSA9IGVsLmdldEF0dHJpYnV0ZSgoXCJkYXRhLVwiICsga2V5KSk7XG4gICAgICAgIGlmIChkYXRhS2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGRhdGFLZXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gU2V0IHZhbHVlXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBlbCA9IHRoaXNbaV07XG4gICAgICBpZiAoIWVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpIHsgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9OyB9XG4gICAgICBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy8gVHJhbnNmb3Jtc1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGVsU3R5bGUgPSB0aGlzW2ldLnN0eWxlO1xuICAgICAgZWxTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICBlbFN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gdHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGlmICh0eXBlb2YgZHVyYXRpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uICsgXCJtc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGVsU3R5bGUgPSB0aGlzW2ldLnN0eWxlO1xuICAgICAgZWxTdHlsZS53ZWJraXRUcmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgIGVsU3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8vIEV2ZW50c1xuICBmdW5jdGlvbiBvbigpIHtcbiAgICB2YXIgYXNzaWduO1xuXG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuICAgIHZhciBldmVudFR5cGUgPSBhcmdzWzBdO1xuICAgIHZhciB0YXJnZXRTZWxlY3RvciA9IGFyZ3NbMV07XG4gICAgdmFyIGxpc3RlbmVyID0gYXJnc1syXTtcbiAgICB2YXIgY2FwdHVyZSA9IGFyZ3NbM107XG4gICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAoYXNzaWduID0gYXJncywgZXZlbnRUeXBlID0gYXNzaWduWzBdLCBsaXN0ZW5lciA9IGFzc2lnblsxXSwgY2FwdHVyZSA9IGFzc2lnblsyXSk7XG4gICAgICB0YXJnZXRTZWxlY3RvciA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKCFjYXB0dXJlKSB7IGNhcHR1cmUgPSBmYWxzZTsgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgIGlmICghdGFyZ2V0KSB7IHJldHVybjsgfVxuICAgICAgdmFyIGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG4gICAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgICAgfVxuICAgICAgaWYgKCQodGFyZ2V0KS5pcyh0YXJnZXRTZWxlY3RvcikpIHsgbGlzdGVuZXIuYXBwbHkodGFyZ2V0LCBldmVudERhdGEpOyB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFyIHBhcmVudHMgPSAkKHRhcmdldCkucGFyZW50cygpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgcGFyZW50cy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICAgIGlmICgkKHBhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgeyBsaXN0ZW5lci5hcHBseShwYXJlbnRzW2tdLCBldmVudERhdGEpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgICAgdmFyIGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG4gICAgICBpZiAoZXZlbnREYXRhLmluZGV4T2YoZSkgPCAwKSB7XG4gICAgICAgIGV2ZW50RGF0YS51bnNoaWZ0KGUpO1xuICAgICAgfVxuICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgZXZlbnREYXRhKTtcbiAgICB9XG4gICAgdmFyIGV2ZW50cyA9IGV2ZW50VHlwZS5zcGxpdCgnICcpO1xuICAgIHZhciBqO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGVsID0gdGhpc1tpXTtcbiAgICAgIGlmICghdGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHZhciBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgICBpZiAoIWVsLmRvbTdMaXN0ZW5lcnMpIHsgZWwuZG9tN0xpc3RlbmVycyA9IHt9OyB9XG4gICAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzW2V2ZW50XSkgeyBlbC5kb203TGlzdGVuZXJzW2V2ZW50XSA9IFtdOyB9XG4gICAgICAgICAgZWwuZG9tN0xpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICBwcm94eUxpc3RlbmVyOiBoYW5kbGVFdmVudCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVFdmVudCwgY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExpdmUgZXZlbnRzXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB2YXIgZXZlbnQkMSA9IGV2ZW50c1tqXTtcbiAgICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzKSB7IGVsLmRvbTdMaXZlTGlzdGVuZXJzID0ge307IH1cbiAgICAgICAgICBpZiAoIWVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50JDFdKSB7IGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50JDFdID0gW107IH1cbiAgICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudCQxXS5wdXNoKHtcbiAgICAgICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lcixcbiAgICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUxpdmVFdmVudCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50JDEsIGhhbmRsZUxpdmVFdmVudCwgY2FwdHVyZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gb2ZmKCkge1xuICAgIHZhciBhc3NpZ247XG5cbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG4gICAgdmFyIGV2ZW50VHlwZSA9IGFyZ3NbMF07XG4gICAgdmFyIHRhcmdldFNlbGVjdG9yID0gYXJnc1sxXTtcbiAgICB2YXIgbGlzdGVuZXIgPSBhcmdzWzJdO1xuICAgIHZhciBjYXB0dXJlID0gYXJnc1szXTtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIChhc3NpZ24gPSBhcmdzLCBldmVudFR5cGUgPSBhc3NpZ25bMF0sIGxpc3RlbmVyID0gYXNzaWduWzFdLCBjYXB0dXJlID0gYXNzaWduWzJdKTtcbiAgICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoIWNhcHR1cmUpIHsgY2FwdHVyZSA9IGZhbHNlOyB9XG5cbiAgICB2YXIgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBldmVudCA9IGV2ZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzW2pdO1xuICAgICAgICB2YXIgaGFuZGxlcnMgPSAodm9pZCAwKTtcbiAgICAgICAgaWYgKCF0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGlzdGVuZXJzKSB7XG4gICAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXRTZWxlY3RvciAmJiBlbC5kb203TGl2ZUxpc3RlbmVycykge1xuICAgICAgICAgIGhhbmRsZXJzID0gZWwuZG9tN0xpdmVMaXN0ZW5lcnNbZXZlbnRdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVycyAmJiBoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKHZhciBrID0gaGFuZGxlcnMubGVuZ3RoIC0gMTsgayA+PSAwOyBrIC09IDEpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVyID0gaGFuZGxlcnNba107XG4gICAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgICAgaGFuZGxlcnMuc3BsaWNlKGssIDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLnByb3h5TGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIHRyaWdnZXIoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIGV2ZW50cyA9IGFyZ3NbMF0uc3BsaXQoJyAnKTtcbiAgICB2YXIgZXZlbnREYXRhID0gYXJnc1sxXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGV2ZW50ID0gZXZlbnRzW2ldO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHZhciBlbCA9IHRoaXNbal07XG4gICAgICAgIHZhciBldnQgPSAodm9pZCAwKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBldnQgPSBuZXcgd2luLkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgICBkZXRhaWw6IGV2ZW50RGF0YSxcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXZ0ID0gZG9jLmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgIGV2dC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGV2dC5kZXRhaWwgPSBldmVudERhdGE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGVsLmRvbTdFdmVudERhdGEgPSBhcmdzLmZpbHRlcihmdW5jdGlvbiAoZGF0YSwgZGF0YUluZGV4KSB7IHJldHVybiBkYXRhSW5kZXggPiAwOyB9KTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICAgIGRlbGV0ZSBlbC5kb203RXZlbnREYXRhO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gICAgdmFyIGV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gICAgdmFyIGRvbSA9IHRoaXM7XG4gICAgdmFyIGk7XG4gICAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSB7IHJldHVybjsgfVxuICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBlKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgZG9tLm9mZihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBkb20ub24oZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBvdXRlcldpZHRoKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICB2YXIgc3R5bGVzID0gdGhpcy5zdHlsZXMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0V2lkdGggKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSkgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldFdpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBvdXRlckhlaWdodChpbmNsdWRlTWFyZ2lucykge1xuICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBvZmZzZXQoKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICAgIHZhciBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gICAgICB2YXIgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gICAgICB2YXIgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gICAgICB2YXIgc2Nyb2xsVG9wID0gZWwgPT09IHdpbiA/IHdpbi5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICAgICAgdmFyIHNjcm9sbExlZnQgPSBlbCA9PT0gd2luID8gd2luLnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiAoYm94LnRvcCArIHNjcm9sbFRvcCkgLSBjbGllbnRUb3AsXG4gICAgICAgIGxlZnQ6IChib3gubGVmdCArIHNjcm9sbExlZnQpIC0gY2xpZW50TGVmdCxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gc3R5bGVzKCkge1xuICAgIGlmICh0aGlzWzBdKSB7IHJldHVybiB3aW4uZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKTsgfVxuICAgIHJldHVybiB7fTtcbiAgfVxuICBmdW5jdGlvbiBjc3MocHJvcHMsIHZhbHVlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0aGlzWzBdKSB7IHJldHVybiB3aW4uZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BzKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzW2ldLnN0eWxlW3Byb3BdID0gcHJvcHNbcHJvcF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgY29sbGVjdGlvbiBwYXNzaW5nIGVsZW1lbnRzIHRvIGBjYWxsYmFja2BcbiAgZnVuY3Rpb24gZWFjaChjYWxsYmFjaykge1xuICAgIC8vIERvbid0IGJvdGhlciBjb250aW51aW5nIHdpdGhvdXQgYSBjYWxsYmFja1xuICAgIGlmICghY2FsbGJhY2spIHsgcmV0dXJuIHRoaXM7IH1cbiAgICAvLyBJdGVyYXRlIG92ZXIgdGhlIGN1cnJlbnQgY29sbGVjdGlvblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgLy8gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNbaV0sIGksIHRoaXNbaV0pID09PSBmYWxzZSkge1xuICAgICAgICAvLyBFbmQgdGhlIGxvb3AgZWFybHlcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJldHVybiBgdGhpc2AgdG8gYWxsb3cgY2hhaW5lZCBET00gb3BlcmF0aW9uc1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmdW5jdGlvbiBodG1sKGh0bWwpIHtcbiAgICBpZiAodHlwZW9mIGh0bWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0uaW5uZXJIVE1MIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpc1tpXS5pbm5lckhUTUwgPSBodG1sO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgZnVuY3Rpb24gdGV4dCh0ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHRoaXNbMF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZnVuY3Rpb24gaXMoc2VsZWN0b3IpIHtcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgIHZhciBjb21wYXJlV2l0aDtcbiAgICB2YXIgaTtcbiAgICBpZiAoIWVsIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmIChlbC5tYXRjaGVzKSB7IHJldHVybiBlbC5tYXRjaGVzKHNlbGVjdG9yKTsgfVxuICAgICAgZWxzZSBpZiAoZWwud2Via2l0TWF0Y2hlc1NlbGVjdG9yKSB7IHJldHVybiBlbC53ZWJraXRNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOyB9XG4gICAgICBlbHNlIGlmIChlbC5tc01hdGNoZXNTZWxlY3RvcikgeyByZXR1cm4gZWwubXNNYXRjaGVzU2VsZWN0b3Ioc2VsZWN0b3IpOyB9XG5cbiAgICAgIGNvbXBhcmVXaXRoID0gJChzZWxlY3Rvcik7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IgPT09IGRvYykgeyByZXR1cm4gZWwgPT09IGRvYzsgfVxuICAgIGVsc2UgaWYgKHNlbGVjdG9yID09PSB3aW4pIHsgcmV0dXJuIGVsID09PSB3aW47IH1cblxuICAgIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgIGNvbXBhcmVXaXRoID0gc2VsZWN0b3Iubm9kZVR5cGUgPyBbc2VsZWN0b3JdIDogc2VsZWN0b3I7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29tcGFyZVdpdGgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gaW5kZXgoKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpc1swXTtcbiAgICB2YXIgaTtcbiAgICBpZiAoY2hpbGQpIHtcbiAgICAgIGkgPSAwO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIHsgaSArPSAxOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgZnVuY3Rpb24gZXEoaW5kZXgpIHtcbiAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gdGhpczsgfVxuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgICB2YXIgcmV0dXJuSW5kZXg7XG4gICAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG4gICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgcmV0dXJuSW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICAgIGlmIChyZXR1cm5JbmRleCA8IDApIHsgcmV0dXJuIG5ldyBEb203KFtdKTsgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFt0aGlzW3JldHVybkluZGV4XV0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcoW3RoaXNbaW5kZXhdXSk7XG4gIH1cbiAgZnVuY3Rpb24gYXBwZW5kKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciBuZXdDaGlsZDtcblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYXJncy5sZW5ndGg7IGsgKz0gMSkge1xuICAgICAgbmV3Q2hpbGQgPSBhcmdzW2tdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdmFyIHRlbXBEaXYgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcbiAgICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tNykge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIHByZXBlbmQobmV3Q2hpbGQpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgajtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHRlbXBEaXYgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG4gICAgICAgIGZvciAoaiA9IHRlbXBEaXYuY2hpbGROb2Rlcy5sZW5ndGggLSAxOyBqID49IDA7IGogLT0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGRbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IERvbTcoW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKSB7IHJldHVybiBuZXcgRG9tNyhbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTsgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0QWxsKHNlbGVjdG9yKSB7XG4gICAgdmFyIG5leHRFbHMgPSBbXTtcbiAgICB2YXIgZWwgPSB0aGlzWzBdO1xuICAgIGlmICghZWwpIHsgcmV0dXJuIG5ldyBEb203KFtdKTsgfVxuICAgIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgIHZhciBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKCQobmV4dCkuaXMoc2VsZWN0b3IpKSB7IG5leHRFbHMucHVzaChuZXh0KTsgfVxuICAgICAgfSBlbHNlIHsgbmV4dEVscy5wdXNoKG5leHQpOyB9XG4gICAgICBlbCA9IG5leHQ7XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhuZXh0RWxzKTtcbiAgfVxuICBmdW5jdGlvbiBwcmV2KHNlbGVjdG9yKSB7XG4gICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGVsID0gdGhpc1swXTtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiBuZXcgRG9tNyhbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7IHJldHVybiBuZXcgRG9tNyhbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pOyB9XG4gICAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICB9XG4gIGZ1bmN0aW9uIHByZXZBbGwoc2VsZWN0b3IpIHtcbiAgICB2YXIgcHJldkVscyA9IFtdO1xuICAgIHZhciBlbCA9IHRoaXNbMF07XG4gICAgaWYgKCFlbCkgeyByZXR1cm4gbmV3IERvbTcoW10pOyB9XG4gICAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgIHZhciBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHByZXYpLmlzKHNlbGVjdG9yKSkgeyBwcmV2RWxzLnB1c2gocHJldik7IH1cbiAgICAgIH0gZWxzZSB7IHByZXZFbHMucHVzaChwcmV2KTsgfVxuICAgICAgZWwgPSBwcmV2O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERvbTcocHJldkVscyk7XG4gIH1cbiAgZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gICAgdmFyIHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBpZiAoJCh0aGlzW2ldLnBhcmVudE5vZGUpLmlzKHNlbGVjdG9yKSkgeyBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAkKHVuaXF1ZShwYXJlbnRzKSk7XG4gIH1cbiAgZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICAgIHZhciBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBwYXJlbnQgPSB0aGlzW2ldLnBhcmVudE5vZGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgaWYgKCQocGFyZW50KS5pcyhzZWxlY3RvcikpIHsgcGFyZW50cy5wdXNoKHBhcmVudCk7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICQodW5pcXVlKHBhcmVudHMpKTtcbiAgfVxuICBmdW5jdGlvbiBjbG9zZXN0KHNlbGVjdG9yKSB7XG4gICAgdmFyIGNsb3Nlc3QgPSB0aGlzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gICAgfVxuICAgIGlmICghY2xvc2VzdC5pcyhzZWxlY3RvcikpIHtcbiAgICAgIGNsb3Nlc3QgPSBjbG9zZXN0LnBhcmVudHMoc2VsZWN0b3IpLmVxKDApO1xuICAgIH1cbiAgICByZXR1cm4gY2xvc2VzdDtcbiAgfVxuICBmdW5jdGlvbiBmaW5kKHNlbGVjdG9yKSB7XG4gICAgdmFyIGZvdW5kRWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZvdW5kLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgRG9tNyhmb3VuZEVsZW1lbnRzKTtcbiAgfVxuICBmdW5jdGlvbiBjaGlsZHJlbihzZWxlY3Rvcikge1xuICAgIHZhciBjaGlsZHJlbiA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgY2hpbGROb2RlcyA9IHRoaXNbaV0uY2hpbGROb2RlcztcblxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgICBpZiAoY2hpbGROb2Rlc1tqXS5ub2RlVHlwZSA9PT0gMSkgeyBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pOyB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGROb2Rlc1tqXS5ub2RlVHlwZSA9PT0gMSAmJiAkKGNoaWxkTm9kZXNbal0pLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBEb203KHVuaXF1ZShjaGlsZHJlbikpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUpIHsgdGhpc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbaV0pOyB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGZ1bmN0aW9uIGFkZCgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICB2YXIgZG9tID0gdGhpcztcbiAgICB2YXIgaTtcbiAgICB2YXIgajtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIHRvQWRkID0gJChhcmdzW2ldKTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB0b0FkZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBkb21bZG9tLmxlbmd0aF0gPSB0b0FkZFtqXTtcbiAgICAgICAgZG9tLmxlbmd0aCArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZG9tO1xuICB9XG5cbiAgdmFyIE1ldGhvZHMgPSB7XG4gICAgYWRkQ2xhc3M6IGFkZENsYXNzLFxuICAgIHJlbW92ZUNsYXNzOiByZW1vdmVDbGFzcyxcbiAgICBoYXNDbGFzczogaGFzQ2xhc3MsXG4gICAgdG9nZ2xlQ2xhc3M6IHRvZ2dsZUNsYXNzLFxuICAgIGF0dHI6IGF0dHIsXG4gICAgcmVtb3ZlQXR0cjogcmVtb3ZlQXR0cixcbiAgICBkYXRhOiBkYXRhLFxuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgIHRyYW5zaXRpb246IHRyYW5zaXRpb24sXG4gICAgb246IG9uLFxuICAgIG9mZjogb2ZmLFxuICAgIHRyaWdnZXI6IHRyaWdnZXIsXG4gICAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCxcbiAgICBvdXRlcldpZHRoOiBvdXRlcldpZHRoLFxuICAgIG91dGVySGVpZ2h0OiBvdXRlckhlaWdodCxcbiAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICBjc3M6IGNzcyxcbiAgICBlYWNoOiBlYWNoLFxuICAgIGh0bWw6IGh0bWwsXG4gICAgdGV4dDogdGV4dCxcbiAgICBpczogaXMsXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVxOiBlcSxcbiAgICBhcHBlbmQ6IGFwcGVuZCxcbiAgICBwcmVwZW5kOiBwcmVwZW5kLFxuICAgIG5leHQ6IG5leHQsXG4gICAgbmV4dEFsbDogbmV4dEFsbCxcbiAgICBwcmV2OiBwcmV2LFxuICAgIHByZXZBbGw6IHByZXZBbGwsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgcGFyZW50czogcGFyZW50cyxcbiAgICBjbG9zZXN0OiBjbG9zZXN0LFxuICAgIGZpbmQ6IGZpbmQsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIHJlbW92ZTogcmVtb3ZlLFxuICAgIGFkZDogYWRkLFxuICAgIHN0eWxlczogc3R5bGVzLFxuICB9O1xuXG4gIE9iamVjdC5rZXlzKE1ldGhvZHMpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICAkLmZuW21ldGhvZE5hbWVdID0gJC5mblttZXRob2ROYW1lXSB8fCBNZXRob2RzW21ldGhvZE5hbWVdO1xuICB9KTtcblxuICB2YXIgVXRpbHMgPSB7XG4gICAgZGVsZXRlUHJvcHM6IGZ1bmN0aW9uIGRlbGV0ZVByb3BzKG9iaikge1xuICAgICAgdmFyIG9iamVjdCA9IG9iajtcbiAgICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gbm8gZ2V0dGVyIGZvciBvYmplY3RcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlbGV0ZSBvYmplY3Rba2V5XTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBuZXh0VGljazogZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gICAgICBpZiAoIGRlbGF5ID09PSB2b2lkIDAgKSBkZWxheSA9IDA7XG5cbiAgICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG4gICAgfSxcbiAgICBub3c6IGZ1bmN0aW9uIG5vdygpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgIH0sXG4gICAgZ2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMpIHtcbiAgICAgIGlmICggYXhpcyA9PT0gdm9pZCAwICkgYXhpcyA9ICd4JztcblxuICAgICAgdmFyIG1hdHJpeDtcbiAgICAgIHZhciBjdXJUcmFuc2Zvcm07XG4gICAgICB2YXIgdHJhbnNmb3JtTWF0cml4O1xuXG4gICAgICB2YXIgY3VyU3R5bGUgPSB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG5cbiAgICAgIGlmICh3aW4uV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5yZXBsYWNlKCcsJywgJy4nKTsgfSkuam9pbignLCAnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgICAgICB0cmFuc2Zvcm1NYXRyaXggPSBuZXcgd2luLldlYktpdENTU01hdHJpeChjdXJUcmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogY3VyVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgICAgICBtYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgICAgIGlmICh3aW4uV2ViS2l0Q1NTTWF0cml4KSB7IGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7IH1cbiAgICAgICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIHsgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTsgfVxuICAgICAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgICAgZWxzZSB7IGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTsgfVxuICAgICAgfVxuICAgICAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgICBpZiAod2luLldlYktpdENTU01hdHJpeCkgeyBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyOyB9XG4gICAgICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSB7IGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7IH1cbiAgICAgICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgICAgIGVsc2UgeyBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbiAgICB9LFxuICAgIHBhcnNlVXJsUXVlcnk6IGZ1bmN0aW9uIHBhcnNlVXJsUXVlcnkodXJsKSB7XG4gICAgICB2YXIgcXVlcnkgPSB7fTtcbiAgICAgIHZhciB1cmxUb1BhcnNlID0gdXJsIHx8IHdpbi5sb2NhdGlvbi5ocmVmO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgcGFyYW1zO1xuICAgICAgdmFyIHBhcmFtO1xuICAgICAgdmFyIGxlbmd0aDtcbiAgICAgIGlmICh0eXBlb2YgdXJsVG9QYXJzZSA9PT0gJ3N0cmluZycgJiYgdXJsVG9QYXJzZS5sZW5ndGgpIHtcbiAgICAgICAgdXJsVG9QYXJzZSA9IHVybFRvUGFyc2UuaW5kZXhPZignPycpID4gLTEgPyB1cmxUb1BhcnNlLnJlcGxhY2UoL1xcUypcXD8vLCAnJykgOiAnJztcbiAgICAgICAgcGFyYW1zID0gdXJsVG9QYXJzZS5zcGxpdCgnJicpLmZpbHRlcihmdW5jdGlvbiAocGFyYW1zUGFydCkgeyByZXR1cm4gcGFyYW1zUGFydCAhPT0gJyc7IH0pO1xuICAgICAgICBsZW5ndGggPSBwYXJhbXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHBhcmFtID0gcGFyYW1zW2ldLnJlcGxhY2UoLyNcXFMrL2csICcnKS5zcGxpdCgnPScpO1xuICAgICAgICAgIHF1ZXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYXJhbVswXSldID0gdHlwZW9mIHBhcmFtWzFdID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbVsxXSkgfHwgJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBxdWVyeTtcbiAgICB9LFxuICAgIGlzT2JqZWN0OiBmdW5jdGlvbiBpc09iamVjdChvKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBvLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gICAgfSxcbiAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiQxID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuJDEtLSApIGFyZ3NbIGxlbiQxIF0gPSBhcmd1bWVudHNbIGxlbiQxIF07XG5cbiAgICAgIHZhciB0byA9IE9iamVjdChhcmdzWzBdKTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3NbaV07XG4gICAgICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpO1xuICAgICAgICAgIGZvciAodmFyIG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgICAgICBpZiAoVXRpbHMuaXNPYmplY3QodG9bbmV4dEtleV0pICYmIFV0aWxzLmlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICghVXRpbHMuaXNPYmplY3QodG9bbmV4dEtleV0pICYmIFV0aWxzLmlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgICAgICBVdGlscy5leHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRvO1xuICAgIH0sXG4gIH07XG5cbiAgdmFyIFN1cHBvcnQgPSAoZnVuY3Rpb24gU3VwcG9ydCgpIHtcbiAgICB2YXIgdGVzdERpdiA9IGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICByZXR1cm4ge1xuICAgICAgdG91Y2g6ICh3aW4uTW9kZXJuaXpyICYmIHdpbi5Nb2Rlcm5penIudG91Y2ggPT09IHRydWUpIHx8IChmdW5jdGlvbiBjaGVja1RvdWNoKCkge1xuICAgICAgICByZXR1cm4gISEoKHdpbi5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAoJ29udG91Y2hzdGFydCcgaW4gd2luKSB8fCAod2luLkRvY3VtZW50VG91Y2ggJiYgZG9jIGluc3RhbmNlb2Ygd2luLkRvY3VtZW50VG91Y2gpKTtcbiAgICAgIH0oKSksXG5cbiAgICAgIHBvaW50ZXJFdmVudHM6ICEhKHdpbi5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQgfHwgd2luLlBvaW50ZXJFdmVudCB8fCAoJ21heFRvdWNoUG9pbnRzJyBpbiB3aW4ubmF2aWdhdG9yICYmIHdpbi5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSksXG4gICAgICBwcmVmaXhlZFBvaW50ZXJFdmVudHM6ICEhd2luLm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkLFxuXG4gICAgICB0cmFuc2l0aW9uOiAoZnVuY3Rpb24gY2hlY2tUcmFuc2l0aW9uKCkge1xuICAgICAgICB2YXIgc3R5bGUgPSB0ZXN0RGl2LnN0eWxlO1xuICAgICAgICByZXR1cm4gKCd0cmFuc2l0aW9uJyBpbiBzdHlsZSB8fCAnd2Via2l0VHJhbnNpdGlvbicgaW4gc3R5bGUgfHwgJ01velRyYW5zaXRpb24nIGluIHN0eWxlKTtcbiAgICAgIH0oKSksXG4gICAgICB0cmFuc2Zvcm1zM2Q6ICh3aW4uTW9kZXJuaXpyICYmIHdpbi5Nb2Rlcm5penIuY3NzdHJhbnNmb3JtczNkID09PSB0cnVlKSB8fCAoZnVuY3Rpb24gY2hlY2tUcmFuc2Zvcm1zM2QoKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRlc3REaXYuc3R5bGU7XG4gICAgICAgIHJldHVybiAoJ3dlYmtpdFBlcnNwZWN0aXZlJyBpbiBzdHlsZSB8fCAnTW96UGVyc3BlY3RpdmUnIGluIHN0eWxlIHx8ICdPUGVyc3BlY3RpdmUnIGluIHN0eWxlIHx8ICdNc1BlcnNwZWN0aXZlJyBpbiBzdHlsZSB8fCAncGVyc3BlY3RpdmUnIGluIHN0eWxlKTtcbiAgICAgIH0oKSksXG5cbiAgICAgIGZsZXhib3g6IChmdW5jdGlvbiBjaGVja0ZsZXhib3goKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRlc3REaXYuc3R5bGU7XG4gICAgICAgIHZhciBzdHlsZXMgPSAoJ2FsaWduSXRlbXMgd2Via2l0QWxpZ25JdGVtcyB3ZWJraXRCb3hBbGlnbiBtc0ZsZXhBbGlnbiBtb3pCb3hBbGlnbiB3ZWJraXRGbGV4RGlyZWN0aW9uIG1zRmxleERpcmVjdGlvbiBtb3pCb3hEaXJlY3Rpb24gbW96Qm94T3JpZW50IHdlYmtpdEJveERpcmVjdGlvbiB3ZWJraXRCb3hPcmllbnQnKS5zcGxpdCgnICcpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzdHlsZXNbaV0gaW4gc3R5bGUpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KCkpLFxuXG4gICAgICBvYnNlcnZlcjogKGZ1bmN0aW9uIGNoZWNrT2JzZXJ2ZXIoKSB7XG4gICAgICAgIHJldHVybiAoJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbiB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luKTtcbiAgICAgIH0oKSksXG5cbiAgICAgIHBhc3NpdmVMaXN0ZW5lcjogKGZ1bmN0aW9uIGNoZWNrUGFzc2l2ZUxpc3RlbmVyKCkge1xuICAgICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3RQYXNzaXZlTGlzdGVuZXInLCBudWxsLCBvcHRzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIE5vIHN1cHBvcnRcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgICAgfSgpKSxcblxuICAgICAgZ2VzdHVyZXM6IChmdW5jdGlvbiBjaGVja0dlc3R1cmVzKCkge1xuICAgICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW47XG4gICAgICB9KCkpLFxuICAgIH07XG4gIH0oKSk7XG5cbiAgdmFyIEJyb3dzZXIgPSAoZnVuY3Rpb24gQnJvd3NlcigpIHtcbiAgICBmdW5jdGlvbiBpc1NhZmFyaSgpIHtcbiAgICAgIHZhciB1YSA9IHdpbi5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gKHVhLmluZGV4T2YoJ3NhZmFyaScpID49IDAgJiYgdWEuaW5kZXhPZignY2hyb21lJykgPCAwICYmIHVhLmluZGV4T2YoJ2FuZHJvaWQnKSA8IDApO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgaXNJRTogISF3aW4ubmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC9nKSB8fCAhIXdpbi5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9NU0lFL2cpLFxuICAgICAgaXNFZGdlOiAhIXdpbi5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgICAgaXNTYWZhcmk6IGlzU2FmYXJpKCksXG4gICAgICBpc1VpV2ViVmlldzogLyhpUGhvbmV8aVBvZHxpUGFkKS4qQXBwbGVXZWJLaXQoPyEuKlNhZmFyaSkvaS50ZXN0KHdpbi5uYXZpZ2F0b3IudXNlckFnZW50KSxcbiAgICB9O1xuICB9KCkpO1xuXG4gIHZhciBTd2lwZXJDbGFzcyA9IGZ1bmN0aW9uIFN3aXBlckNsYXNzKHBhcmFtcykge1xuICAgIGlmICggcGFyYW1zID09PSB2b2lkIDAgKSBwYXJhbXMgPSB7fTtcblxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLnBhcmFtcyA9IHBhcmFtcztcblxuICAgIC8vIEV2ZW50c1xuICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzID0ge307XG5cbiAgICBpZiAoc2VsZi5wYXJhbXMgJiYgc2VsZi5wYXJhbXMub24pIHtcbiAgICAgIE9iamVjdC5rZXlzKHNlbGYucGFyYW1zLm9uKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgICAgc2VsZi5vbihldmVudE5hbWUsIHNlbGYucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBzdGF0aWNBY2Nlc3NvcnMgPSB7IGNvbXBvbmVudHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICBTd2lwZXJDbGFzcy5wcm90b3R5cGUub24gPSBmdW5jdGlvbiBvbiAoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICB2YXIgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7IHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdOyB9XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICBTd2lwZXJDbGFzcy5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UgKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBzZWxmOyB9XG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5mN3Byb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5mN3Byb3h5O1xuICAgICAgfVxuICAgIH1cbiAgICBvbmNlSGFuZGxlci5mN3Byb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH07XG5cbiAgU3dpcGVyQ2xhc3MucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIG9mZiAoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50SGFuZGxlciwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IChldmVudEhhbmRsZXIuZjdwcm94eSAmJiBldmVudEhhbmRsZXIuZjdwcm94eSA9PT0gaGFuZGxlcikpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH07XG5cbiAgU3dpcGVyQ2xhc3MucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0ICgpIHtcbiAgICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHsgcmV0dXJuIHNlbGY7IH1cbiAgICB2YXIgZXZlbnRzO1xuICAgIHZhciBkYXRhO1xuICAgIHZhciBjb250ZXh0O1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIHZhciBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHZhciBoYW5kbGVycyA9IFtdO1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgaGFuZGxlcnMucHVzaChldmVudEhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnRIYW5kbGVyKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICBTd2lwZXJDbGFzcy5wcm90b3R5cGUudXNlTW9kdWxlc1BhcmFtcyA9IGZ1bmN0aW9uIHVzZU1vZHVsZXNQYXJhbXMgKGluc3RhbmNlUGFyYW1zKSB7XG4gICAgdmFyIGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHsgcmV0dXJuOyB9XG4gICAgT2JqZWN0LmtleXMoaW5zdGFuY2UubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgdmFyIG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICAvLyBFeHRlbmQgcGFyYW1zXG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICBVdGlscy5leHRlbmQoaW5zdGFuY2VQYXJhbXMsIG1vZHVsZS5wYXJhbXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIFN3aXBlckNsYXNzLnByb3RvdHlwZS51c2VNb2R1bGVzID0gZnVuY3Rpb24gdXNlTW9kdWxlcyAobW9kdWxlc1BhcmFtcykge1xuICAgICAgaWYgKCBtb2R1bGVzUGFyYW1zID09PSB2b2lkIDAgKSBtb2R1bGVzUGFyYW1zID0ge307XG5cbiAgICB2YXIgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgeyByZXR1cm47IH1cbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVOYW1lKSB7XG4gICAgICB2YXIgbW9kdWxlID0gaW5zdGFuY2UubW9kdWxlc1ttb2R1bGVOYW1lXTtcbiAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGVzUGFyYW1zW21vZHVsZU5hbWVdIHx8IHt9O1xuICAgICAgLy8gRXh0ZW5kIGluc3RhbmNlIG1ldGhvZHMgYW5kIHByb3BzXG4gICAgICBpZiAobW9kdWxlLmluc3RhbmNlKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5pbnN0YW5jZSkuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlUHJvcE5hbWUpIHtcbiAgICAgICAgICB2YXIgbW9kdWxlUHJvcCA9IG1vZHVsZS5pbnN0YW5jZVttb2R1bGVQcm9wTmFtZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQcm9wID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wLmJpbmQoaW5zdGFuY2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnN0YW5jZVttb2R1bGVQcm9wTmFtZV0gPSBtb2R1bGVQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgICBpZiAobW9kdWxlLm9uICYmIGluc3RhbmNlLm9uKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5vbikuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlRXZlbnROYW1lKSB7XG4gICAgICAgICAgaW5zdGFuY2Uub24obW9kdWxlRXZlbnROYW1lLCBtb2R1bGUub25bbW9kdWxlRXZlbnROYW1lXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBNb2R1bGUgY3JlYXRlIGNhbGxiYWNrXG4gICAgICBpZiAobW9kdWxlLmNyZWF0ZSkge1xuICAgICAgICBtb2R1bGUuY3JlYXRlLmJpbmQoaW5zdGFuY2UpKG1vZHVsZVBhcmFtcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgc3RhdGljQWNjZXNzb3JzLmNvbXBvbmVudHMuc2V0ID0gZnVuY3Rpb24gKGNvbXBvbmVudHMpIHtcbiAgICB2YXIgQ2xhc3MgPSB0aGlzO1xuICAgIGlmICghQ2xhc3MudXNlKSB7IHJldHVybjsgfVxuICAgIENsYXNzLnVzZShjb21wb25lbnRzKTtcbiAgfTtcblxuICBTd2lwZXJDbGFzcy5pbnN0YWxsTW9kdWxlID0gZnVuY3Rpb24gaW5zdGFsbE1vZHVsZSAobW9kdWxlKSB7XG4gICAgICB2YXIgcGFyYW1zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBwYXJhbXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgICB2YXIgQ2xhc3MgPSB0aGlzO1xuICAgIGlmICghQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMpIHsgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMgPSB7fTsgfVxuICAgIHZhciBuYW1lID0gbW9kdWxlLm5hbWUgfHwgKCgoT2JqZWN0LmtleXMoQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMpLmxlbmd0aCkgKyBcIl9cIiArIChVdGlscy5ub3coKSkpKTtcbiAgICBDbGFzcy5wcm90b3R5cGUubW9kdWxlc1tuYW1lXSA9IG1vZHVsZTtcbiAgICAvLyBQcm90b3R5cGVcbiAgICBpZiAobW9kdWxlLnByb3RvKSB7XG4gICAgICBPYmplY3Qua2V5cyhtb2R1bGUucHJvdG8pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBDbGFzcy5wcm90b3R5cGVba2V5XSA9IG1vZHVsZS5wcm90b1trZXldO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENsYXNzXG4gICAgaWYgKG1vZHVsZS5zdGF0aWMpIHtcbiAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5zdGF0aWMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBDbGFzc1trZXldID0gbW9kdWxlLnN0YXRpY1trZXldO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENhbGxiYWNrXG4gICAgaWYgKG1vZHVsZS5pbnN0YWxsKSB7XG4gICAgICBtb2R1bGUuaW5zdGFsbC5hcHBseShDbGFzcywgcGFyYW1zKTtcbiAgICB9XG4gICAgcmV0dXJuIENsYXNzO1xuICB9O1xuXG4gIFN3aXBlckNsYXNzLnVzZSA9IGZ1bmN0aW9uIHVzZSAobW9kdWxlKSB7XG4gICAgICB2YXIgcGFyYW1zID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKCBsZW4tLSA+IDAgKSBwYXJhbXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgICB2YXIgQ2xhc3MgPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldHVybiBDbGFzcy5pbnN0YWxsTW9kdWxlKG0pOyB9KTtcbiAgICAgIHJldHVybiBDbGFzcztcbiAgICB9XG4gICAgcmV0dXJuIENsYXNzLmluc3RhbGxNb2R1bGUuYXBwbHkoQ2xhc3MsIFsgbW9kdWxlIF0uY29uY2F0KCBwYXJhbXMgKSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFN3aXBlckNsYXNzLCBzdGF0aWNBY2Nlc3NvcnMgKTtcblxuICBmdW5jdGlvbiB1cGRhdGVTaXplICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2lkdGg7XG4gICAgdmFyIGhlaWdodDtcbiAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoID0gJGVsWzBdLmNsaWVudFdpZHRoO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaGVpZ2h0ID0gc3dpcGVyLnBhcmFtcy5oZWlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gICAgfVxuICAgIGlmICgod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB8fCAoaGVpZ2h0ID09PSAwICYmIHN3aXBlci5pc1ZlcnRpY2FsKCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3VidHJhY3QgcGFkZGluZ3NcbiAgICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JyksIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSwgMTApO1xuICAgIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctYm90dG9tJyksIDEwKTtcblxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHdpZHRoOiB3aWR0aCxcbiAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgc2l6ZTogc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gd2lkdGggOiBoZWlnaHQsXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbGlkZXMgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgc3dpcGVyU2l6ZSA9IHN3aXBlci5zaXplO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgIHZhciB3cm9uZ1JUTCA9IHN3aXBlci53cm9uZ1JUTDtcbiAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICB2YXIgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgdmFyIHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykpKTtcbiAgICB2YXIgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gICAgdmFyIHNuYXBHcmlkID0gW107XG4gICAgdmFyIHNsaWRlc0dyaWQgPSBbXTtcbiAgICB2YXIgc2xpZGVzU2l6ZXNHcmlkID0gW107XG5cbiAgICB2YXIgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKHN3aXBlcik7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICAgIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgdmFyIHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgICB2YXIgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICB2YXIgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gICAgdmFyIHByZXZTbGlkZVNpemUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXJTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICBzcGFjZUJldHdlZW4gPSAocGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDApICogc3dpcGVyU2l6ZTtcbiAgICB9XG5cbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuO1xuXG4gICAgLy8gcmVzZXQgbWFyZ2luc1xuICAgIGlmIChydGwpIHsgc2xpZGVzLmNzcyh7IG1hcmdpbkxlZnQ6ICcnLCBtYXJnaW5Ub3A6ICcnIH0pOyB9XG4gICAgZWxzZSB7IHNsaWRlcy5jc3MoeyBtYXJnaW5SaWdodDogJycsIG1hcmdpbkJvdHRvbTogJycgfSk7IH1cblxuICAgIHZhciBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09IHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBzbGlkZXNMZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93Jykge1xuICAgICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5tYXgoc2xpZGVzTnVtYmVyRXZlblRvUm93cywgcGFyYW1zLnNsaWRlc1BlclZpZXcgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDYWxjIHNsaWRlc1xuICAgIHZhciBzbGlkZVNpemU7XG4gICAgdmFyIHNsaWRlc1BlckNvbHVtbiA9IHBhcmFtcy5zbGlkZXNQZXJDb2x1bW47XG4gICAgdmFyIHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyBzbGlkZXNQZXJDb2x1bW47XG4gICAgdmFyIG51bUZ1bGxDb2x1bW5zID0gTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0xlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzbGlkZVNpemUgPSAwO1xuICAgICAgdmFyIHNsaWRlID0gc2xpZGVzLmVxKGkpO1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICAgIC8vIFNldCBzbGlkZXMgb3JkZXJcbiAgICAgICAgdmFyIG5ld1NsaWRlT3JkZXJJbmRleCA9ICh2b2lkIDApO1xuICAgICAgICB2YXIgY29sdW1uID0gKHZvaWQgMCk7XG4gICAgICAgIHZhciByb3cgPSAodm9pZCAwKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uRmlsbCA9PT0gJ2NvbHVtbicpXG4gICAgICAgICAgfHwgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAncm93JyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxKVxuICAgICAgICApIHtcbiAgICAgICAgICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICAgICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICAgICAgcm93ID0gaSAtIChjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IChjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gc2xpZGVzUGVyQ29sdW1uIC0gMSkpIHtcbiAgICAgICAgICAgICAgcm93ICs9IDE7XG4gICAgICAgICAgICAgIGlmIChyb3cgPj0gc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZ3JvdXBJbmRleCA9IE1hdGguZmxvb3IoaSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBwYXJhbXMuc2xpZGVzUGVyVmlldykgLSBncm91cEluZGV4ICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICAgICAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBwYXJhbXMuc2xpZGVzUGVyVmlldyAtIGdyb3VwSW5kZXggKiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgKChyb3cgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzKSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgICAgc2xpZGVcbiAgICAgICAgICAgIC5jc3Moe1xuICAgICAgICAgICAgICAnLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICAgJy1tb3otYm94LW9yZGluYWwtZ3JvdXAnOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAgICctbXMtZmxleC1vcmRlcic6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICAgIG9yZGVyOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgICAgIGNvbHVtbiA9IGkgLSAocm93ICogc2xpZGVzUGVyUm93KTtcbiAgICAgICAgfVxuICAgICAgICBzbGlkZVxuICAgICAgICAgIC5jc3MoXG4gICAgICAgICAgICAoXCJtYXJnaW4tXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3RvcCcgOiAnbGVmdCcpKSxcbiAgICAgICAgICAgIChyb3cgIT09IDAgJiYgcGFyYW1zLnNwYWNlQmV0d2VlbikgJiYgKCgocGFyYW1zLnNwYWNlQmV0d2VlbikgKyBcInB4XCIpKVxuICAgICAgICAgIClcbiAgICAgICAgICAuYXR0cignZGF0YS1zd2lwZXItY29sdW1uJywgY29sdW1uKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXN3aXBlci1yb3cnLCByb3cpO1xuICAgICAgfVxuICAgICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgICB2YXIgc2xpZGVTdHlsZXMgPSB3aW4uZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZVswXSwgbnVsbCk7XG4gICAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICB2YXIgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAgID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKVxuICAgICAgICAgICAgOiBzbGlkZS5vdXRlckhlaWdodCh0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB2YXIgd2lkdGggPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3dpZHRoJykpO1xuICAgICAgICAgICAgdmFyIHBhZGRpbmdMZWZ0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWxlZnQnKSk7XG4gICAgICAgICAgICB2YXIgcGFkZGluZ1JpZ2h0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXJpZ2h0JykpO1xuICAgICAgICAgICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgICAgICAgICAgdmFyIG1hcmdpblJpZ2h0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSk7XG4gICAgICAgICAgICB2YXIgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94JyAmJiAhQnJvd3Nlci5pc0lFKSB7XG4gICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhlaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnaGVpZ2h0JykpO1xuICAgICAgICAgICAgdmFyIHBhZGRpbmdUb3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctdG9wJykpO1xuICAgICAgICAgICAgdmFyIHBhZGRpbmdCb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ3BhZGRpbmctYm90dG9tJykpO1xuICAgICAgICAgICAgdmFyIG1hcmdpblRvcCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKTtcbiAgICAgICAgICAgIHZhciBtYXJnaW5Cb3R0b20gPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgICAgICAgICB2YXIgYm94U2l6aW5nJDEgPSBzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdib3gtc2l6aW5nJyk7XG4gICAgICAgICAgICBpZiAoYm94U2l6aW5nJDEgJiYgYm94U2l6aW5nJDEgPT09ICdib3JkZXItYm94JyAmJiAhQnJvd3Nlci5pc0lFKSB7XG4gICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIG1hcmdpblRvcCArIG1hcmdpbkJvdHRvbTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIHBhZGRpbmdUb3AgKyBwYWRkaW5nQm90dG9tICsgbWFyZ2luVG9wICsgbWFyZ2luQm90dG9tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgICBzbGlkZVswXS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBjdXJyZW50V2ViS2l0VHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7IHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVTaXplID0gKHN3aXBlclNpemUgLSAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgeyBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7IH1cblxuICAgICAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLndpZHRoID0gc2xpZGVTaXplICsgXCJweFwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzbGlkZXNbaV0uc3R5bGUuaGVpZ2h0ID0gc2xpZGVTaXplICsgXCJweFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgICAgfVxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcblxuXG4gICAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgKHNsaWRlU2l6ZSAvIDIpICsgKHByZXZTbGlkZVNpemUgLyAyKSArIHNwYWNlQmV0d2VlbjtcbiAgICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgeyBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIChzd2lwZXJTaXplIC8gMikgLSBzcGFjZUJldHdlZW47IH1cbiAgICAgICAgaWYgKGkgPT09IDApIHsgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSAoc3dpcGVyU2l6ZSAvIDIpIC0gc3BhY2VCZXR3ZWVuOyB9XG4gICAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSB7IHNsaWRlUG9zaXRpb24gPSAwOyB9XG4gICAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7IHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pOyB9XG4gICAgICAgIGlmICgoaW5kZXgpICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSB7IHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7IH1cbiAgICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHsgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7IH1cbiAgICAgICAgaWYgKChpbmRleCkgJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHsgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTsgfVxuICAgICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuXG4gICAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuXG4gICAgICBpbmRleCArPSAxO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gICAgdmFyIG5ld1NsaWRlc0dyaWQ7XG5cbiAgICBpZiAoXG4gICAgICBydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgICAkd3JhcHBlckVsLmNzcyh7IHdpZHRoOiAoKHN3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pICsgXCJweFwiKSB9KTtcbiAgICB9XG4gICAgaWYgKCFTdXBwb3J0LmZsZXhib3ggfHwgcGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7ICR3cmFwcGVyRWwuY3NzKHsgd2lkdGg6ICgoc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKyBcInB4XCIpIH0pOyB9XG4gICAgICBlbHNlIHsgJHdyYXBwZXJFbC5jc3MoeyBoZWlnaHQ6ICgoc3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKyBcInB4XCIpIH0pOyB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgICAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5jZWlsKHN3aXBlci52aXJ0dWFsU2l6ZSAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pIC0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHsgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogKChzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSArIFwicHhcIikgfSk7IH1cbiAgICAgIGVsc2UgeyAkd3JhcHBlckVsLmNzcyh7IGhlaWdodDogKChzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKSArIFwicHhcIikgfSk7IH1cbiAgICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBzbmFwR3JpZC5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAgICAgdmFyIHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaSQxXTtcbiAgICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgeyBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pOyB9XG4gICAgICAgICAgaWYgKHNuYXBHcmlkW2kkMV0gPCBzd2lwZXIudmlydHVhbFNpemUgKyBzbmFwR3JpZFswXSkgeyBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pOyB9XG4gICAgICAgIH1cbiAgICAgICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG4gICAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IHNuYXBHcmlkLmxlbmd0aDsgaSQyICs9IDEpIHtcbiAgICAgICAgdmFyIHNsaWRlc0dyaWRJdGVtJDEgPSBzbmFwR3JpZFtpJDJdO1xuICAgICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3RocykgeyBzbGlkZXNHcmlkSXRlbSQxID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSQxKTsgfVxuICAgICAgICBpZiAoc25hcEdyaWRbaSQyXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtJDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSB7IHNuYXBHcmlkID0gWzBdOyB9XG5cbiAgICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBpZiAocnRsKSB7IHNsaWRlcy5jc3MoeyBtYXJnaW5MZWZ0OiAoc3BhY2VCZXR3ZWVuICsgXCJweFwiKSB9KTsgfVxuICAgICAgICBlbHNlIHsgc2xpZGVzLmNzcyh7IG1hcmdpblJpZ2h0OiAoc3BhY2VCZXR3ZWVuICsgXCJweFwiKSB9KTsgfVxuICAgICAgfSBlbHNlIHsgc2xpZGVzLmNzcyh7IG1hcmdpbkJvdHRvbTogKHNwYWNlQmV0d2VlbiArIFwicHhcIikgfSk7IH1cbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgICAgdmFyIGFsbFNsaWRlc1NpemUgPSAwO1xuICAgICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlU2l6ZVZhbHVlKSB7XG4gICAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICAgIH0pO1xuICAgICAgYWxsU2xpZGVzU2l6ZSAtPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICAgIHZhciBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgICAgc25hcEdyaWQuZm9yRWFjaChmdW5jdGlvbiAoc25hcCwgc25hcEluZGV4KSB7XG4gICAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICAgIH0pO1xuICAgICAgICBzbGlkZXNHcmlkLmZvckVhY2goZnVuY3Rpb24gKHNuYXAsIHNuYXBJbmRleCkge1xuICAgICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHNsaWRlczogc2xpZGVzLFxuICAgICAgc25hcEdyaWQ6IHNuYXBHcmlkLFxuICAgICAgc2xpZGVzR3JpZDogc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogc2xpZGVzU2l6ZXNHcmlkLFxuICAgIH0pO1xuXG4gICAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgICB9XG4gICAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgeyBzd2lwZXIuY2hlY2tPdmVyZmxvdygpOyB9XG4gICAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgICB9XG4gICAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0IChzcGVlZCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgICB2YXIgbmV3SGVpZ2h0ID0gMDtcbiAgICB2YXIgaTtcbiAgICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICAgIH1cbiAgICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyk7IGkgKz0gMSkge1xuICAgICAgICB2YXIgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkgeyBicmVhazsgfVxuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KVswXSk7XG4gICAgfVxuXG4gICAgLy8gRmluZCBuZXcgaGVpZ2h0IGZyb20gaGlnaGVzdCBzbGlkZSBpbiB2aWV3XG4gICAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHZhciBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBuZXdIZWlnaHQgPSBoZWlnaHQgPiBuZXdIZWlnaHQgPyBoZWlnaHQgOiBuZXdIZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlIEhlaWdodFxuICAgIGlmIChuZXdIZWlnaHQpIHsgc3dpcGVyLiR3cmFwcGVyRWwuY3NzKCdoZWlnaHQnLCAobmV3SGVpZ2h0ICsgXCJweFwiKSk7IH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyAodHJhbnNsYXRlKSB7XG4gICAgaWYgKCB0cmFuc2xhdGUgPT09IHZvaWQgMCApIHRyYW5zbGF0ZSA9ICh0aGlzICYmIHRoaXMudHJhbnNsYXRlKSB8fCAwO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG5cbiAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcblxuICAgIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgeyBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7IH1cblxuICAgIHZhciBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICAgIGlmIChydGwpIHsgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlOyB9XG5cbiAgICAvLyBWaXNpYmxlIFNsaWRlc1xuICAgIHNsaWRlcy5yZW1vdmVDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuXG4gICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gICAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgICB2YXIgc2xpZGVQcm9ncmVzcyA9IChcbiAgICAgICAgKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSkgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldFxuICAgICAgKSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcbiAgICAgIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSB7XG4gICAgICAgIHZhciBzbGlkZUJlZm9yZSA9IC0ob2Zmc2V0Q2VudGVyIC0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQpO1xuICAgICAgICB2YXIgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgICAgdmFyIGlzVmlzaWJsZSA9IChzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxKVxuICAgICAgICAgICAgICAgICAgfHwgKHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUpXG4gICAgICAgICAgICAgICAgICB8fCAoc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplKTtcbiAgICAgICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICAgIHNsaWRlcy5lcShpKS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzcztcbiAgICB9XG4gICAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSAkKHN3aXBlci52aXNpYmxlU2xpZGVzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzICh0cmFuc2xhdGUpIHtcbiAgICBpZiAoIHRyYW5zbGF0ZSA9PT0gdm9pZCAwICkgdHJhbnNsYXRlID0gKHRoaXMgJiYgdGhpcy50cmFuc2xhdGUpIHx8IDA7XG5cbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcblxuICAgIHZhciB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgdmFyIGlzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nO1xuICAgIHZhciBpc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgICB2YXIgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gICAgdmFyIHdhc0VuZCA9IGlzRW5kO1xuICAgIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgICAgcHJvZ3Jlc3MgPSAwO1xuICAgICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgICAgaXNFbmQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gKHRyYW5zbGF0ZXNEaWZmKTtcbiAgICAgIGlzQmVnaW5uaW5nID0gcHJvZ3Jlc3MgPD0gMDtcbiAgICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgICB9XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcHJvZ3Jlc3M6IHByb2dyZXNzLFxuICAgICAgaXNCZWdpbm5pbmc6IGlzQmVnaW5uaW5nLFxuICAgICAgaXNFbmQ6IGlzRW5kLFxuICAgIH0pO1xuXG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHsgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7IH1cblxuICAgIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gICAgfVxuICAgIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gICAgfVxuICAgIGlmICgod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZykgfHwgKHdhc0VuZCAmJiAhaXNFbmQpKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciByZWFsSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICAgIHZhciBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuXG4gICAgc2xpZGVzLnJlbW92ZUNsYXNzKCgocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpICsgXCIgXCIgKyAocGFyYW1zLnNsaWRlTmV4dENsYXNzKSArIFwiIFwiICsgKHBhcmFtcy5zbGlkZVByZXZDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpICsgXCIgXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKSkpO1xuXG4gICAgdmFyIGFjdGl2ZVNsaWRlO1xuICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgYWN0aXZlSW5kZXggKyBcIlxcXCJdXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuICAgIH1cblxuICAgIC8vIEFjdGl2ZSBjbGFzc2VzXG4gICAgYWN0aXZlU2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICAgIGlmIChhY3RpdmVTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCI6bm90KC5cIiArIChwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykgKyBcIilbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXVwiKSlcbiAgICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCIuXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXVwiKSlcbiAgICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBOZXh0IFNsaWRlXG4gICAgdmFyIG5leHRTbGlkZSA9IGFjdGl2ZVNsaWRlLm5leHRBbGwoKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSkpLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgaWYgKHBhcmFtcy5sb29wICYmIG5leHRTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICAgIG5leHRTbGlkZSA9IHNsaWRlcy5lcSgwKTtcbiAgICAgIG5leHRTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgIH1cbiAgICAvLyBQcmV2IFNsaWRlXG4gICAgdmFyIHByZXZTbGlkZSA9IGFjdGl2ZVNsaWRlLnByZXZBbGwoKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSkpLmVxKDApLmFkZENsYXNzKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgaWYgKHBhcmFtcy5sb29wICYmIHByZXZTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5lcSgtMSk7XG4gICAgICBwcmV2U2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAvLyBEdXBsaWNhdGUgdG8gYWxsIGxvb3BlZCBzbGlkZXNcbiAgICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiOm5vdCguXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIpW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgKyBcIlxcXCJdXCIpKVxuICAgICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCIuXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgKG5leHRTbGlkZS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpKSArIFwiXFxcIl1cIikpXG4gICAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAocHJldlNsaWRlLmhhc0NsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAkd3JhcHBlckVsXG4gICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIjpub3QoLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiKVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyAocHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpICsgXCJcXFwiXVwiKSlcbiAgICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgICAuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSkgKyBcIlxcXCJdXCIpKVxuICAgICAgICAgIC5hZGRDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4IChuZXdBY3RpdmVJbmRleCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICAgIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQ7XG4gICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBwcmV2aW91c0luZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBwcmV2aW91c1JlYWxJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgdmFyIHByZXZpb3VzU25hcEluZGV4ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgICB2YXIgc25hcEluZGV4O1xuICAgIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoKHNsaWRlc0dyaWRbaSArIDFdIC0gc2xpZGVzR3JpZFtpXSkgLyAyKSkge1xuICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICAgICAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgeyBhY3RpdmVJbmRleCA9IDA7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNuYXBJbmRleCA9IE1hdGguZmxvb3IoYWN0aXZlSW5kZXggLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgIH1cbiAgICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgeyBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxOyB9XG4gICAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4KSB7XG4gICAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gR2V0IHJlYWwgaW5kZXhcbiAgICB2YXIgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLnNsaWRlcy5lcShhY3RpdmVJbmRleCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSB8fCBhY3RpdmVJbmRleCwgMTApO1xuXG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgc25hcEluZGV4OiBzbmFwSW5kZXgsXG4gICAgICByZWFsSW5kZXg6IHJlYWxJbmRleCxcbiAgICAgIHByZXZpb3VzSW5kZXg6IHByZXZpb3VzSW5kZXgsXG4gICAgICBhY3RpdmVJbmRleDogYWN0aXZlSW5kZXgsXG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2xpY2tlZFNsaWRlIChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHNsaWRlID0gJChlLnRhcmdldCkuY2xvc2VzdCgoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSlbMF07XG4gICAgdmFyIHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgICBpZiAoc2xpZGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHsgc2xpZGVGb3VuZCA9IHRydWU7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludCgkKHNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gJChzbGlkZSkuaW5kZXgoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciB1cGRhdGUgPSB7XG4gICAgdXBkYXRlU2l6ZTogdXBkYXRlU2l6ZSxcbiAgICB1cGRhdGVTbGlkZXM6IHVwZGF0ZVNsaWRlcyxcbiAgICB1cGRhdGVBdXRvSGVpZ2h0OiB1cGRhdGVBdXRvSGVpZ2h0LFxuICAgIHVwZGF0ZVNsaWRlc09mZnNldDogdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICAgIHVwZGF0ZVNsaWRlc1Byb2dyZXNzOiB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgICB1cGRhdGVQcm9ncmVzczogdXBkYXRlUHJvZ3Jlc3MsXG4gICAgdXBkYXRlU2xpZGVzQ2xhc3NlczogdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgICB1cGRhdGVBY3RpdmVJbmRleDogdXBkYXRlQWN0aXZlSW5kZXgsXG4gICAgdXBkYXRlQ2xpY2tlZFNsaWRlOiB1cGRhdGVDbGlja2VkU2xpZGUsXG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0VHJhbnNsYXRlIChheGlzKSB7XG4gICAgaWYgKCBheGlzID09PSB2b2lkIDAgKSBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcblxuICAgIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRUcmFuc2xhdGUgPSBVdGlscy5nZXRUcmFuc2xhdGUoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gICAgaWYgKHJ0bCkgeyBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7IH1cblxuICAgIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUgKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgcHJvZ3Jlc3MgPSBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgdmFyIHggPSAwO1xuICAgIHZhciB5ID0gMDtcbiAgICB2YXIgeiA9IDA7XG5cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHRyYW5zbGF0ZTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgICBpZiAoU3VwcG9ydC50cmFuc2Zvcm1zM2QpIHsgJHdyYXBwZXJFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgXCIgKyB6ICsgXCJweClcIikpOyB9XG4gICAgICBlbHNlIHsgJHdyYXBwZXJFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlKFwiICsgeCArIFwicHgsIFwiICsgeSArIFwicHgpXCIpKTsgfVxuICAgIH1cbiAgICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcblxuICAgIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gICAgdmFyIG5ld1Byb2dyZXNzO1xuICAgIHZhciB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3UHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvICh0cmFuc2xhdGVzRGlmZik7XG4gICAgfVxuICAgIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWluVHJhbnNsYXRlICgpIHtcbiAgICByZXR1cm4gKC10aGlzLnNuYXBHcmlkWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heFRyYW5zbGF0ZSAoKSB7XG4gICAgcmV0dXJuICgtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdKTtcbiAgfVxuXG4gIHZhciB0cmFuc2xhdGUgPSB7XG4gICAgZ2V0VHJhbnNsYXRlOiBnZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNsYXRlOiBzZXRUcmFuc2xhdGUsXG4gICAgbWluVHJhbnNsYXRlOiBtaW5UcmFuc2xhdGUsXG4gICAgbWF4VHJhbnNsYXRlOiBtYXhUcmFuc2xhdGUsXG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbiAoZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgc3dpcGVyLiR3cmFwcGVyRWwudHJhbnNpdGlvbihkdXJhdGlvbik7XG5cbiAgICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0IChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXg7XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cblxuICAgIHZhciBkaXIgPSBkaXJlY3Rpb247XG4gICAgaWYgKCFkaXIpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIHsgZGlyID0gJ25leHQnOyB9XG4gICAgICBlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIHsgZGlyID0gJ3ByZXYnOyB9XG4gICAgICBlbHNlIHsgZGlyID0gJ3Jlc2V0JzsgfVxuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uU3RhcnQnKTtcblxuICAgIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUmVzZXRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlVHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25TdGFydCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25TdGFydCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQkMSAocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgICBpZiAoIHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwICkgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4O1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcblxuICAgIHZhciBkaXIgPSBkaXJlY3Rpb247XG4gICAgaWYgKCFkaXIpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIHsgZGlyID0gJ25leHQnOyB9XG4gICAgICBlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIHsgZGlyID0gJ3ByZXYnOyB9XG4gICAgICBlbHNlIHsgZGlyID0gJ3Jlc2V0JzsgfVxuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG5cbiAgICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVJlc2V0VHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uRW5kJyk7XG4gICAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlTmV4dFRyYW5zaXRpb25FbmQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVByZXZUcmFuc2l0aW9uRW5kJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHRyYW5zaXRpb24kMSA9IHtcbiAgICBzZXRUcmFuc2l0aW9uOiBzZXRUcmFuc2l0aW9uLFxuICAgIHRyYW5zaXRpb25TdGFydDogdHJhbnNpdGlvblN0YXJ0LFxuICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQkMSxcbiAgfTtcblxuICBmdW5jdGlvbiBzbGlkZVRvIChpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgICBpZiAoIGluZGV4ID09PSB2b2lkIDAgKSBpbmRleCA9IDA7XG4gICAgaWYgKCBzcGVlZCA9PT0gdm9pZCAwICkgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICBpZiAoIHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwICkgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBzbGlkZUluZGV4ID0gaW5kZXg7XG4gICAgaWYgKHNsaWRlSW5kZXggPCAwKSB7IHNsaWRlSW5kZXggPSAwOyB9XG5cbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQ7XG4gICAgdmFyIHNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZDtcbiAgICB2YXIgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c0luZGV4O1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHNuYXBJbmRleCA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleCAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHsgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTsgfVxuXG4gICAgaWYgKChhY3RpdmVJbmRleCB8fCBwYXJhbXMuaW5pdGlhbFNsaWRlIHx8IDApID09PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zbGF0ZSA9IC1zbmFwR3JpZFtzbmFwSW5kZXhdO1xuXG4gICAgLy8gVXBkYXRlIHByb2dyZXNzXG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG5cbiAgICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICAgIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmICgtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApID49IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCkpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlyZWN0aW9uO1xuICAgIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIHsgZGlyZWN0aW9uID0gJ25leHQnOyB9XG4gICAgZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSB7IGRpcmVjdGlvbiA9ICdwcmV2JzsgfVxuICAgIGVsc2UgeyBkaXJlY3Rpb24gPSAncmVzZXQnOyB9XG5cblxuICAgIC8vIFVwZGF0ZSBJbmRleFxuICAgIGlmICgocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHx8ICghcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICAgIH1cbiAgICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoc3BlZWQgPT09IDAgfHwgIVN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2xpZGVUb0xvb3AgKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICAgIGlmICggaW5kZXggPT09IHZvaWQgMCApIGluZGV4ID0gMDtcbiAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIG5ld0luZGV4ID0gaW5kZXg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgbmV3SW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuICBmdW5jdGlvbiBzbGlkZU5leHQgKHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgaWYgKCBzcGVlZCA9PT0gdm9pZCAwICkgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICBpZiAoIHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwICkgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBhbmltYXRpbmcgPSBzd2lwZXIuYW5pbWF0aW5nO1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgaWYgKGFuaW1hdGluZykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgfVxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuICBmdW5jdGlvbiBzbGlkZVByZXYgKHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgaWYgKCBzcGVlZCA9PT0gdm9pZCAwICkgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICBpZiAoIHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwICkgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBhbmltYXRpbmcgPSBzd2lwZXIuYW5pbWF0aW5nO1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkO1xuICAgIHZhciBydGxUcmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoYW5pbWF0aW5nKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICB9XG4gICAgdmFyIHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgICBpZiAodmFsIDwgMCkgeyByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7IH1cbiAgICAgIHJldHVybiBNYXRoLmZsb29yKHZhbCk7XG4gICAgfVxuICAgIHZhciBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gICAgdmFyIG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChmdW5jdGlvbiAodmFsKSB7IHJldHVybiBub3JtYWxpemUodmFsKTsgfSk7XG4gICAgdmFyIG5vcm1hbGl6ZWRTbGlkZXNHcmlkID0gc2xpZGVzR3JpZC5tYXAoZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbm9ybWFsaXplKHZhbCk7IH0pO1xuXG4gICAgdmFyIGN1cnJlbnRTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSldO1xuICAgIHZhciBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gICAgdmFyIHByZXZJbmRleDtcbiAgICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICAgIGlmIChwcmV2SW5kZXggPCAwKSB7IHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7IH1cbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG4gIGZ1bmN0aW9uIHNsaWRlUmVzZXQgKHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gICAgaWYgKCBzcGVlZCA9PT0gdm9pZCAwICkgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgICBpZiAoIHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwICkgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcblxuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIC8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuICBmdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdCAoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgICBpZiAoIHNwZWVkID09PSB2b2lkIDAgKSBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICAgIGlmICggcnVuQ2FsbGJhY2tzID09PSB2b2lkIDAgKSBydW5DYWxsYmFja3MgPSB0cnVlO1xuXG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBzbmFwSW5kZXggPSBNYXRoLmZsb29yKGluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG5cbiAgICBpZiAoc25hcEluZGV4IDwgc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCAtIDEpIHtcbiAgICAgIHZhciB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuXG4gICAgICB2YXIgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICAgIHZhciBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcblxuICAgICAgaWYgKCh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCkgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgLyAyKSB7XG4gICAgICAgIGluZGV4ID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG5cbiAgICB2YXIgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIHZhciBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgIHZhciByZWFsSW5kZXg7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgeyByZXR1cm47IH1cbiAgICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KCQoc3dpcGVyLmNsaWNrZWRTbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHNsaWRlVG9JbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMgLSAoc2xpZGVzUGVyVmlldyAvIDIpKVxuICAgICAgICAgIHx8IChzbGlkZVRvSW5kZXggPiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSArIChzbGlkZXNQZXJWaWV3IC8gMikpXG4gICAgICAgICkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAgICAgLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyByZWFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCIpXCIpKVxuICAgICAgICAgICAgLmVxKDApXG4gICAgICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgICAgIFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgcmVhbEluZGV4ICsgXCJcXFwiXTpub3QoLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiKVwiKSlcbiAgICAgICAgICAuZXEoMClcbiAgICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgICBVdGlscy5uZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzbGlkZSA9IHtcbiAgICBzbGlkZVRvOiBzbGlkZVRvLFxuICAgIHNsaWRlVG9Mb29wOiBzbGlkZVRvTG9vcCxcbiAgICBzbGlkZU5leHQ6IHNsaWRlTmV4dCxcbiAgICBzbGlkZVByZXY6IHNsaWRlUHJldixcbiAgICBzbGlkZVJlc2V0OiBzbGlkZVJlc2V0LFxuICAgIHNsaWRlVG9DbG9zZXN0OiBzbGlkZVRvQ2xvc2VzdCxcbiAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBzbGlkZVRvQ2xpY2tlZFNsaWRlLFxuICB9O1xuXG4gIGZ1bmN0aW9uIGxvb3BDcmVhdGUgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgc2xpZGVzXG4gICAgJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpICsgXCIuXCIgKyAocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSkucmVtb3ZlKCk7XG5cbiAgICB2YXIgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSk7XG5cbiAgICBpZiAocGFyYW1zLmxvb3BGaWxsR3JvdXBXaXRoQmxhbmspIHtcbiAgICAgIHZhciBibGFua1NsaWRlc051bSA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cCAtIChzbGlkZXMubGVuZ3RoICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGlmIChibGFua1NsaWRlc051bSAhPT0gcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICAgIHZhciBibGFua05vZGUgPSAkKGRvYy5jcmVhdGVFbGVtZW50KCdkaXYnKSkuYWRkQ2xhc3MoKChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIiBcIiArIChwYXJhbXMuc2xpZGVCbGFua0NsYXNzKSkpO1xuICAgICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKGJsYW5rTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAocGFyYW1zLnNsaWRlQ2xhc3MpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgIXBhcmFtcy5sb29wZWRTbGlkZXMpIHsgcGFyYW1zLmxvb3BlZFNsaWRlcyA9IHNsaWRlcy5sZW5ndGg7IH1cblxuICAgIHN3aXBlci5sb29wZWRTbGlkZXMgPSBwYXJzZUludChwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCk7XG4gICAgc3dpcGVyLmxvb3BlZFNsaWRlcyArPSBwYXJhbXMubG9vcEFkZGl0aW9uYWxTbGlkZXM7XG4gICAgaWYgKHN3aXBlci5sb29wZWRTbGlkZXMgPiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgcHJlcGVuZFNsaWRlcyA9IFtdO1xuICAgIHZhciBhcHBlbmRTbGlkZXMgPSBbXTtcbiAgICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsKSB7XG4gICAgICB2YXIgc2xpZGUgPSAkKGVsKTtcbiAgICAgIGlmIChpbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMpIHsgYXBwZW5kU2xpZGVzLnB1c2goZWwpOyB9XG4gICAgICBpZiAoaW5kZXggPCBzbGlkZXMubGVuZ3RoICYmIGluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSB7IHByZXBlbmRTbGlkZXMucHVzaChlbCk7IH1cbiAgICAgIHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIH0pO1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGFwcGVuZFNsaWRlcy5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tpJDFdLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSQyID0gcHJlcGVuZFNsaWRlcy5sZW5ndGggLSAxOyBpJDIgPj0gMDsgaSQyIC09IDEpIHtcbiAgICAgICR3cmFwcGVyRWwucHJlcGVuZCgkKHByZXBlbmRTbGlkZXNbaSQyXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbG9vcEZpeCAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgIHZhciBsb29wZWRTbGlkZXMgPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHZhciBhbGxvd1NsaWRlUHJldiA9IHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgICB2YXIgYWxsb3dTbGlkZU5leHQgPSBzd2lwZXIuYWxsb3dTbGlkZU5leHQ7XG4gICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgIHZhciBuZXdJbmRleDtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG5cbiAgICB2YXIgc25hcFRyYW5zbGF0ZSA9IC1zbmFwR3JpZFthY3RpdmVJbmRleF07XG4gICAgdmFyIGRpZmYgPSBzbmFwVHJhbnNsYXRlIC0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuXG5cbiAgICAvLyBGaXggRm9yIE5lZ2F0aXZlIE92ZXJzbGlkaW5nXG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgICBuZXdJbmRleCA9IChzbGlkZXMubGVuZ3RoIC0gKGxvb3BlZFNsaWRlcyAqIDMpKSArIGFjdGl2ZUluZGV4O1xuICAgICAgbmV3SW5kZXggKz0gbG9vcGVkU2xpZGVzO1xuICAgICAgdmFyIHNsaWRlQ2hhbmdlZCA9IHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgYWN0aXZlSW5kZXggPj0gbG9vcGVkU2xpZGVzICogMikgfHwgKGFjdGl2ZUluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMpKSB7XG4gICAgICAvLyBGaXggRm9yIFBvc2l0aXZlIE92ZXJzbGlkaW5nXG4gICAgICBuZXdJbmRleCA9IC1zbGlkZXMubGVuZ3RoICsgYWN0aXZlSW5kZXggKyBsb29wZWRTbGlkZXM7XG4gICAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgICB2YXIgc2xpZGVDaGFuZ2VkJDEgPSBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgaWYgKHNsaWRlQ2hhbmdlZCQxICYmIGRpZmYgIT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSgocnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKSAtIGRpZmYpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvb3BEZXN0cm95ICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSArIFwiLlwiICsgKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiLC5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykgKyBcIi5cIiArIChwYXJhbXMuc2xpZGVCbGFua0NsYXNzKSkpLnJlbW92ZSgpO1xuICAgIHNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9XG5cbiAgdmFyIGxvb3AgPSB7XG4gICAgbG9vcENyZWF0ZTogbG9vcENyZWF0ZSxcbiAgICBsb29wRml4OiBsb29wRml4LFxuICAgIGxvb3BEZXN0cm95OiBsb29wRGVzdHJveSxcbiAgfTtcblxuICBmdW5jdGlvbiBzZXRHcmFiQ3Vyc29yIChtb3ZpbmcpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoU3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSkgeyByZXR1cm47IH1cbiAgICB2YXIgZWwgPSBzd2lwZXIuZWw7XG4gICAgZWwuc3R5bGUuY3Vyc29yID0gJ21vdmUnO1xuICAgIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctd2Via2l0LWdyYWJiaW5nJyA6ICctd2Via2l0LWdyYWInO1xuICAgIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctbW96LWdyYWJiaW4nIDogJy1tb3otZ3JhYic7XG4gICAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvciAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKFN1cHBvcnQudG91Y2ggfHwgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQpKSB7IHJldHVybjsgfVxuICAgIHN3aXBlci5lbC5zdHlsZS5jdXJzb3IgPSAnJztcbiAgfVxuXG4gIHZhciBncmFiQ3Vyc29yID0ge1xuICAgIHNldEdyYWJDdXJzb3I6IHNldEdyYWJDdXJzb3IsXG4gICAgdW5zZXRHcmFiQ3Vyc29yOiB1bnNldEdyYWJDdXJzb3IsXG4gIH07XG5cbiAgZnVuY3Rpb24gYXBwZW5kU2xpZGUgKHNsaWRlcykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgeyAkd3JhcHBlckVsLmFwcGVuZChzbGlkZXNbaV0pOyB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG4gICAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGVuZFNsaWRlIChzbGlkZXMpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcblxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuICAgIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSB7ICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXNbaV0pOyB9XG4gICAgICB9XG4gICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG4gICAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgfVxuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRTbGlkZSAoaW5kZXgsIHNsaWRlcykge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIHZhciBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLnNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHBhcmFtcy5zbGlkZUNsYXNzKSkpO1xuICAgIH1cbiAgICB2YXIgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGlmIChpbmRleCA8PSAwKSB7XG4gICAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuXG4gICAgdmFyIHNsaWRlc0J1ZmZlciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBiYXNlTGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaSAtPSAxKSB7XG4gICAgICB2YXIgY3VycmVudFNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgIGN1cnJlbnRTbGlkZS5yZW1vdmUoKTtcbiAgICAgIHNsaWRlc0J1ZmZlci51bnNoaWZ0KGN1cnJlbnRTbGlkZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgc2xpZGVzLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpJDFdKSB7ICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpJDFdKTsgfVxuICAgICAgfVxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyBzbGlkZXMubGVuZ3RoIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgaSQyICs9IDEpIHtcbiAgICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltpJDJdKTtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgfVxuICAgIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBTdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVNsaWRlIChzbGlkZXNJbmRleGVzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG5cbiAgICB2YXIgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChwYXJhbXMuc2xpZGVDbGFzcykpKTtcbiAgICB9XG4gICAgdmFyIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gICAgdmFyIGluZGV4VG9SZW1vdmU7XG5cbiAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpZGVzSW5kZXhlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHsgc3dpcGVyLnNsaWRlcy5lcShpbmRleFRvUmVtb3ZlKS5yZW1vdmUoKTsgfVxuICAgICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSB7IG5ld0FjdGl2ZUluZGV4IC09IDE7IH1cbiAgICAgIH1cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlcztcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSB7IHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7IH1cbiAgICAgIGlmIChpbmRleFRvUmVtb3ZlIDwgbmV3QWN0aXZlSW5kZXgpIHsgbmV3QWN0aXZlSW5kZXggLT0gMTsgfVxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBTdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFsbFNsaWRlcyAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICB2YXIgc2xpZGVzSW5kZXhlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgIH1cbiAgICBzd2lwZXIucmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcyk7XG4gIH1cblxuICB2YXIgbWFuaXB1bGF0aW9uID0ge1xuICAgIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZSxcbiAgICBwcmVwZW5kU2xpZGU6IHByZXBlbmRTbGlkZSxcbiAgICBhZGRTbGlkZTogYWRkU2xpZGUsXG4gICAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLFxuICAgIHJlbW92ZUFsbFNsaWRlczogcmVtb3ZlQWxsU2xpZGVzLFxuICB9O1xuXG4gIHZhciBEZXZpY2UgPSAoZnVuY3Rpb24gRGV2aWNlKCkge1xuICAgIHZhciB1YSA9IHdpbi5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gICAgdmFyIGRldmljZSA9IHtcbiAgICAgIGlvczogZmFsc2UsXG4gICAgICBhbmRyb2lkOiBmYWxzZSxcbiAgICAgIGFuZHJvaWRDaHJvbWU6IGZhbHNlLFxuICAgICAgZGVza3RvcDogZmFsc2UsXG4gICAgICB3aW5kb3dzOiBmYWxzZSxcbiAgICAgIGlwaG9uZTogZmFsc2UsXG4gICAgICBpcG9kOiBmYWxzZSxcbiAgICAgIGlwYWQ6IGZhbHNlLFxuICAgICAgY29yZG92YTogd2luLmNvcmRvdmEgfHwgd2luLnBob25lZ2FwLFxuICAgICAgcGhvbmVnYXA6IHdpbi5jb3Jkb3ZhIHx8IHdpbi5waG9uZWdhcCxcbiAgICB9O1xuXG4gICAgdmFyIHdpbmRvd3MgPSB1YS5tYXRjaCgvKFdpbmRvd3MgUGhvbmUpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB2YXIgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHZhciBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgICB2YXIgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gICAgdmFyIGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuXG5cbiAgICAvLyBXaW5kb3dzXG4gICAgaWYgKHdpbmRvd3MpIHtcbiAgICAgIGRldmljZS5vcyA9ICd3aW5kb3dzJztcbiAgICAgIGRldmljZS5vc1ZlcnNpb24gPSB3aW5kb3dzWzJdO1xuICAgICAgZGV2aWNlLndpbmRvd3MgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBBbmRyb2lkXG4gICAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICAgIGRldmljZS5vc1ZlcnNpb24gPSBhbmRyb2lkWzJdO1xuICAgICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICAgICAgZGV2aWNlLmFuZHJvaWRDaHJvbWUgPSB1YS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2Nocm9tZScpID49IDA7XG4gICAgfVxuICAgIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBpT1NcbiAgICBpZiAoaXBob25lICYmICFpcG9kKSB7XG4gICAgICBkZXZpY2Uub3NWZXJzaW9uID0gaXBob25lWzJdLnJlcGxhY2UoL18vZywgJy4nKTtcbiAgICAgIGRldmljZS5pcGhvbmUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXBhZCkge1xuICAgICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwYWRbMl0ucmVwbGFjZSgvXy9nLCAnLicpO1xuICAgICAgZGV2aWNlLmlwYWQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXBvZCkge1xuICAgICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwb2RbM10gPyBpcG9kWzNdLnJlcGxhY2UoL18vZywgJy4nKSA6IG51bGw7XG4gICAgICBkZXZpY2UuaXBob25lID0gdHJ1ZTtcbiAgICB9XG4gICAgLy8gaU9TIDgrIGNoYW5nZWQgVUFcbiAgICBpZiAoZGV2aWNlLmlvcyAmJiBkZXZpY2Uub3NWZXJzaW9uICYmIHVhLmluZGV4T2YoJ1ZlcnNpb24vJykgPj0gMCkge1xuICAgICAgaWYgKGRldmljZS5vc1ZlcnNpb24uc3BsaXQoJy4nKVswXSA9PT0gJzEwJykge1xuICAgICAgICBkZXZpY2Uub3NWZXJzaW9uID0gdWEudG9Mb3dlckNhc2UoKS5zcGxpdCgndmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERlc2t0b3BcbiAgICBkZXZpY2UuZGVza3RvcCA9ICEoZGV2aWNlLm9zIHx8IGRldmljZS5hbmRyb2lkIHx8IGRldmljZS53ZWJWaWV3KTtcblxuICAgIC8vIFdlYnZpZXdcbiAgICBkZXZpY2Uud2ViVmlldyA9IChpcGhvbmUgfHwgaXBhZCB8fCBpcG9kKSAmJiB1YS5tYXRjaCgvLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pKTtcblxuICAgIC8vIE1pbmltYWwgVUlcbiAgICBpZiAoZGV2aWNlLm9zICYmIGRldmljZS5vcyA9PT0gJ2lvcycpIHtcbiAgICAgIHZhciBvc1ZlcnNpb25BcnIgPSBkZXZpY2Uub3NWZXJzaW9uLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgbWV0YVZpZXdwb3J0ID0gZG9jLnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cInZpZXdwb3J0XCJdJyk7XG4gICAgICBkZXZpY2UubWluaW1hbFVpID0gIWRldmljZS53ZWJWaWV3XG4gICAgICAgICYmIChpcG9kIHx8IGlwaG9uZSlcbiAgICAgICAgJiYgKG9zVmVyc2lvbkFyclswXSAqIDEgPT09IDcgPyBvc1ZlcnNpb25BcnJbMV0gKiAxID49IDEgOiBvc1ZlcnNpb25BcnJbMF0gKiAxID4gNylcbiAgICAgICAgJiYgbWV0YVZpZXdwb3J0ICYmIG1ldGFWaWV3cG9ydC5nZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnKS5pbmRleE9mKCdtaW5pbWFsLXVpJykgPj0gMDtcbiAgICB9XG5cbiAgICAvLyBQaXhlbCBSYXRpb1xuICAgIGRldmljZS5waXhlbFJhdGlvID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcblxuICAgIC8vIEV4cG9ydCBvYmplY3RcbiAgICByZXR1cm4gZGV2aWNlO1xuICB9KCkpO1xuXG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydCAoZXZlbnQpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcztcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlID0gZXZlbnQ7XG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCkgeyBlID0gZS5vcmlnaW5hbEV2ZW50OyB9XG4gICAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSB7IHJldHVybjsgfVxuICAgIGlmICghZGF0YS5pc1RvdWNoRXZlbnQgJiYgJ2J1dHRvbicgaW4gZSAmJiBlLmJ1dHRvbiA+IDApIHsgcmV0dXJuOyB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkICYmIGRhdGEuaXNNb3ZlZCkgeyByZXR1cm47IH1cbiAgICBpZiAocGFyYW1zLm5vU3dpcGluZyAmJiAkKGUudGFyZ2V0KS5jbG9zZXN0KHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IChcIi5cIiArIChwYXJhbXMubm9Td2lwaW5nQ2xhc3MpKSlbMF0pIHtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICAgIGlmICghJChlKS5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSB7IHJldHVybjsgfVxuICAgIH1cblxuICAgIHRvdWNoZXMuY3VycmVudFggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgdG91Y2hlcy5jdXJyZW50WSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB2YXIgc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICB2YXIgc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcblxuICAgIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgKFVJV2ViVmlldykgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gICAgdmFyIGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbjtcbiAgICB2YXIgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuICAgIGlmIChcbiAgICAgIGVkZ2VTd2lwZURldGVjdGlvblxuICAgICAgJiYgKChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkKVxuICAgICAgfHwgKHN0YXJ0WCA+PSB3aW4uc2NyZWVuLndpZHRoIC0gZWRnZVN3aXBlVGhyZXNob2xkKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQoZGF0YSwge1xuICAgICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB0cnVlLFxuICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgfSk7XG5cbiAgICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gVXRpbHMubm93KCk7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG4gICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgeyBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlOyB9XG4gICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICB2YXIgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKGRhdGEuZm9ybUVsZW1lbnRzKSkgeyBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlOyB9XG4gICAgICBpZiAoXG4gICAgICAgIGRvYy5hY3RpdmVFbGVtZW50XG4gICAgICAgICYmICQoZG9jLmFjdGl2ZUVsZW1lbnQpLmlzKGRhdGEuZm9ybUVsZW1lbnRzKVxuICAgICAgICAmJiBkb2MuYWN0aXZlRWxlbWVudCAhPT0gZS50YXJnZXRcbiAgICAgICkge1xuICAgICAgICBkb2MuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzaG91bGRQcmV2ZW50RGVmYXVsdCA9IHByZXZlbnREZWZhdWx0ICYmIHN3aXBlci5hbGxvd1RvdWNoTW92ZSAmJiBwYXJhbXMudG91Y2hTdGFydFByZXZlbnREZWZhdWx0O1xuICAgICAgaWYgKHBhcmFtcy50b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCB8fCBzaG91bGRQcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoTW92ZSAoZXZlbnQpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIHRvdWNoZXMgPSBzd2lwZXIudG91Y2hlcztcbiAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICB2YXIgZSA9IGV2ZW50O1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHsgZSA9IGUub3JpZ2luYWxFdmVudDsgfVxuICAgIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSB7IHJldHVybjsgfVxuICAgIHZhciBwYWdlWCA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgIHZhciBwYWdlWSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgICB0b3VjaGVzLnN0YXJ0WCA9IHBhZ2VYO1xuICAgICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgICBVdGlscy5leHRlbmQodG91Y2hlcywge1xuICAgICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgICAgY3VycmVudFk6IHBhZ2VZLFxuICAgICAgICB9KTtcbiAgICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IFV0aWxzLm5vdygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgcGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgICAvLyBWZXJ0aWNhbFxuICAgICAgICBpZiAoXG4gICAgICAgICAgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpXG4gICAgICAgICAgfHwgKHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpXG4gICAgICAgICkge1xuICAgICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSlcbiAgICAgICAgfHwgKHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS5pc1RvdWNoRXZlbnQgJiYgZG9jLmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIGlmIChlLnRhcmdldCA9PT0gZG9jLmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICAgIH1cbiAgICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7IHJldHVybjsgfVxuXG4gICAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICAgIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcblxuICAgIHZhciBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgICB2YXIgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudGhyZXNob2xkICYmIE1hdGguc3FydCgoTWF0aC5wb3coIGRpZmZYLCAyICkpICsgKE1hdGgucG93KCBkaWZmWSwgMiApKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgeyByZXR1cm47IH1cblxuICAgIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciB0b3VjaEFuZ2xlO1xuICAgICAgaWYgKChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkpIHx8IChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIHRvdWNoZXMuY3VycmVudFggPT09IHRvdWNoZXMuc3RhcnRYKSkge1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgaWYgKChkaWZmWCAqIGRpZmZYKSArIChkaWZmWSAqIGRpZmZZKSA+PSAyNSkge1xuICAgICAgICAgIHRvdWNoQW5nbGUgPSAoTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODApIC8gTWF0aC5QSTtcbiAgICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogKDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgICBkYXRhLnN0YXJ0TW92aW5nID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICB9XG4gICAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlO1xuICAgICAgLy8gR3JhYiBDdXJzb3JcbiAgICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcblxuICAgIHZhciBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuXG4gICAgZGlmZiAqPSBwYXJhbXMudG91Y2hSYXRpbztcbiAgICBpZiAocnRsKSB7IGRpZmYgPSAtZGlmZjsgfVxuXG4gICAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG5cbiAgICB2YXIgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gICAgdmFyIHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG4gICAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICAgIH1cbiAgICBpZiAoKGRpZmYgPiAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkgeyBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSAoc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSkgKyAoTWF0aC5wb3coICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpLCByZXNpc3RhbmNlUmF0aW8gKSk7IH1cbiAgICB9IGVsc2UgaWYgKGRpZmYgPCAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IChzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxKSAtIChNYXRoLnBvdyggKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSwgcmVzaXN0YW5jZVJhdGlvICkpOyB9XG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICAgIGUucHJldmVudGVkQnlOZXN0ZWRTd2lwZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2JyAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgIH1cblxuXG4gICAgLy8gVGhyZXNob2xkXG4gICAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtcy5mb2xsb3dGaW5nZXIpIHsgcmV0dXJuOyB9XG5cbiAgICAvLyBVcGRhdGUgYWN0aXZlIGluZGV4IGluIGZyZWUgbW9kZVxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICAvLyBWZWxvY2l0eVxuICAgICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnY3VycmVudFgnIDogJ2N1cnJlbnRZJ10sXG4gICAgICAgIHRpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAgIC8vIFVwZGF0ZSB0cmFuc2xhdGVcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblRvdWNoRW5kIChldmVudCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcblxuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciB0b3VjaGVzID0gc3dpcGVyLnRvdWNoZXM7XG4gICAgdmFyIHJ0bCA9IHN3aXBlci5ydGxUcmFuc2xhdGU7XG4gICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICB2YXIgc2xpZGVzR3JpZCA9IHN3aXBlci5zbGlkZXNHcmlkO1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcbiAgICB2YXIgZSA9IGV2ZW50O1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHsgZSA9IGUub3JpZ2luYWxFdmVudDsgfVxuICAgIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICAgIH1cbiAgICBkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MgPSBmYWxzZTtcbiAgICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIFRpbWUgZGlmZlxuICAgIHZhciB0b3VjaEVuZFRpbWUgPSBVdGlscy5ub3coKTtcbiAgICB2YXIgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gICAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gICAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKGUpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RhcCcsIGUpO1xuICAgICAgaWYgKHRpbWVEaWZmIDwgMzAwICYmICh0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUpID4gMzAwKSB7XG4gICAgICAgIGlmIChkYXRhLmNsaWNrVGltZW91dCkgeyBjbGVhclRpbWVvdXQoZGF0YS5jbGlja1RpbWVvdXQpOyB9XG4gICAgICAgIGRhdGEuY2xpY2tUaW1lb3V0ID0gVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2NsaWNrJywgZSk7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgICB9XG4gICAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgKHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSkgPCAzMDApIHtcbiAgICAgICAgaWYgKGRhdGEuY2xpY2tUaW1lb3V0KSB7IGNsZWFyVGltZW91dChkYXRhLmNsaWNrVGltZW91dCk7IH1cbiAgICAgICAgc3dpcGVyLmVtaXQoJ2RvdWJsZVRhcCcsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRhdGEubGFzdENsaWNrVGltZSA9IFV0aWxzLm5vdygpO1xuICAgIFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgeyBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7IH1cbiAgICB9KTtcblxuICAgIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG5cbiAgICB2YXIgY3VycmVudFBvcztcbiAgICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPCAtc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50UG9zID4gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPCBzbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtKSB7XG4gICAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHZhciBsYXN0TW92ZUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICAgIHZhciB2ZWxvY2l0eUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuXG4gICAgICAgICAgdmFyIGRpc3RhbmNlID0gbGFzdE1vdmVFdmVudC5wb3NpdGlvbiAtIHZlbG9jaXR5RXZlbnQucG9zaXRpb247XG4gICAgICAgICAgdmFyIHRpbWUgPSBsYXN0TW92ZUV2ZW50LnRpbWUgLSB2ZWxvY2l0eUV2ZW50LnRpbWU7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSAvPSAyO1xuICAgICAgICAgIGlmIChNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpIDwgcGFyYW1zLmZyZWVNb2RlTWluaW11bVZlbG9jaXR5KSB7XG4gICAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB0aGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBhIGZpbmdlciB0aGVuIHJlbGVhc2VkLlxuICAgICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuICAgICAgICAgIGlmICh0aW1lID4gMTUwIHx8IChVdGlscy5ub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSkgPiAzMDApIHtcbiAgICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ICo9IHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbztcblxuICAgICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb24gPSAxMDAwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1SYXRpbztcbiAgICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuXG4gICAgICAgIHZhciBuZXdQb3NpdGlvbiA9IHN3aXBlci50cmFuc2xhdGUgKyBtb21lbnR1bURpc3RhbmNlO1xuICAgICAgICBpZiAocnRsKSB7IG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uOyB9XG5cbiAgICAgICAgdmFyIGRvQm91bmNlID0gZmFsc2U7XG4gICAgICAgIHZhciBhZnRlckJvdW5jZVBvc2l0aW9uO1xuICAgICAgICB2YXIgYm91bmNlQW1vdW50ID0gTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSAqIDIwICogcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgICAgdmFyIG5lZWRzTG9vcEZpeDtcbiAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgICBpZiAobmV3UG9zaXRpb24gKyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgPCAtYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7IG5lZWRzTG9vcEZpeCA9IHRydWU7IH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7IG5lZWRzTG9vcEZpeCA9IHRydWU7IH1cbiAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICB2YXIgbmV4dFNsaWRlO1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzbmFwR3JpZFtqXSA+IC1uZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgICBuZXh0U2xpZGUgPSBqO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuZWVkc0xvb3BGaXgpIHtcbiAgICAgICAgICBzd2lwZXIub25jZSgndHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKChuZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlICYmIGRvQm91bmNlKSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG5cbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHBhcmFtcy5zcGVlZCk7XG4gICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci52ZWxvY2l0eSkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghcGFyYW1zLmZyZWVNb2RlTW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gICAgdmFyIHN0b3BJbmRleCA9IDA7XG4gICAgdmFyIGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwXSkge1xuICAgICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwXSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICAgIHZhciByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcblxuICAgIGlmICh0aW1lRGlmZiA+IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAgIC8vIExvbmcgdG91Y2hlc1xuICAgICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHsgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTsgfVxuICAgICAgICBlbHNlIHsgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIGlmIChyYXRpbyA+ICgxIC0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykpIHsgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTsgfVxuICAgICAgICBlbHNlIHsgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTsgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICAgIGlmICghcGFyYW1zLnNob3J0U3dpcGVzKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25SZXNpemUgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgdmFyIGVsID0gc3dpcGVyLmVsO1xuXG4gICAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIC8vIFNhdmUgbG9ja3NcbiAgICB2YXIgYWxsb3dTbGlkZU5leHQgPSBzd2lwZXIuYWxsb3dTbGlkZU5leHQ7XG4gICAgdmFyIGFsbG93U2xpZGVQcmV2ID0gc3dpcGVyLmFsbG93U2xpZGVQcmV2O1xuICAgIHZhciBzbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZDtcblxuICAgIC8vIERpc2FibGUgbG9ja3Mgb24gcmVzaXplXG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICB2YXIgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgoc3dpcGVyLnRyYW5zbGF0ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfVxuICAgIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkNsaWNrIChlKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciB0b3VjaEV2ZW50cyA9IHN3aXBlci50b3VjaEV2ZW50cztcbiAgICB2YXIgZWwgPSBzd2lwZXIuZWw7XG4gICAgdmFyIHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG5cbiAgICB7XG4gICAgICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgICAgIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgICAgIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG4gICAgfVxuXG4gICAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcblxuICAgIHZhciB0YXJnZXQgPSBwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gZWwgOiB3cmFwcGVyRWw7XG4gICAgdmFyIGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG5cbiAgICAvLyBUb3VjaCBFdmVudHNcbiAgICB7XG4gICAgICBpZiAoIVN1cHBvcnQudG91Y2ggJiYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykpIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuc3RhcnQsIHN3aXBlci5vblRvdWNoU3RhcnQsIGZhbHNlKTtcbiAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBjYXB0dXJlKTtcbiAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMuZW5kLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBjYXB0dXJlIH0gOiBjYXB0dXJlKTtcbiAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIURldmljZS5pb3MgJiYgIURldmljZS5hbmRyb2lkKSB8fCAocGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgIVN1cHBvcnQudG91Y2ggJiYgRGV2aWNlLmlvcykpIHtcbiAgICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgICAgIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHN3aXBlci5vbkNsaWNrLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXNpemUgaGFuZGxlclxuICAgIHN3aXBlci5vbigoRGV2aWNlLmlvcyB8fCBEZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScpLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgICB2YXIgdG91Y2hFdmVudHMgPSBzd2lwZXIudG91Y2hFdmVudHM7XG4gICAgdmFyIGVsID0gc3dpcGVyLmVsO1xuICAgIHZhciB3cmFwcGVyRWwgPSBzd2lwZXIud3JhcHBlckVsO1xuXG4gICAgdmFyIHRhcmdldCA9IHBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBlbCA6IHdyYXBwZXJFbDtcbiAgICB2YXIgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcblxuICAgIC8vIFRvdWNoIEV2ZW50c1xuICAgIHtcbiAgICAgIGlmICghU3VwcG9ydC50b3VjaCAmJiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoU3VwcG9ydC50b3VjaCkge1xuICAgICAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSB0b3VjaEV2ZW50cy5zdGFydCA9PT0gJ29uVG91Y2hTdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlLmlvcyAmJiAhRGV2aWNlLmFuZHJvaWQpIHx8IChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhU3VwcG9ydC50b3VjaCAmJiBEZXZpY2UuaW9zKSkge1xuICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBzd2lwZXIub25Ub3VjaEVuZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICAgICAgaWYgKHBhcmFtcy5wcmV2ZW50Q2xpY2tzIHx8IHBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24pIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlc2l6ZSBoYW5kbGVyXG4gICAgc3dpcGVyLm9mZigoRGV2aWNlLmlvcyB8fCBEZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScpLCBvblJlc2l6ZSk7XG4gIH1cblxuICB2YXIgZXZlbnRzID0ge1xuICAgIGF0dGFjaEV2ZW50czogYXR0YWNoRXZlbnRzLFxuICAgIGRldGFjaEV2ZW50czogZGV0YWNoRXZlbnRzLFxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldEJyZWFrcG9pbnQgKCkge1xuICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICB2YXIgaW5pdGlhbGl6ZWQgPSBzd2lwZXIuaW5pdGlhbGl6ZWQ7XG4gICAgdmFyIGxvb3BlZFNsaWRlcyA9IHN3aXBlci5sb29wZWRTbGlkZXM7IGlmICggbG9vcGVkU2xpZGVzID09PSB2b2lkIDAgKSBsb29wZWRTbGlkZXMgPSAwO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgICBpZiAoIWJyZWFrcG9pbnRzIHx8IChicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSkgeyByZXR1cm47IH1cblxuICAgIC8vIFNldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gICAgdmFyIGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cyk7XG5cbiAgICBpZiAoYnJlYWtwb2ludCAmJiBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgIT09IGJyZWFrcG9pbnQpIHtcbiAgICAgIHZhciBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChicmVha3BvaW50T25seVBhcmFtcykge1xuICAgICAgICBbJ3NsaWRlc1BlclZpZXcnLCAnc3BhY2VCZXR3ZWVuJywgJ3NsaWRlc1Blckdyb3VwJ10uZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgICAgICB2YXIgcGFyYW1WYWx1ZSA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXTtcbiAgICAgICAgICBpZiAodHlwZW9mIHBhcmFtVmFsdWUgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmIChwYXJhbSA9PT0gJ3NsaWRlc1BlclZpZXcnICYmIChwYXJhbVZhbHVlID09PSAnQVVUTycgfHwgcGFyYW1WYWx1ZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gJ2F1dG8nO1xuICAgICAgICAgIH0gZWxzZSBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3Jykge1xuICAgICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VGbG9hdChwYXJhbVZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VJbnQocGFyYW1WYWx1ZSwgMTApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICAgICAgdmFyIGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgICAgIHZhciBuZWVkc1JlTG9vcCA9IHBhcmFtcy5sb29wICYmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlclZpZXcgIT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IGRpcmVjdGlvbkNoYW5nZWQpO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgfSk7XG5cbiAgICAgIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG5cbiAgICAgIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbygoYWN0aXZlSW5kZXggLSBsb29wZWRTbGlkZXMpICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnYnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEJyZWFrcG9pbnQgKGJyZWFrcG9pbnRzKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aFxuICAgIGlmICghYnJlYWtwb2ludHMpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfVxuICAgIHZhciBicmVha3BvaW50ID0gZmFsc2U7XG4gICAgdmFyIHBvaW50cyA9IFtdO1xuICAgIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChwb2ludCkge1xuICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgIH0pO1xuICAgIHBvaW50cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBwYXJzZUludChhLCAxMCkgLSBwYXJzZUludChiLCAxMCk7IH0pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0ludmVyc2UpIHtcbiAgICAgICAgaWYgKHBvaW50IDw9IHdpbi5pbm5lcldpZHRoKSB7XG4gICAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBvaW50ID49IHdpbi5pbm5lcldpZHRoICYmICFicmVha3BvaW50KSB7XG4gICAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG4gIH1cblxuICB2YXIgYnJlYWtwb2ludHMgPSB7IHNldEJyZWFrcG9pbnQ6IHNldEJyZWFrcG9pbnQsIGdldEJyZWFrcG9pbnQ6IGdldEJyZWFrcG9pbnQgfTtcblxuICBmdW5jdGlvbiBhZGRDbGFzc2VzICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgY2xhc3NOYW1lcyA9IHN3aXBlci5jbGFzc05hbWVzO1xuICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgIHZhciBydGwgPSBzd2lwZXIucnRsO1xuICAgIHZhciAkZWwgPSBzd2lwZXIuJGVsO1xuICAgIHZhciBzdWZmaXhlcyA9IFtdO1xuXG4gICAgc3VmZml4ZXMucHVzaCgnaW5pdGlhbGl6ZWQnKTtcbiAgICBzdWZmaXhlcy5wdXNoKHBhcmFtcy5kaXJlY3Rpb24pO1xuXG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgc3VmZml4ZXMucHVzaCgnZnJlZS1tb2RlJyk7XG4gICAgfVxuICAgIGlmICghU3VwcG9ydC5mbGV4Ym94KSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKCduby1mbGV4Ym94Jyk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3VmZml4ZXMucHVzaCgnYXV0b2hlaWdodCcpO1xuICAgIH1cbiAgICBpZiAocnRsKSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKCdydGwnKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgICBzdWZmaXhlcy5wdXNoKCdtdWx0aXJvdycpO1xuICAgIH1cbiAgICBpZiAoRGV2aWNlLmFuZHJvaWQpIHtcbiAgICAgIHN1ZmZpeGVzLnB1c2goJ2FuZHJvaWQnKTtcbiAgICB9XG4gICAgaWYgKERldmljZS5pb3MpIHtcbiAgICAgIHN1ZmZpeGVzLnB1c2goJ2lvcycpO1xuICAgIH1cbiAgICAvLyBXUDggVG91Y2ggRXZlbnRzIEZpeFxuICAgIGlmICgoQnJvd3Nlci5pc0lFIHx8IEJyb3dzZXIuaXNFZGdlKSAmJiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSkge1xuICAgICAgc3VmZml4ZXMucHVzaCgoXCJ3cDgtXCIgKyAocGFyYW1zLmRpcmVjdGlvbikpKTtcbiAgICB9XG5cbiAgICBzdWZmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChzdWZmaXgpIHtcbiAgICAgIGNsYXNzTmFtZXMucHVzaChwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyArIHN1ZmZpeCk7XG4gICAgfSk7XG5cbiAgICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcyAoKSB7XG4gICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBzd2lwZXIuY2xhc3NOYW1lcztcblxuICAgICRlbC5yZW1vdmVDbGFzcyhjbGFzc05hbWVzLmpvaW4oJyAnKSk7XG4gIH1cblxuICB2YXIgY2xhc3NlcyA9IHsgYWRkQ2xhc3NlczogYWRkQ2xhc3NlcywgcmVtb3ZlQ2xhc3NlczogcmVtb3ZlQ2xhc3NlcyB9O1xuXG4gIGZ1bmN0aW9uIGxvYWRJbWFnZSAoaW1hZ2VFbCwgc3JjLCBzcmNzZXQsIHNpemVzLCBjaGVja0ZvckNvbXBsZXRlLCBjYWxsYmFjaykge1xuICAgIHZhciBpbWFnZTtcbiAgICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7IGNhbGxiYWNrKCk7IH1cbiAgICB9XG4gICAgaWYgKCFpbWFnZUVsLmNvbXBsZXRlIHx8ICFjaGVja0ZvckNvbXBsZXRlKSB7XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGltYWdlID0gbmV3IHdpbi5JbWFnZSgpO1xuICAgICAgICBpbWFnZS5vbmxvYWQgPSBvblJlYWR5O1xuICAgICAgICBpbWFnZS5vbmVycm9yID0gb25SZWFkeTtcbiAgICAgICAgaWYgKHNpemVzKSB7XG4gICAgICAgICAgaW1hZ2Uuc2l6ZXMgPSBzaXplcztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgaW1hZ2Uuc3Jjc2V0ID0gc3Jjc2V0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uUmVhZHkoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW1hZ2UgYWxyZWFkeSBsb2FkZWQuLi5cbiAgICAgIG9uUmVhZHkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcmVsb2FkSW1hZ2VzICgpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuaW1hZ2VzVG9Mb2FkID0gc3dpcGVyLiRlbC5maW5kKCdpbWcnKTtcbiAgICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSB7IHN3aXBlci5pbWFnZXNMb2FkZWQgKz0gMTsgfVxuICAgICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVwZGF0ZU9uSW1hZ2VzUmVhZHkpIHsgc3dpcGVyLnVwZGF0ZSgpOyB9XG4gICAgICAgIHN3aXBlci5lbWl0KCdpbWFnZXNSZWFkeScpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBpbWFnZUVsID0gc3dpcGVyLmltYWdlc1RvTG9hZFtpXTtcbiAgICAgIHN3aXBlci5sb2FkSW1hZ2UoXG4gICAgICAgIGltYWdlRWwsXG4gICAgICAgIGltYWdlRWwuY3VycmVudFNyYyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc3JjJyksXG4gICAgICAgIGltYWdlRWwuc3Jjc2V0IHx8IGltYWdlRWwuZ2V0QXR0cmlidXRlKCdzcmNzZXQnKSxcbiAgICAgICAgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgb25SZWFkeVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW1hZ2VzID0ge1xuICAgIGxvYWRJbWFnZTogbG9hZEltYWdlLFxuICAgIHByZWxvYWRJbWFnZXM6IHByZWxvYWRJbWFnZXMsXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICB2YXIgd2FzTG9ja2VkID0gc3dpcGVyLmlzTG9ja2VkO1xuXG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICAgIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9ICFzd2lwZXIuaXNMb2NrZWQ7XG5cbiAgICAvLyBldmVudHNcbiAgICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHsgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpOyB9XG5cbiAgICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjaGVja092ZXJmbG93JDEgPSB7IGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3cgfTtcblxuICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgaW5pdDogdHJ1ZSxcbiAgICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgICB0b3VjaEV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgIHNwZWVkOiAzMDAsXG4gICAgLy9cbiAgICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuXG4gICAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHAsIHdpdGggVUlXZWJWaWV3KS5cbiAgICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICAgIGVkZ2VTd2lwZVRocmVzaG9sZDogMjAsXG5cbiAgICAvLyBGcmVlIG1vZGVcbiAgICBmcmVlTW9kZTogZmFsc2UsXG4gICAgZnJlZU1vZGVNb21lbnR1bTogdHJ1ZSxcbiAgICBmcmVlTW9kZU1vbWVudHVtUmF0aW86IDEsXG4gICAgZnJlZU1vZGVNb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgICBmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gICAgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gICAgZnJlZU1vZGVTdGlja3k6IGZhbHNlLFxuICAgIGZyZWVNb2RlTWluaW11bVZlbG9jaXR5OiAwLjAyLFxuXG4gICAgLy8gQXV0b2hlaWdodFxuICAgIGF1dG9IZWlnaHQ6IGZhbHNlLFxuXG4gICAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG5cbiAgICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICAgIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuXG4gICAgLy8gRWZmZWN0c1xuICAgIGVmZmVjdDogJ3NsaWRlJywgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICAgIGJyZWFrcG9pbnRzSW52ZXJzZTogZmFsc2UsXG5cbiAgICAvLyBTbGlkZXMgZ3JpZFxuICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgIHNsaWRlc1BlckNvbHVtbjogMSxcbiAgICBzbGlkZXNQZXJDb2x1bW5GaWxsOiAnY29sdW1uJyxcbiAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLCAvLyBpbiBweFxuICAgIHNsaWRlc09mZnNldEFmdGVyOiAwLCAvLyBpbiBweFxuICAgIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gICAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcblxuICAgIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gICAgd2F0Y2hPdmVyZmxvdzogZmFsc2UsXG5cbiAgICAvLyBSb3VuZCBsZW5ndGhcbiAgICByb3VuZExlbmd0aHM6IGZhbHNlLFxuXG4gICAgLy8gVG91Y2hlc1xuICAgIHRvdWNoUmF0aW86IDEsXG4gICAgdG91Y2hBbmdsZTogNDUsXG4gICAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgICBsb25nU3dpcGVzOiB0cnVlLFxuICAgIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICAgIGxvbmdTd2lwZXNNczogMzAwLFxuICAgIGZvbGxvd0ZpbmdlcjogdHJ1ZSxcbiAgICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgICB0aHJlc2hvbGQ6IDAsXG4gICAgdG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uOiB0cnVlLFxuICAgIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gICAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG5cbiAgICAvLyBVbmlxdWUgTmF2aWdhdGlvbiBFbGVtZW50c1xuICAgIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuXG4gICAgLy8gUmVzaXN0YW5jZVxuICAgIHJlc2lzdGFuY2U6IHRydWUsXG4gICAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuXG4gICAgLy8gUHJvZ3Jlc3NcbiAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IGZhbHNlLFxuXG4gICAgLy8gQ3Vyc29yXG4gICAgZ3JhYkN1cnNvcjogZmFsc2UsXG5cbiAgICAvLyBDbGlja3NcbiAgICBwcmV2ZW50Q2xpY2tzOiB0cnVlLFxuICAgIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcblxuICAgIC8vIEltYWdlc1xuICAgIHByZWxvYWRJbWFnZXM6IHRydWUsXG4gICAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcblxuICAgIC8vIGxvb3BcbiAgICBsb29wOiBmYWxzZSxcbiAgICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgICBsb29wZWRTbGlkZXM6IG51bGwsXG4gICAgbG9vcEZpbGxHcm91cFdpdGhCbGFuazogZmFsc2UsXG5cbiAgICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgICBzd2lwZUhhbmRsZXI6IG51bGwsIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gICAgbm9Td2lwaW5nOiB0cnVlLFxuICAgIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICAgIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuXG4gICAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgICBwYXNzaXZlTGlzdGVuZXJzOiB0cnVlLFxuXG4gICAgLy8gTlNcbiAgICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLWNvbnRhaW5lci0nLCAvLyBORVdcbiAgICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgICBzbGlkZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWFjdGl2ZScsXG4gICAgc2xpZGVEdXBsaWNhdGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUtYWN0aXZlJyxcbiAgICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgICBzbGlkZUR1cGxpY2F0ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZScsXG4gICAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gICAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICAgIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICAgIHNsaWRlRHVwbGljYXRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1wcmV2JyxcbiAgICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG5cbiAgICAvLyBDYWxsYmFja3NcbiAgICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIH07XG5cbiAgLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5cbiAgdmFyIHByb3RvdHlwZXMgPSB7XG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgdHJhbnNsYXRlOiB0cmFuc2xhdGUsXG4gICAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbiQxLFxuICAgIHNsaWRlOiBzbGlkZSxcbiAgICBsb29wOiBsb29wLFxuICAgIGdyYWJDdXJzb3I6IGdyYWJDdXJzb3IsXG4gICAgbWFuaXB1bGF0aW9uOiBtYW5pcHVsYXRpb24sXG4gICAgZXZlbnRzOiBldmVudHMsXG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGNoZWNrT3ZlcmZsb3c6IGNoZWNrT3ZlcmZsb3ckMSxcbiAgICBjbGFzc2VzOiBjbGFzc2VzLFxuICAgIGltYWdlczogaW1hZ2VzLFxuICB9O1xuXG4gIHZhciBleHRlbmRlZERlZmF1bHRzID0ge307XG5cbiAgdmFyIFN3aXBlciA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN3aXBlckNsYXNzKSB7XG4gICAgZnVuY3Rpb24gU3dpcGVyKCkge1xuICAgICAgdmFyIGFzc2lnbjtcblxuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG4gICAgICB2YXIgZWw7XG4gICAgICB2YXIgcGFyYW1zO1xuICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAxICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgIHBhcmFtcyA9IGFyZ3NbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoYXNzaWduID0gYXJncywgZWwgPSBhc3NpZ25bMF0sIHBhcmFtcyA9IGFzc2lnblsxXSk7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmFtcykgeyBwYXJhbXMgPSB7fTsgfVxuXG4gICAgICBwYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcyk7XG4gICAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgeyBwYXJhbXMuZWwgPSBlbDsgfVxuXG4gICAgICBTd2lwZXJDbGFzcy5jYWxsKHRoaXMsIHBhcmFtcyk7XG5cbiAgICAgIE9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3RvdHlwZUdyb3VwKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm90b01ldGhvZCkge1xuICAgICAgICAgIGlmICghU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0pIHtcbiAgICAgICAgICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU3dpcGVyIEluc3RhbmNlXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLm1vZHVsZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN3aXBlci5tb2R1bGVzID0ge307XG4gICAgICB9XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIubW9kdWxlcykuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlTmFtZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gc3dpcGVyLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICAgIGlmIChtb2R1bGUucGFyYW1zKSB7XG4gICAgICAgICAgdmFyIG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG1vZHVsZS5wYXJhbXMpWzBdO1xuICAgICAgICAgIHZhciBtb2R1bGVQYXJhbXMgPSBtb2R1bGUucGFyYW1zW21vZHVsZVBhcmFtTmFtZV07XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgICAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7IGVuYWJsZWQ6IHRydWUgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0J1xuICAgICAgICAgICAgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgeyBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHsgZW5hYmxlZDogZmFsc2UgfTsgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggbW9kdWxlcyBwYXJhbXNcbiAgICAgIHZhciBzd2lwZXJQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIGRlZmF1bHRzKTtcbiAgICAgIHN3aXBlci51c2VNb2R1bGVzUGFyYW1zKHN3aXBlclBhcmFtcyk7XG5cbiAgICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcbiAgICAgIHN3aXBlci5wYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IFV0aWxzLmV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBwYXJhbXMpO1xuXG4gICAgICAvLyBTYXZlIERvbSBsaWJcbiAgICAgIHN3aXBlci4kID0gJDtcblxuICAgICAgLy8gRmluZCBlbFxuICAgICAgdmFyICRlbCA9ICQoc3dpcGVyLnBhcmFtcy5lbCk7XG4gICAgICBlbCA9ICRlbFswXTtcblxuICAgICAgaWYgKCFlbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIHN3aXBlcnMgPSBbXTtcbiAgICAgICAgJGVsLmVhY2goZnVuY3Rpb24gKGluZGV4LCBjb250YWluZXJFbCkge1xuICAgICAgICAgIHZhciBuZXdQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcywgeyBlbDogY29udGFpbmVyRWwgfSk7XG4gICAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gc3dpcGVycztcbiAgICAgIH1cblxuICAgICAgZWwuc3dpcGVyID0gc3dpcGVyO1xuICAgICAgJGVsLmRhdGEoJ3N3aXBlcicsIHN3aXBlcik7XG5cbiAgICAgIC8vIEZpbmQgV3JhcHBlclxuICAgICAgdmFyICR3cmFwcGVyRWwgPSAkZWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzKSkpO1xuXG4gICAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgICRlbDogJGVsLFxuICAgICAgICBlbDogZWwsXG4gICAgICAgICR3cmFwcGVyRWw6ICR3cmFwcGVyRWwsXG4gICAgICAgIHdyYXBwZXJFbDogJHdyYXBwZXJFbFswXSxcblxuICAgICAgICAvLyBDbGFzc2VzXG4gICAgICAgIGNsYXNzTmFtZXM6IFtdLFxuXG4gICAgICAgIC8vIFNsaWRlc1xuICAgICAgICBzbGlkZXM6ICQoKSxcbiAgICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcblxuICAgICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgICBpc0hvcml6b250YWw6IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbCgpIHtcbiAgICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgfSxcbiAgICAgICAgaXNWZXJ0aWNhbDogZnVuY3Rpb24gaXNWZXJ0aWNhbCgpIHtcbiAgICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICAgIH0sXG4gICAgICAgIC8vIFJUTFxuICAgICAgICBydGw6IChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgICAgcnRsVHJhbnNsYXRlOiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnICYmIChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgICAgd3JvbmdSVEw6ICR3cmFwcGVyRWwuY3NzKCdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCcsXG5cbiAgICAgICAgLy8gSW5kZXhlc1xuICAgICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgICAgcmVhbEluZGV4OiAwLFxuXG4gICAgICAgIC8vXG4gICAgICAgIGlzQmVnaW5uaW5nOiB0cnVlLFxuICAgICAgICBpc0VuZDogZmFsc2UsXG5cbiAgICAgICAgLy8gUHJvcHNcbiAgICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxuXG4gICAgICAgIC8vIExvY2tzXG4gICAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldixcblxuICAgICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgICAgdG91Y2hFdmVudHM6IChmdW5jdGlvbiB0b3VjaEV2ZW50cygpIHtcbiAgICAgICAgICB2YXIgdG91Y2ggPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJ107XG4gICAgICAgICAgdmFyIGRlc2t0b3AgPSBbJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCddO1xuICAgICAgICAgIGlmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICAgIGRlc2t0b3AgPSBbJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJtb3ZlJywgJ3BvaW50ZXJ1cCddO1xuICAgICAgICAgIH0gZWxzZSBpZiAoU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICAgIGRlc2t0b3AgPSBbJ01TUG9pbnRlckRvd24nLCAnTVNQb2ludGVyTW92ZScsICdNU1BvaW50ZXJVcCddO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNUb3VjaCA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiB0b3VjaFswXSxcbiAgICAgICAgICAgIG1vdmU6IHRvdWNoWzFdLFxuICAgICAgICAgICAgZW5kOiB0b3VjaFsyXSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0Rlc2t0b3AgPSB7XG4gICAgICAgICAgICBzdGFydDogZGVza3RvcFswXSxcbiAgICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgICBlbmQ6IGRlc2t0b3BbMl0sXG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gU3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgICB9KCkpLFxuICAgICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBhbGxvd1RocmVzaG9sZE1vdmU6IHVuZGVmaW5lZCxcbiAgICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgICAgZm9ybUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbycsXG4gICAgICAgICAgLy8gTGFzdCBjbGljayB0aW1lXG4gICAgICAgICAgbGFzdENsaWNrVGltZTogVXRpbHMubm93KCksXG4gICAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgICAgLy8gVmVsb2NpdGllc1xuICAgICAgICAgIHZlbG9jaXRpZXM6IFtdLFxuICAgICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgICBpc1RvdWNoRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIENsaWNrc1xuICAgICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuXG4gICAgICAgIC8vIFRvdWNoZXNcbiAgICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG5cbiAgICAgICAgdG91Y2hlczoge1xuICAgICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgICAgY3VycmVudFg6IDAsXG4gICAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgICAgZGlmZjogMCxcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBJbWFnZXNcbiAgICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgICAgaW1hZ2VzTG9hZGVkOiAwLFxuXG4gICAgICB9KTtcblxuICAgICAgLy8gSW5zdGFsbCBNb2R1bGVzXG4gICAgICBzd2lwZXIudXNlTW9kdWxlcygpO1xuXG4gICAgICAvLyBJbml0XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5pbml0KSB7XG4gICAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBhcHAgaW5zdGFuY2VcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuXG4gICAgaWYgKCBTd2lwZXJDbGFzcyApIFN3aXBlci5fX3Byb3RvX18gPSBTd2lwZXJDbGFzcztcbiAgICBTd2lwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3dpcGVyQ2xhc3MgJiYgU3dpcGVyQ2xhc3MucHJvdG90eXBlICk7XG4gICAgU3dpcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN3aXBlcjtcblxuICAgIHZhciBzdGF0aWNBY2Nlc3NvcnMgPSB7IGV4dGVuZGVkRGVmYXVsdHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZGVmYXVsdHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sQ2xhc3M6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sJDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gICAgU3dpcGVyLnByb3RvdHlwZS5zbGlkZXNQZXJWaWV3RHluYW1pYyA9IGZ1bmN0aW9uIHNsaWRlc1BlclZpZXdEeW5hbWljICgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICAgIHZhciBzbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQ7XG4gICAgICB2YXIgc3dpcGVyU2l6ZSA9IHN3aXBlci5zaXplO1xuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyIHNwdiA9IDE7XG4gICAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHZhciBzbGlkZVNpemUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgdmFyIGJyZWFrTG9vcDtcbiAgICAgICAgZm9yICh2YXIgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSB7IGJyZWFrTG9vcCA9IHRydWU7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSQxID0gYWN0aXZlSW5kZXggLSAxOyBpJDEgPj0gMDsgaSQxIC09IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW2kkMV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpJDFdLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIHsgYnJlYWtMb29wID0gdHJ1ZTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSQyID0gYWN0aXZlSW5kZXggKyAxOyBpJDIgPCBzbGlkZXMubGVuZ3RoOyBpJDIgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNHcmlkW2kkMl0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHNwdjtcbiAgICB9O1xuXG4gICAgU3dpcGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICAvLyBCcmVha3BvaW50c1xuICAgICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgICAgdmFyIG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgfVxuICAgICAgdmFyIHRyYW5zbGF0ZWQ7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCd1cGRhdGUnKTtcbiAgICB9O1xuXG4gICAgU3dpcGVyLnByb3RvdHlwZS5jaGFuZ2VEaXJlY3Rpb24gPSBmdW5jdGlvbiBjaGFuZ2VEaXJlY3Rpb24gKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgICAgaWYgKCBuZWVkVXBkYXRlID09PSB2b2lkIDAgKSBuZWVkVXBkYXRlID0gdHJ1ZTtcblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuICAgICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICB9XG4gICAgICBpZiAoKG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbikgfHwgKG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykpIHtcbiAgICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLiRlbFxuICAgICAgICAucmVtb3ZlQ2xhc3MoKFwiXCIgKyAoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIGN1cnJlbnREaXJlY3Rpb24gKyBcIiB3cDgtXCIgKyBjdXJyZW50RGlyZWN0aW9uKSlcbiAgICAgICAgLmFkZENsYXNzKChcIlwiICsgKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBuZXdEaXJlY3Rpb24pKTtcblxuICAgICAgaWYgKChCcm93c2VyLmlzSUUgfHwgQnJvd3Nlci5pc0VkZ2UpICYmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMgfHwgU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpKSB7XG4gICAgICAgIHN3aXBlci4kZWwuYWRkQ2xhc3MoKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCJ3cDgtXCIgKyBuZXdEaXJlY3Rpb24pKTtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG5cbiAgICAgIHN3aXBlci5zbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVJbmRleCwgc2xpZGVFbCkge1xuICAgICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgICBpZiAobmVlZFVwZGF0ZSkgeyBzd2lwZXIudXBkYXRlKCk7IH1cblxuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9O1xuXG4gICAgU3dpcGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gaW5pdCAoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7XG5cbiAgICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZGQgQ2xhc3Nlc1xuICAgICAgc3dpcGVyLmFkZENsYXNzZXMoKTtcblxuICAgICAgLy8gQ3JlYXRlIGxvb3BcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIHNpemVcbiAgICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG5cbiAgICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgICBzd2lwZXIucHJlbG9hZEltYWdlcygpO1xuICAgICAgfVxuXG4gICAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICAgIH1cblxuICAgICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpO1xuXG4gICAgICAvLyBJbml0IEZsYWdcbiAgICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgIC8vIEVtaXRcbiAgICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgfTtcblxuICAgIFN3aXBlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgICAgaWYgKCBkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwICkgZGVsZXRlSW5zdGFuY2UgPSB0cnVlO1xuICAgICAgaWYgKCBjbGVhblN0eWxlcyA9PT0gdm9pZCAwICkgY2xlYW5TdHlsZXMgPSB0cnVlO1xuXG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG5cbiAgICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgICAgLy8gSW5pdCBGbGFnXG4gICAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgICAgc3dpcGVyLmRldGFjaEV2ZW50cygpO1xuXG4gICAgICAvLyBEZXN0cm95IGxvb3BcbiAgICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgICAkZWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgJHdyYXBwZXJFbC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgICBzbGlkZXNcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhbXG4gICAgICAgICAgICAgIHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyxcbiAgICAgICAgICAgICAgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsXG4gICAgICAgICAgICAgIHBhcmFtcy5zbGlkZU5leHRDbGFzcyxcbiAgICAgICAgICAgICAgcGFyYW1zLnNsaWRlUHJldkNsYXNzIF0uam9pbignICcpKVxuICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcbiAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpXG4gICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItY29sdW1uJylcbiAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1yb3cnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgICAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcbiAgICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGRlbGV0ZUluc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgICBzd2lwZXIuJGVsWzBdLnN3aXBlciA9IG51bGw7XG4gICAgICAgIHN3aXBlci4kZWwuZGF0YSgnc3dpcGVyJywgbnVsbCk7XG4gICAgICAgIFV0aWxzLmRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIFN3aXBlci5leHRlbmREZWZhdWx0cyA9IGZ1bmN0aW9uIGV4dGVuZERlZmF1bHRzIChuZXdEZWZhdWx0cykge1xuICAgICAgVXRpbHMuZXh0ZW5kKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgICB9O1xuXG4gICAgc3RhdGljQWNjZXNzb3JzLmV4dGVuZGVkRGVmYXVsdHMuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gICAgfTtcblxuICAgIHN0YXRpY0FjY2Vzc29ycy5kZWZhdWx0cy5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfTtcblxuICAgIHN0YXRpY0FjY2Vzc29ycy5DbGFzcy5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gU3dpcGVyQ2xhc3M7XG4gICAgfTtcblxuICAgIHN0YXRpY0FjY2Vzc29ycy4kLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiAkO1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3dpcGVyLCBzdGF0aWNBY2Nlc3NvcnMgKTtcblxuICAgIHJldHVybiBTd2lwZXI7XG4gIH0oU3dpcGVyQ2xhc3MpKTtcblxuICB2YXIgRGV2aWNlJDEgPSB7XG4gICAgbmFtZTogJ2RldmljZScsXG4gICAgcHJvdG86IHtcbiAgICAgIGRldmljZTogRGV2aWNlLFxuICAgIH0sXG4gICAgc3RhdGljOiB7XG4gICAgICBkZXZpY2U6IERldmljZSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBTdXBwb3J0JDEgPSB7XG4gICAgbmFtZTogJ3N1cHBvcnQnLFxuICAgIHByb3RvOiB7XG4gICAgICBzdXBwb3J0OiBTdXBwb3J0LFxuICAgIH0sXG4gICAgc3RhdGljOiB7XG4gICAgICBzdXBwb3J0OiBTdXBwb3J0LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEJyb3dzZXIkMSA9IHtcbiAgICBuYW1lOiAnYnJvd3NlcicsXG4gICAgcHJvdG86IHtcbiAgICAgIGJyb3dzZXI6IEJyb3dzZXIsXG4gICAgfSxcbiAgICBzdGF0aWM6IHtcbiAgICAgIGJyb3dzZXI6IEJyb3dzZXIsXG4gICAgfSxcbiAgfTtcblxuICB2YXIgUmVzaXplID0ge1xuICAgIG5hbWU6ICdyZXNpemUnLFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIHJlc2l6ZToge1xuICAgICAgICAgIHJlc2l6ZUhhbmRsZXI6IGZ1bmN0aW9uIHJlc2l6ZUhhbmRsZXIoKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgncmVzaXplJyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXI6IGZ1bmN0aW9uIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcigpIHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgLy8gRW1pdCByZXNpemVcbiAgICAgICAgd2luLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHN3aXBlci5yZXNpemUucmVzaXplSGFuZGxlcik7XG5cbiAgICAgICAgLy8gRW1pdCBvcmllbnRhdGlvbmNoYW5nZVxuICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgICB3aW4ucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIE9ic2VydmVyID0ge1xuICAgIGZ1bmM6IHdpbi5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbi5XZWJraXRNdXRhdGlvbk9ic2VydmVyLFxuICAgIGF0dGFjaDogZnVuY3Rpb24gYXR0YWNoKHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuXG4gICAgICB2YXIgT2JzZXJ2ZXJGdW5jID0gT2JzZXJ2ZXIuZnVuYztcbiAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAod2luLnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICAgIHdpbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdpbi5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGEsXG4gICAgICB9KTtcblxuICAgICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICB9LFxuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghU3VwcG9ydC5vYnNlcnZlciB8fCAhc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgeyByZXR1cm47IH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICAgIHZhciBjb250YWluZXJQYXJlbnRzID0gc3dpcGVyLiRlbC5wYXJlbnRzKCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goY29udGFpbmVyUGFyZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIE9ic2VydmUgY29udGFpbmVyXG4gICAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kZWxbMF0sIHsgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuIH0pO1xuXG4gICAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiR3cmFwcGVyRWxbMF0sIHsgYXR0cmlidXRlczogZmFsc2UgfSk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycyA9IFtdO1xuICAgIH0sXG4gIH07XG5cbiAgdmFyIE9ic2VydmVyJDEgPSB7XG4gICAgbmFtZTogJ29ic2VydmVyJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICAgIG9ic2VydmVQYXJlbnRzOiBmYWxzZSxcbiAgICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIG9ic2VydmVyOiB7XG4gICAgICAgICAgaW5pdDogT2JzZXJ2ZXIuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgYXR0YWNoOiBPYnNlcnZlci5hdHRhY2guYmluZChzd2lwZXIpLFxuICAgICAgICAgIGRlc3Ryb3k6IE9ic2VydmVyLmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9ic2VydmVyczogW10sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmluaXQoKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLm9ic2VydmVyLmRlc3Ryb3koKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgVmlydHVhbCA9IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShmb3JjZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcmVmID0gc3dpcGVyLnBhcmFtcztcbiAgICAgIHZhciBzbGlkZXNQZXJWaWV3ID0gcmVmLnNsaWRlc1BlclZpZXc7XG4gICAgICB2YXIgc2xpZGVzUGVyR3JvdXAgPSByZWYuc2xpZGVzUGVyR3JvdXA7XG4gICAgICB2YXIgY2VudGVyZWRTbGlkZXMgPSByZWYuY2VudGVyZWRTbGlkZXM7XG4gICAgICB2YXIgcmVmJDEgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgICB2YXIgYWRkU2xpZGVzQmVmb3JlID0gcmVmJDEuYWRkU2xpZGVzQmVmb3JlO1xuICAgICAgdmFyIGFkZFNsaWRlc0FmdGVyID0gcmVmJDEuYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICB2YXIgcmVmJDIgPSBzd2lwZXIudmlydHVhbDtcbiAgICAgIHZhciBwcmV2aW91c0Zyb20gPSByZWYkMi5mcm9tO1xuICAgICAgdmFyIHByZXZpb3VzVG8gPSByZWYkMi50bztcbiAgICAgIHZhciBzbGlkZXMgPSByZWYkMi5zbGlkZXM7XG4gICAgICB2YXIgcHJldmlvdXNTbGlkZXNHcmlkID0gcmVmJDIuc2xpZGVzR3JpZDtcbiAgICAgIHZhciByZW5kZXJTbGlkZSA9IHJlZiQyLnJlbmRlclNsaWRlO1xuICAgICAgdmFyIHByZXZpb3VzT2Zmc2V0ID0gcmVmJDIub2Zmc2V0O1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcblxuICAgICAgdmFyIG9mZnNldFByb3A7XG4gICAgICBpZiAoc3dpcGVyLnJ0bFRyYW5zbGF0ZSkgeyBvZmZzZXRQcm9wID0gJ3JpZ2h0JzsgfVxuICAgICAgZWxzZSB7IG9mZnNldFByb3AgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJzsgfVxuXG4gICAgICB2YXIgc2xpZGVzQWZ0ZXI7XG4gICAgICB2YXIgc2xpZGVzQmVmb3JlO1xuICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIHNsaWRlc0FmdGVyID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgICAgc2xpZGVzQmVmb3JlID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzQWZ0ZXIgPSBzbGlkZXNQZXJWaWV3ICsgKHNsaWRlc1Blckdyb3VwIC0gMSkgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgICAgIHNsaWRlc0JlZm9yZSA9IHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICB9XG4gICAgICB2YXIgZnJvbSA9IE1hdGgubWF4KChhY3RpdmVJbmRleCB8fCAwKSAtIHNsaWRlc0JlZm9yZSwgMCk7XG4gICAgICB2YXIgdG8gPSBNYXRoLm1pbigoYWN0aXZlSW5kZXggfHwgMCkgKyBzbGlkZXNBZnRlciwgc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgdmFyIG9mZnNldCA9IChzd2lwZXIuc2xpZGVzR3JpZFtmcm9tXSB8fCAwKSAtIChzd2lwZXIuc2xpZGVzR3JpZFswXSB8fCAwKTtcblxuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci52aXJ0dWFsLCB7XG4gICAgICAgIGZyb206IGZyb20sXG4gICAgICAgIHRvOiB0byxcbiAgICAgICAgb2Zmc2V0OiBvZmZzZXQsXG4gICAgICAgIHNsaWRlc0dyaWQ6IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIG9uUmVuZGVyZWQoKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIGlmIChzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgICBpZiAoc3dpcGVyLnNsaWRlc0dyaWQgIT09IHByZXZpb3VzU2xpZGVzR3JpZCAmJiBvZmZzZXQgIT09IHByZXZpb3VzT2Zmc2V0KSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlcy5jc3Mob2Zmc2V0UHJvcCwgKG9mZnNldCArIFwicHhcIikpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbC5jYWxsKHN3aXBlciwge1xuICAgICAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgICAgIGZyb206IGZyb20sXG4gICAgICAgICAgdG86IHRvLFxuICAgICAgICAgIHNsaWRlczogKGZ1bmN0aW9uIGdldFNsaWRlcygpIHtcbiAgICAgICAgICAgIHZhciBzbGlkZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gMSkge1xuICAgICAgICAgICAgICBzbGlkZXNUb1JlbmRlci5wdXNoKHNsaWRlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVG9SZW5kZXI7XG4gICAgICAgICAgfSgpKSxcbiAgICAgICAgfSk7XG4gICAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHByZXBlbmRJbmRleGVzID0gW107XG4gICAgICB2YXIgYXBwZW5kSW5kZXhlcyA9IFtdO1xuICAgICAgaWYgKGZvcmNlKSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmZpbmQoKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykpKS5yZW1vdmUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBwcmV2aW91c0Zyb207IGkgPD0gcHJldmlvdXNUbzsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGkgPCBmcm9tIHx8IGkgPiB0bykge1xuICAgICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZCgoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSArIFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGkgKyBcIlxcXCJdXCIpKS5yZW1vdmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHNsaWRlcy5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICAgIGlmIChpJDEgPj0gZnJvbSAmJiBpJDEgPD0gdG8pIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHByZXZpb3VzVG8gPT09ICd1bmRlZmluZWQnIHx8IGZvcmNlKSB7XG4gICAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goaSQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGkkMSA+IHByZXZpb3VzVG8pIHsgYXBwZW5kSW5kZXhlcy5wdXNoKGkkMSk7IH1cbiAgICAgICAgICAgIGlmIChpJDEgPCBwcmV2aW91c0Zyb20pIHsgcHJlcGVuZEluZGV4ZXMucHVzaChpJDEpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhcHBlbmRJbmRleGVzLmZvckVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLmFwcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgICAgfSk7XG4gICAgICBwcmVwZW5kSW5kZXhlcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiIC0gYTsgfSkuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwucHJlcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbignLnN3aXBlci1zbGlkZScpLmNzcyhvZmZzZXRQcm9wLCAob2Zmc2V0ICsgXCJweFwiKSk7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgfSxcbiAgICByZW5kZXJTbGlkZTogZnVuY3Rpb24gcmVuZGVyU2xpZGUoc2xpZGUsIGluZGV4KSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyICRzbGlkZUVsID0gcGFyYW1zLnJlbmRlclNsaWRlXG4gICAgICAgID8gJChwYXJhbXMucmVuZGVyU2xpZGUuY2FsbChzd2lwZXIsIHNsaWRlLCBpbmRleCkpXG4gICAgICAgIDogJCgoXCI8ZGl2IGNsYXNzPVxcXCJcIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpICsgXCJcXFwiIGRhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIGluZGV4ICsgXCJcXFwiPlwiICsgc2xpZGUgKyBcIjwvZGl2PlwiKSk7XG4gICAgICBpZiAoISRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpIHsgJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7IH1cbiAgICAgIGlmIChwYXJhbXMuY2FjaGUpIHsgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gJHNsaWRlRWw7IH1cbiAgICAgIHJldHVybiAkc2xpZGVFbDtcbiAgICB9LFxuICAgIGFwcGVuZFNsaWRlOiBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0pIHsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzW2ldKTsgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXMpO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIH0sXG4gICAgcHJlcGVuZFNsaWRlOiBmdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIHZhciBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgICAgIHZhciBudW1iZXJPZk5ld1NsaWRlcyA9IDE7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlcykpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW2ldKSB7IHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlc1tpXSk7IH1cbiAgICAgICAgfVxuICAgICAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgICAgbnVtYmVyT2ZOZXdTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gc3dpcGVyLnZpcnR1YWwuY2FjaGU7XG4gICAgICAgIHZhciBuZXdDYWNoZSA9IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhjYWNoZSkuZm9yRWFjaChmdW5jdGlvbiAoY2FjaGVkSW5kZXgpIHtcbiAgICAgICAgICBuZXdDYWNoZVtwYXJzZUludChjYWNoZWRJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXNdID0gY2FjaGVbY2FjaGVkSW5kZXhdO1xuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgICB9LFxuICAgIHJlbW92ZVNsaWRlOiBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzSW5kZXhlcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc2xpZGVzSW5kZXhlcyA9PT0gbnVsbCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBzbGlkZXNJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnNwbGljZShzbGlkZXNJbmRleGVzW2ldLCAxKTtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc1tpXV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIHsgYWN0aXZlSW5kZXggLT0gMTsgfVxuICAgICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXMsIDEpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGlkZXNJbmRleGVzIDwgYWN0aXZlSW5kZXgpIHsgYWN0aXZlSW5kZXggLT0gMTsgfVxuICAgICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgICB9LFxuICAgIHJlbW92ZUFsbFNsaWRlczogZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMgPSBbXTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgICAgIHN3aXBlci5zbGlkZVRvKDAsIDApO1xuICAgIH0sXG4gIH07XG5cbiAgdmFyIFZpcnR1YWwkMSA9IHtcbiAgICBuYW1lOiAndmlydHVhbCcsXG4gICAgcGFyYW1zOiB7XG4gICAgICB2aXJ0dWFsOiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBzbGlkZXM6IFtdLFxuICAgICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgICAgcmVuZGVyU2xpZGU6IG51bGwsXG4gICAgICAgIHJlbmRlckV4dGVybmFsOiBudWxsLFxuICAgICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsXG4gICAgICAgIGFkZFNsaWRlc0FmdGVyOiAwLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIHZpcnR1YWw6IHtcbiAgICAgICAgICB1cGRhdGU6IFZpcnR1YWwudXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBhcHBlbmRTbGlkZTogVmlydHVhbC5hcHBlbmRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgcHJlcGVuZFNsaWRlOiBWaXJ0dWFsLnByZXBlbmRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgcmVtb3ZlU2xpZGU6IFZpcnR1YWwucmVtb3ZlU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHJlbW92ZUFsbFNsaWRlczogVmlydHVhbC5yZW1vdmVBbGxTbGlkZXMuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHJlbmRlclNsaWRlOiBWaXJ0dWFsLnJlbmRlclNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzbGlkZXM6IHN3aXBlci5wYXJhbXMudmlydHVhbC5zbGlkZXMsXG4gICAgICAgICAgY2FjaGU6IHt9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCJ2aXJ0dWFsXCIpKTtcbiAgICAgICAgdmFyIG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcblxuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBLZXlib2FyZCA9IHtcbiAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcnRsID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZTtcbiAgICAgIHZhciBlID0gZXZlbnQ7XG4gICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSB7IGUgPSBlLm9yaWdpbmFsRXZlbnQ7IH0gLy8ganF1ZXJ5IGZpeFxuICAgICAgdmFyIGtjID0gZS5rZXlDb2RlIHx8IGUuY2hhckNvZGU7XG4gICAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBrYyA9PT0gMzkpIHx8IChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGtjID09PSA0MCkgfHwga2MgPT09IDM0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBrYyA9PT0gMzcpIHx8IChzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGtjID09PSAzOCkgfHwga2MgPT09IDMzKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoZS5zaGlmdEtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgJiYgZG9jLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUgJiYgKGRvYy5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgfHwgZG9jLmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChrYyA9PT0gMzMgfHwga2MgPT09IDM0IHx8IGtjID09PSAzNyB8fCBrYyA9PT0gMzkgfHwga2MgPT09IDM4IHx8IGtjID09PSA0MCkpIHtcbiAgICAgICAgdmFyIGluVmlldyA9IGZhbHNlO1xuICAgICAgICAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3dcbiAgICAgICAgaWYgKHN3aXBlci4kZWwucGFyZW50cygoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSkpLmxlbmd0aCA+IDAgJiYgc3dpcGVyLiRlbC5wYXJlbnRzKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW4uaW5uZXJXaWR0aDtcbiAgICAgICAgdmFyIHdpbmRvd0hlaWdodCA9IHdpbi5pbm5lckhlaWdodDtcbiAgICAgICAgdmFyIHN3aXBlck9mZnNldCA9IHN3aXBlci4kZWwub2Zmc2V0KCk7XG4gICAgICAgIGlmIChydGwpIHsgc3dpcGVyT2Zmc2V0LmxlZnQgLT0gc3dpcGVyLiRlbFswXS5zY3JvbGxMZWZ0OyB9XG4gICAgICAgIHZhciBzd2lwZXJDb29yZCA9IFtcbiAgICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3BdLFxuICAgICAgICAgIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlci53aWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sXG4gICAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0sXG4gICAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0gXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHZhciBwb2ludCA9IHN3aXBlckNvb3JkW2ldO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gd2luZG93V2lkdGhcbiAgICAgICAgICAgICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gd2luZG93SGVpZ2h0XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpblZpZXcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWluVmlldykgeyByZXR1cm4gdW5kZWZpbmVkOyB9XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChrYyA9PT0gMzMgfHwga2MgPT09IDM0IHx8IGtjID09PSAzNyB8fCBrYyA9PT0gMzkpIHtcbiAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgICAgICBlbHNlIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCgoa2MgPT09IDM0IHx8IGtjID09PSAzOSkgJiYgIXJ0bCkgfHwgKChrYyA9PT0gMzMgfHwga2MgPT09IDM3KSAmJiBydGwpKSB7IHN3aXBlci5zbGlkZU5leHQoKTsgfVxuICAgICAgICBpZiAoKChrYyA9PT0gMzMgfHwga2MgPT09IDM3KSAmJiAhcnRsKSB8fCAoKGtjID09PSAzNCB8fCBrYyA9PT0gMzkpICYmIHJ0bCkpIHsgc3dpcGVyLnNsaWRlUHJldigpOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoa2MgPT09IDMzIHx8IGtjID09PSAzNCB8fCBrYyA9PT0gMzggfHwga2MgPT09IDQwKSB7XG4gICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgICAgICAgZWxzZSB7IGUucmV0dXJuVmFsdWUgPSBmYWxzZTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChrYyA9PT0gMzQgfHwga2MgPT09IDQwKSB7IHN3aXBlci5zbGlkZU5leHQoKTsgfVxuICAgICAgICBpZiAoa2MgPT09IDMzIHx8IGtjID09PSAzOCkgeyBzd2lwZXIuc2xpZGVQcmV2KCk7IH1cbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCdrZXlQcmVzcycsIGtjKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSxcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgJChkb2MpLm9uKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gICAgfSxcbiAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgJChkb2MpLm9mZigna2V5ZG93bicsIHN3aXBlci5rZXlib2FyZC5oYW5kbGUpO1xuICAgICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgICB9LFxuICB9O1xuXG4gIHZhciBLZXlib2FyZCQxID0ge1xuICAgIG5hbWU6ICdrZXlib2FyZCcsXG4gICAgcGFyYW1zOiB7XG4gICAgICBrZXlib2FyZDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAga2V5Ym9hcmQ6IHtcbiAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICBlbmFibGU6IEtleWJvYXJkLmVuYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZGlzYWJsZTogS2V5Ym9hcmQuZGlzYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgaGFuZGxlOiBLZXlib2FyZC5oYW5kbGUuYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoKSB7XG4gICAgdmFyIGV2ZW50TmFtZSA9ICdvbndoZWVsJztcbiAgICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jO1xuXG4gICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShldmVudE5hbWUsICdyZXR1cm47Jyk7XG4gICAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gICAgfVxuXG4gICAgaWYgKCFpc1N1cHBvcnRlZFxuICAgICAgJiYgZG9jLmltcGxlbWVudGF0aW9uXG4gICAgICAmJiBkb2MuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZVxuICAgICAgLy8gYWx3YXlzIHJldHVybnMgdHJ1ZSBpbiBuZXdlciBicm93c2VycyBhcyBwZXIgdGhlIHN0YW5kYXJkLlxuICAgICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICAgICYmIGRvYy5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWVcbiAgICApIHtcbiAgICAgIC8vIFRoaXMgaXMgdGhlIG9ubHkgd2F5IHRvIHRlc3Qgc3VwcG9ydCBmb3IgdGhlIGB3aGVlbGAgZXZlbnQgaW4gSUU5Ky5cbiAgICAgIGlzU3VwcG9ydGVkID0gZG9jLmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJ0V2ZW50cy53aGVlbCcsICczLjAnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG4gIH1cbiAgdmFyIE1vdXNld2hlZWwgPSB7XG4gICAgbGFzdFNjcm9sbFRpbWU6IFV0aWxzLm5vdygpLFxuICAgIGV2ZW50OiAoZnVuY3Rpb24gZ2V0RXZlbnQoKSB7XG4gICAgICBpZiAod2luLm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gLTEpIHsgcmV0dXJuICdET01Nb3VzZVNjcm9sbCc7IH1cbiAgICAgIHJldHVybiBpc0V2ZW50U3VwcG9ydGVkKCkgPyAnd2hlZWwnIDogJ21vdXNld2hlZWwnO1xuICAgIH0oKSksXG4gICAgbm9ybWFsaXplOiBmdW5jdGlvbiBub3JtYWxpemUoZSkge1xuICAgICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgICAgdmFyIFBJWEVMX1NURVAgPSAxMDtcbiAgICAgIHZhciBMSU5FX0hFSUdIVCA9IDQwO1xuICAgICAgdmFyIFBBR0VfSEVJR0hUID0gODAwO1xuXG4gICAgICB2YXIgc1ggPSAwO1xuICAgICAgdmFyIHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG4gICAgICB2YXIgcFggPSAwO1xuICAgICAgdmFyIHBZID0gMDsgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAgICAgLy8gTGVnYWN5XG4gICAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgICBzWSA9IGUuZGV0YWlsO1xuICAgICAgfVxuICAgICAgaWYgKCd3aGVlbERlbHRhJyBpbiBlKSB7XG4gICAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICAgIH1cbiAgICAgIGlmICgnd2hlZWxEZWx0YVknIGluIGUpIHtcbiAgICAgICAgc1kgPSAtZS53aGVlbERlbHRhWSAvIDEyMDtcbiAgICAgIH1cbiAgICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgICAgc1ggPSAtZS53aGVlbERlbHRhWCAvIDEyMDtcbiAgICAgIH1cblxuICAgICAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICAgICAgaWYgKCdheGlzJyBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMpIHtcbiAgICAgICAgc1ggPSBzWTtcbiAgICAgICAgc1kgPSAwO1xuICAgICAgfVxuXG4gICAgICBwWCA9IHNYICogUElYRUxfU1RFUDtcbiAgICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgICBpZiAoJ2RlbHRhWScgaW4gZSkge1xuICAgICAgICBwWSA9IGUuZGVsdGFZO1xuICAgICAgfVxuICAgICAgaWYgKCdkZWx0YVgnIGluIGUpIHtcbiAgICAgICAgcFggPSBlLmRlbHRhWDtcbiAgICAgIH1cblxuICAgICAgaWYgKChwWCB8fCBwWSkgJiYgZS5kZWx0YU1vZGUpIHtcbiAgICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7IC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgICBwWCAqPSBMSU5FX0hFSUdIVDtcbiAgICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgICAgfSBlbHNlIHsgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gICAgICBpZiAocFggJiYgIXNYKSB7XG4gICAgICAgIHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgICBpZiAocFkgJiYgIXNZKSB7XG4gICAgICAgIHNZID0gKHBZIDwgMSkgPyAtMSA6IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNwaW5YOiBzWCxcbiAgICAgICAgc3Bpblk6IHNZLFxuICAgICAgICBwaXhlbFg6IHBYLFxuICAgICAgICBwaXhlbFk6IHBZLFxuICAgICAgfTtcbiAgICB9LFxuICAgIGhhbmRsZU1vdXNlRW50ZXI6IGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgaGFuZGxlTW91c2VMZWF2ZTogZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IGZhbHNlO1xuICAgIH0sXG4gICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgIHZhciBlID0gZXZlbnQ7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG5cbiAgICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7IHJldHVybiB0cnVlOyB9XG5cbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHsgZSA9IGUub3JpZ2luYWxFdmVudDsgfSAvLyBqcXVlcnkgZml4XG4gICAgICB2YXIgZGVsdGEgPSAwO1xuICAgICAgdmFyIHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG5cbiAgICAgIHZhciBkYXRhID0gTW91c2V3aGVlbC5ub3JtYWxpemUoZSk7XG5cbiAgICAgIGlmIChwYXJhbXMuZm9yY2VUb0F4aXMpIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIHsgZGVsdGEgPSBkYXRhLnBpeGVsWCAqIHJ0bEZhY3RvcjsgfVxuICAgICAgICAgIGVsc2UgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgeyBkZWx0YSA9IGRhdGEucGl4ZWxZOyB9XG4gICAgICAgIGVsc2UgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsdGEgPSBNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkgPyAtZGF0YS5waXhlbFggKiBydGxGYWN0b3IgOiAtZGF0YS5waXhlbFk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWx0YSA9PT0gMCkgeyByZXR1cm4gdHJ1ZTsgfVxuXG4gICAgICBpZiAocGFyYW1zLmludmVydCkgeyBkZWx0YSA9IC1kZWx0YTsgfVxuXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgICAgaWYgKFV0aWxzLm5vdygpIC0gc3dpcGVyLm1vdXNld2hlZWwubGFzdFNjcm9sbFRpbWUgPiA2MCkge1xuICAgICAgICAgIGlmIChkZWx0YSA8IDApIHtcbiAgICAgICAgICAgIGlmICgoIXN3aXBlci5pc0VuZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5yZWxlYXNlT25FZGdlcykgeyByZXR1cm4gdHJ1ZTsgfVxuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lID0gKG5ldyB3aW4uRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIChkZWx0YSAqIHBhcmFtcy5zZW5zaXRpdml0eSk7XG4gICAgICAgIHZhciB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgIHZhciB3YXNFbmQgPSBzd2lwZXIuaXNFbmQ7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgeyBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTsgfVxuICAgICAgICBpZiAocG9zaXRpb24gPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7IHBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpOyB9XG5cbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICAgICAgaWYgKCghd2FzQmVnaW5uaW5nICYmIHN3aXBlci5pc0JlZ2lubmluZykgfHwgKCF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSkge1xuICAgICAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0KTtcbiAgICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBFbWl0IGV2ZW50XG4gICAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGwnLCBlKTtcblxuICAgICAgICAvLyBTdG9wIGF1dG9wbGF5XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbikgeyBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpOyB9XG4gICAgICAgIC8vIFJldHVybiBwYWdlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9uc1xuICAgICAgICBpZiAocG9zaXRpb24gPT09IHN3aXBlci5taW5UcmFuc2xhdGUoKSB8fCBwb3NpdGlvbiA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7IHJldHVybiB0cnVlOyB9XG4gICAgICB9XG5cbiAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICAgICAgZWxzZSB7IGUucmV0dXJuVmFsdWUgPSBmYWxzZTsgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgZW5hYmxlOiBmdW5jdGlvbiBlbmFibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghTW91c2V3aGVlbC5ldmVudCkgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgdmFyIHRhcmdldCA9IHN3aXBlci4kZWw7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkKTtcbiAgICAgIH1cbiAgICAgIHRhcmdldC5vbignbW91c2VlbnRlcicsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIpO1xuICAgICAgdGFyZ2V0Lm9uKCdtb3VzZWxlYXZlJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgICB0YXJnZXQub24oTW91c2V3aGVlbC5ldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBkaXNhYmxlOiBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIU1vdXNld2hlZWwuZXZlbnQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICB2YXIgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkICE9PSAnY29udGFpbmVyJykge1xuICAgICAgICB0YXJnZXQgPSAkKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZWQpO1xuICAgICAgfVxuICAgICAgdGFyZ2V0Lm9mZihNb3VzZXdoZWVsLmV2ZW50LCBzd2lwZXIubW91c2V3aGVlbC5oYW5kbGUpO1xuICAgICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgfTtcblxuICB2YXIgTW91c2V3aGVlbCQxID0ge1xuICAgIG5hbWU6ICdtb3VzZXdoZWVsJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIG1vdXNld2hlZWw6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgICAgaW52ZXJ0OiBmYWxzZSxcbiAgICAgICAgZm9yY2VUb0F4aXM6IGZhbHNlLFxuICAgICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgICAgZXZlbnRzVGFyZ2VkOiAnY29udGFpbmVyJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBtb3VzZXdoZWVsOiB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgZW5hYmxlOiBNb3VzZXdoZWVsLmVuYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZGlzYWJsZTogTW91c2V3aGVlbC5kaXNhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBoYW5kbGU6IE1vdXNld2hlZWwuaGFuZGxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBoYW5kbGVNb3VzZUVudGVyOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGhhbmRsZU1vdXNlTGVhdmU6IE1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgbGFzdFNjcm9sbFRpbWU6IFV0aWxzLm5vdygpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCkgeyBzd2lwZXIubW91c2V3aGVlbC5lbmFibGUoKTsgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgeyBzd2lwZXIubW91c2V3aGVlbC5kaXNhYmxlKCk7IH1cbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgTmF2aWdhdGlvbiA9IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgeyByZXR1cm47IH1cbiAgICAgIHZhciByZWYgPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIHZhciAkbmV4dEVsID0gcmVmLiRuZXh0RWw7XG4gICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuXG4gICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgICRwcmV2RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRwcmV2RWwucmVtb3ZlQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgICRwcmV2RWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgJG5leHRFbC5hZGRDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJG5leHRFbC5yZW1vdmVDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgJG5leHRFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gICAgb25QcmV2Q2xpY2s6IGZ1bmN0aW9uIG9uUHJldkNsaWNrKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7IHJldHVybjsgfVxuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH0sXG4gICAgb25OZXh0Q2xpY2s6IGZ1bmN0aW9uIG9uTmV4dENsaWNrKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSB7IHJldHVybjsgfVxuICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICAgIGlmICghKHBhcmFtcy5uZXh0RWwgfHwgcGFyYW1zLnByZXZFbCkpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHZhciAkbmV4dEVsO1xuICAgICAgdmFyICRwcmV2RWw7XG4gICAgICBpZiAocGFyYW1zLm5leHRFbCkge1xuICAgICAgICAkbmV4dEVsID0gJChwYXJhbXMubmV4dEVsKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHNcbiAgICAgICAgICAmJiB0eXBlb2YgcGFyYW1zLm5leHRFbCA9PT0gJ3N0cmluZydcbiAgICAgICAgICAmJiAkbmV4dEVsLmxlbmd0aCA+IDFcbiAgICAgICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCkubGVuZ3RoID09PSAxXG4gICAgICAgICkge1xuICAgICAgICAgICRuZXh0RWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucHJldkVsKSB7XG4gICAgICAgICRwcmV2RWwgPSAkKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50c1xuICAgICAgICAgICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJ1xuICAgICAgICAgICYmICRwcmV2RWwubGVuZ3RoID4gMVxuICAgICAgICAgICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMucHJldkVsKS5sZW5ndGggPT09IDFcbiAgICAgICAgKSB7XG4gICAgICAgICAgJHByZXZFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMucHJldkVsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoJG5leHRFbCAmJiAkbmV4dEVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJG5leHRFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vbk5leHRDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHByZXZFbC5vbignY2xpY2snLCBzd2lwZXIubmF2aWdhdGlvbi5vblByZXZDbGljayk7XG4gICAgICB9XG5cbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgICAkbmV4dEVsOiAkbmV4dEVsLFxuICAgICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICAgJHByZXZFbDogJHByZXZFbCxcbiAgICAgICAgcHJldkVsOiAkcHJldkVsICYmICRwcmV2RWxbMF0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciByZWYgPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICAgIHZhciAkbmV4dEVsID0gcmVmLiRuZXh0RWw7XG4gICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuICAgICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICAgJG5leHRFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25OZXh0Q2xpY2spO1xuICAgICAgICAkbmV4dEVsLnJlbW92ZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmICgkcHJldkVsICYmICRwcmV2RWwubGVuZ3RoKSB7XG4gICAgICAgICRwcmV2RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcblxuICB2YXIgTmF2aWdhdGlvbiQxID0ge1xuICAgIG5hbWU6ICduYXZpZ2F0aW9uJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgICBwcmV2RWw6IG51bGwsXG5cbiAgICAgICAgaGlkZU9uQ2xpY2s6IGZhbHNlLFxuICAgICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgICBsb2NrQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWxvY2snLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIG5hdmlnYXRpb246IHtcbiAgICAgICAgICBpbml0OiBOYXZpZ2F0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHVwZGF0ZTogTmF2aWdhdGlvbi51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGRlc3Ryb3k6IE5hdmlnYXRpb24uZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgb25OZXh0Q2xpY2s6IE5hdmlnYXRpb24ub25OZXh0Q2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9uUHJldkNsaWNrOiBOYXZpZ2F0aW9uLm9uUHJldkNsaWNrLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIubmF2aWdhdGlvbi5pbml0KCk7XG4gICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHRvRWRnZTogZnVuY3Rpb24gdG9FZGdlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIGZyb21FZGdlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5uYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICAgIH0sXG4gICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgdmFyIHJlZiA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgICAgICB2YXIgJG5leHRFbCA9IHJlZi4kbmV4dEVsO1xuICAgICAgICB2YXIgJHByZXZFbCA9IHJlZi4kcHJldkVsO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrXG4gICAgICAgICAgJiYgISQoZS50YXJnZXQpLmlzKCRwcmV2RWwpXG4gICAgICAgICAgJiYgISQoZS50YXJnZXQpLmlzKCRuZXh0RWwpXG4gICAgICAgICkge1xuICAgICAgICAgIHZhciBpc0hpZGRlbjtcbiAgICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgICAgaXNIaWRkZW4gPSAkbmV4dEVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgICAgfSBlbHNlIGlmICgkcHJldkVsKSB7XG4gICAgICAgICAgICBpc0hpZGRlbiA9ICRwcmV2RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvblNob3cnLCBzd2lwZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvbkhpZGUnLCBzd2lwZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgICAgJG5leHRFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICAgICAgJHByZXZFbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBQYWdpbmF0aW9uID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHJ0bCA9IHN3aXBlci5ydGw7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICAgIHZhciAkZWwgPSBzd2lwZXIucGFnaW5hdGlvbi4kZWw7XG4gICAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgICB2YXIgY3VycmVudDtcbiAgICAgIHZhciB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIGN1cnJlbnQgPSBNYXRoLmNlaWwoKHN3aXBlci5hY3RpdmVJbmRleCAtIHN3aXBlci5sb29wZWRTbGlkZXMpIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICAgIGlmIChjdXJyZW50ID4gc2xpZGVzTGVuZ3RoIC0gMSAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpIHtcbiAgICAgICAgICBjdXJyZW50IC09IChzbGlkZXNMZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3VycmVudCA+IHRvdGFsIC0gMSkgeyBjdXJyZW50IC09IHRvdGFsOyB9XG4gICAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb25UeXBlICE9PSAnYnVsbGV0cycpIHsgY3VycmVudCA9IHRvdGFsICsgY3VycmVudDsgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgICB9XG4gICAgICAvLyBUeXBlc1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgICB2YXIgZmlyc3RJbmRleDtcbiAgICAgICAgdmFyIGxhc3RJbmRleDtcbiAgICAgICAgdmFyIG1pZEluZGV4O1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSA9IGJ1bGxldHMuZXEoMClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ291dGVyV2lkdGgnIDogJ291dGVySGVpZ2h0J10odHJ1ZSk7XG4gICAgICAgICAgJGVsLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsICgoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSAqIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCkpICsgXCJweFwiKSk7XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPiAxICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCArPSAoY3VycmVudCAtIHN3aXBlci5wcmV2aW91c0luZGV4KTtcbiAgICAgICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZpcnN0SW5kZXggPSBjdXJyZW50IC0gc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4O1xuICAgICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgICB9XG4gICAgICAgIGJ1bGxldHMucmVtb3ZlQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCIgXCIgKyAocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHQgXCIgKyAocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHQtbmV4dCBcIiArIChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldiBcIiArIChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldi1wcmV2IFwiICsgKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1tYWluXCIpKTtcbiAgICAgICAgaWYgKCRlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgYnVsbGV0cy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgYnVsbGV0KSB7XG4gICAgICAgICAgICB2YXIgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICAgIHZhciBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgICAkYnVsbGV0LmFkZENsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbWFpblwiKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgJGJ1bGxldFxuICAgICAgICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLXByZXZcIikpXG4gICAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItcHJldi1wcmV2XCIpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICRidWxsZXRcbiAgICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1uZXh0XCIpKVxuICAgICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCgocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSArIFwiLW5leHQtbmV4dFwiKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgJGJ1bGxldCA9IGJ1bGxldHMuZXEoY3VycmVudCk7XG4gICAgICAgICAgJGJ1bGxldC5hZGRDbGFzcyhwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIHZhciAkZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGZpcnN0SW5kZXgpO1xuICAgICAgICAgICAgdmFyICRsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0cy5lcShsYXN0SW5kZXgpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgYnVsbGV0cy5lcShpKS5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1tYWluXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldFxuICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2XCIpKVxuICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgIC5hZGRDbGFzcygoKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcykgKyBcIi1wcmV2LXByZXZcIikpO1xuICAgICAgICAgICAgJGxhc3REaXNwbGF5ZWRCdWxsZXRcbiAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dFwiKSlcbiAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAuYWRkQ2xhc3MoKChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpICsgXCItbmV4dC1uZXh0XCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIHZhciBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgICAgdmFyIGJ1bGxldHNPZmZzZXQgPSAoKChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGgpIC0gKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpKSAvIDIpIC0gKG1pZEluZGV4ICogc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSk7XG4gICAgICAgICAgdmFyIG9mZnNldFByb3AgPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICAgIGJ1bGxldHMuY3NzKHN3aXBlci5pc0hvcml6b250YWwoKSA/IG9mZnNldFByb3AgOiAndG9wJywgKGJ1bGxldHNPZmZzZXQgKyBcInB4XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgICRlbC5maW5kKChcIi5cIiArIChwYXJhbXMuY3VycmVudENsYXNzKSkpLnRleHQocGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSkpO1xuICAgICAgICAkZWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLnRvdGFsQ2xhc3MpKSkudGV4dChwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCkpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICAgIHZhciBwcm9ncmVzc2JhckRpcmVjdGlvbjtcbiAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWw7XG4gICAgICAgIHZhciBzY2FsZVggPSAxO1xuICAgICAgICB2YXIgc2NhbGVZID0gMTtcbiAgICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgICAkZWwuZmluZCgoXCIuXCIgKyAocGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKSkpLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKFwiICsgc2NhbGVYICsgXCIpIHNjYWxlWShcIiArIHNjYWxlWSArIFwiKVwiKSkudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgICAkZWwuaHRtbChwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKSk7XG4gICAgICAgIHN3aXBlci5lbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3dpcGVyLCAkZWxbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzd2lwZXIsICRlbFswXSk7XG4gICAgICB9XG4gICAgICAkZWxbc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgICAgaWYgKCFwYXJhbXMuZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi4kZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uJGVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcblxuICAgICAgdmFyICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICAgIHZhciBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgdmFyIG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gXCI8XCIgKyAocGFyYW1zLmJ1bGxldEVsZW1lbnQpICsgXCIgY2xhc3M9XFxcIlwiICsgKHBhcmFtcy5idWxsZXRDbGFzcykgKyBcIlxcXCI+PC9cIiArIChwYXJhbXMuYnVsbGV0RWxlbWVudCkgKyBcIj5cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gJGVsLmZpbmQoKFwiLlwiICsgKHBhcmFtcy5idWxsZXRDbGFzcykpKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgKHBhcmFtcy5jdXJyZW50Q2xhc3MpICsgXCJcXFwiPjwvc3Bhbj5cIlxuICAgICAgICAgICsgJyAvICdcbiAgICAgICAgICArIFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgKHBhcmFtcy50b3RhbENsYXNzKSArIFwiXFxcIj48L3NwYW4+XCI7XG4gICAgICAgIH1cbiAgICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhci5jYWxsKHN3aXBlciwgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IFwiPHNwYW4gY2xhc3M9XFxcIlwiICsgKHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcykgKyBcIlxcXCI+PC9zcGFuPlwiO1xuICAgICAgICB9XG4gICAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzd2lwZXIucGFnaW5hdGlvbi4kZWxbMF0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgIGlmICghcGFyYW1zLmVsKSB7IHJldHVybjsgfVxuXG4gICAgICB2YXIgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgICAgaWYgKCRlbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50c1xuICAgICAgICAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiAkZWwubGVuZ3RoID4gMVxuICAgICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDFcbiAgICAgICkge1xuICAgICAgICAkZWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLmVsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLmNsaWNrYWJsZUNsYXNzKTtcbiAgICAgIH1cblxuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuXG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgJGVsLmFkZENsYXNzKChcIlwiICsgKHBhcmFtcy5tb2RpZmllckNsYXNzKSArIChwYXJhbXMudHlwZSkgKyBcIi1keW5hbWljXCIpKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICRlbC5vbignY2xpY2snLCAoXCIuXCIgKyAocGFyYW1zLmJ1bGxldENsYXNzKSksIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB2YXIgaW5kZXggPSAkKHRoaXMpLmluZGV4KCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHsgaW5kZXggKz0gc3dpcGVyLmxvb3BlZFNsaWRlczsgfVxuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgICAkZWw6ICRlbCxcbiAgICAgICAgZWw6ICRlbFswXSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuXG4gICAgICAkZWwucmVtb3ZlQ2xhc3MocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICRlbC5yZW1vdmVDbGFzcyhwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSB7IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucmVtb3ZlQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTsgfVxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgJGVsLm9mZignY2xpY2snLCAoXCIuXCIgKyAocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIFBhZ2luYXRpb24kMSA9IHtcbiAgICBuYW1lOiAncGFnaW5hdGlvbicsXG4gICAgcGFyYW1zOiB7XG4gICAgICBwYWdpbmF0aW9uOiB7XG4gICAgICAgIGVsOiBudWxsLFxuICAgICAgICBidWxsZXRFbGVtZW50OiAnc3BhbicsXG4gICAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgICAgcmVuZGVyQnVsbGV0OiBudWxsLFxuICAgICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICAgIHJlbmRlckN1c3RvbTogbnVsbCxcbiAgICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICAgIHR5cGU6ICdidWxsZXRzJywgLy8gJ2J1bGxldHMnIG9yICdwcm9ncmVzc2Jhcicgb3IgJ2ZyYWN0aW9uJyBvciAnY3VzdG9tJ1xuICAgICAgICBkeW5hbWljQnVsbGV0czogZmFsc2UsXG4gICAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgICAgZm9ybWF0RnJhY3Rpb25DdXJyZW50OiBmdW5jdGlvbiAobnVtYmVyKSB7IHJldHVybiBudW1iZXI7IH0sXG4gICAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IGZ1bmN0aW9uIChudW1iZXIpIHsgcmV0dXJuIG51bWJlcjsgfSxcbiAgICAgICAgYnVsbGV0Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQnLFxuICAgICAgICBidWxsZXRBY3RpdmVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWJ1bGxldC1hY3RpdmUnLFxuICAgICAgICBtb2RpZmllckNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tJywgLy8gTkVXXG4gICAgICAgIGN1cnJlbnRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWN1cnJlbnQnLFxuICAgICAgICB0b3RhbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tdG90YWwnLFxuICAgICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWhpZGRlbicsXG4gICAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbCcsXG4gICAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXByb2dyZXNzYmFyLW9wcG9zaXRlJyxcbiAgICAgICAgY2xpY2thYmxlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1jbGlja2FibGUnLCAvLyBORVdcbiAgICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tbG9jaycsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICAgIGluaXQ6IFBhZ2luYXRpb24uaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgcmVuZGVyOiBQYWdpbmF0aW9uLnJlbmRlci5iaW5kKHN3aXBlciksXG4gICAgICAgICAgdXBkYXRlOiBQYWdpbmF0aW9uLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZGVzdHJveTogUGFnaW5hdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXg6IDAsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uaW5pdCgpO1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgYWN0aXZlSW5kZXhDaGFuZ2U6IGZ1bmN0aW9uIGFjdGl2ZUluZGV4Q2hhbmdlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc25hcEluZGV4Q2hhbmdlOiBmdW5jdGlvbiBzbmFwSW5kZXhDaGFuZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2xpZGVzTGVuZ3RoQ2hhbmdlOiBmdW5jdGlvbiBzbGlkZXNMZW5ndGhDaGFuZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzbmFwR3JpZExlbmd0aENoYW5nZTogZnVuY3Rpb24gc25hcEdyaWRMZW5ndGhDaGFuZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnJlbmRlcigpO1xuICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmRlc3Ryb3koKTtcbiAgICAgIH0sXG4gICAgICBjbGljazogZnVuY3Rpb24gY2xpY2soZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbFxuICAgICAgICAgICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGlja1xuICAgICAgICAgICYmIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPiAwXG4gICAgICAgICAgJiYgISQoZS50YXJnZXQpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcylcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFyIGlzSGlkZGVuID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblNob3cnLCBzd2lwZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvbkhpZGUnLCBzd2lwZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwudG9nZ2xlQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBTY3JvbGxiYXIgPSB7XG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzO1xuICAgICAgdmFyIGRyYWdTaXplID0gc2Nyb2xsYmFyLmRyYWdTaXplO1xuICAgICAgdmFyIHRyYWNrU2l6ZSA9IHNjcm9sbGJhci50cmFja1NpemU7XG4gICAgICB2YXIgJGRyYWdFbCA9IHNjcm9sbGJhci4kZHJhZ0VsO1xuICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG5cbiAgICAgIHZhciBuZXdTaXplID0gZHJhZ1NpemU7XG4gICAgICB2YXIgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBuZXdQb3MgPSAtbmV3UG9zO1xuICAgICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgICBuZXdQb3MgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChTdXBwb3J0LnRyYW5zZm9ybXMzZCkge1xuICAgICAgICAgICRkcmFnRWwudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKFwiICsgbmV3UG9zICsgXCJweCwgMCwgMClcIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRkcmFnRWwudHJhbnNmb3JtKChcInRyYW5zbGF0ZVgoXCIgKyBuZXdQb3MgKyBcInB4KVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgJGRyYWdFbFswXS5zdHlsZS53aWR0aCA9IG5ld1NpemUgKyBcInB4XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoU3VwcG9ydC50cmFuc2Zvcm1zM2QpIHtcbiAgICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgbmV3UG9zICsgXCJweCwgMClcIikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRkcmFnRWwudHJhbnNmb3JtKChcInRyYW5zbGF0ZVkoXCIgKyBuZXdQb3MgKyBcInB4KVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgJGRyYWdFbFswXS5zdHlsZS5oZWlnaHQgPSBuZXdTaXplICsgXCJweFwiO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQpO1xuICAgICAgICAkZWxbMF0uc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgICAkZWwudHJhbnNpdGlvbig0MDApO1xuICAgICAgICB9LCAxMDAwKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgeyByZXR1cm47IH1cbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuJGRyYWdFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICB9LFxuICAgIHVwZGF0ZVNpemU6IGZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyICRkcmFnRWwgPSBzY3JvbGxiYXIuJGRyYWdFbDtcbiAgICAgIHZhciAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuXG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgdmFyIHRyYWNrU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRlbFswXS5vZmZzZXRXaWR0aCA6ICRlbFswXS5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgIHZhciBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyBzd2lwZXIudmlydHVhbFNpemU7XG4gICAgICB2YXIgbW92ZURpdmlkZXIgPSBkaXZpZGVyICogKHRyYWNrU2l6ZSAvIHN3aXBlci5zaXplKTtcbiAgICAgIHZhciBkcmFnU2l6ZTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIGRyYWdTaXplID0gdHJhY2tTaXplICogZGl2aWRlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyYWdTaXplID0gcGFyc2VJbnQoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUsIDEwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLndpZHRoID0gZHJhZ1NpemUgKyBcInB4XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IGRyYWdTaXplICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGl2aWRlciA+PSAxKSB7XG4gICAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGVsWzBdLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5oaWRlKSB7XG4gICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgIH1cbiAgICAgIFV0aWxzLmV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgICAgdHJhY2tTaXplOiB0cmFja1NpemUsXG4gICAgICAgIGRpdmlkZXI6IGRpdmlkZXIsXG4gICAgICAgIG1vdmVEaXZpZGVyOiBtb3ZlRGl2aWRlcixcbiAgICAgICAgZHJhZ1NpemU6IGRyYWdTaXplLFxuICAgICAgfSk7XG4gICAgICBzY3JvbGxiYXIuJGVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9LFxuICAgIGdldFBvaW50ZXJQb3NpdGlvbjogZnVuY3Rpb24gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICByZXR1cm4gKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVggfHwgZS5jbGllbnRYKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScpID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWSB8fCBlLmNsaWVudFkpO1xuICAgIH0sXG4gICAgc2V0RHJhZ1Bvc2l0aW9uOiBmdW5jdGlvbiBzZXREcmFnUG9zaXRpb24oZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgICB2YXIgZHJhZ1NpemUgPSBzY3JvbGxiYXIuZHJhZ1NpemU7XG4gICAgICB2YXIgdHJhY2tTaXplID0gc2Nyb2xsYmFyLnRyYWNrU2l6ZTtcbiAgICAgIHZhciBkcmFnU3RhcnRQb3MgPSBzY3JvbGxiYXIuZHJhZ1N0YXJ0UG9zO1xuXG4gICAgICB2YXIgcG9zaXRpb25SYXRpbztcbiAgICAgIHBvc2l0aW9uUmF0aW8gPSAoKHNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24oZSkpIC0gJGVsLm9mZnNldCgpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXVxuICAgICAgICAtIChkcmFnU3RhcnRQb3MgIT09IG51bGwgPyBkcmFnU3RhcnRQb3MgOiBkcmFnU2l6ZSAvIDIpKSAvICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApO1xuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBwb3NpdGlvblJhdGlvID0gMSAtIHBvc2l0aW9uUmF0aW87XG4gICAgICB9XG5cbiAgICAgIHZhciBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArICgoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIHBvc2l0aW9uUmF0aW8pO1xuXG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocG9zaXRpb24pO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfSxcbiAgICBvbkRyYWdTdGFydDogZnVuY3Rpb24gb25EcmFnU3RhcnQoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWw7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdTdGFydFBvcyA9IChlLnRhcmdldCA9PT0gJGRyYWdFbFswXSB8fCBlLnRhcmdldCA9PT0gJGRyYWdFbClcbiAgICAgICAgPyBzY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigxMDApO1xuICAgICAgJGRyYWdFbC50cmFuc2l0aW9uKDEwMCk7XG4gICAgICBzY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuXG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG5cbiAgICAgICRlbC50cmFuc2l0aW9uKDApO1xuICAgICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAxKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnU3RhcnQnLCBlKTtcbiAgICB9LFxuICAgIG9uRHJhZ01vdmU6IGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgIHZhciAkd3JhcHBlckVsID0gc3dpcGVyLiR3cmFwcGVyRWw7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciAkZHJhZ0VsID0gc2Nyb2xsYmFyLiRkcmFnRWw7XG5cbiAgICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgeyBlLnByZXZlbnREZWZhdWx0KCk7IH1cbiAgICAgIGVsc2UgeyBlLnJldHVyblZhbHVlID0gZmFsc2U7IH1cbiAgICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG4gICAgICAkd3JhcHBlckVsLnRyYW5zaXRpb24oMCk7XG4gICAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICAgICRkcmFnRWwudHJhbnNpdGlvbigwKTtcbiAgICAgIHN3aXBlci5lbWl0KCdzY3JvbGxiYXJEcmFnTW92ZScsIGUpO1xuICAgIH0sXG4gICAgb25EcmFnRW5kOiBmdW5jdGlvbiBvbkRyYWdFbmQoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG5cbiAgICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHsgcmV0dXJuOyB9XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0KTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCA9IFV0aWxzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICAgJGVsLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgICAgfSwgMTAwMCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ0VuZCcsIGUpO1xuICAgICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZW5hYmxlRHJhZ2dhYmxlOiBmdW5jdGlvbiBlbmFibGVEcmFnZ2FibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgc2Nyb2xsYmFyID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICAgIHZhciB0b3VjaEV2ZW50c1RvdWNoID0gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2g7XG4gICAgICB2YXIgdG91Y2hFdmVudHNEZXNrdG9wID0gc3dpcGVyLnRvdWNoRXZlbnRzRGVza3RvcDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgICB2YXIgdGFyZ2V0ID0gJGVsWzBdO1xuICAgICAgdmFyIGFjdGl2ZUxpc3RlbmVyID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgIGlmICghU3VwcG9ydC50b3VjaCkge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3Auc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AuZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGlzYWJsZURyYWdnYWJsZTogZnVuY3Rpb24gZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgeyByZXR1cm47IH1cbiAgICAgIHZhciBzY3JvbGxiYXIgPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgICAgdmFyIHRvdWNoRXZlbnRzVG91Y2ggPSBzd2lwZXIudG91Y2hFdmVudHNUb3VjaDtcbiAgICAgIHZhciB0b3VjaEV2ZW50c0Rlc2t0b3AgPSBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gICAgICB2YXIgJGVsID0gc2Nyb2xsYmFyLiRlbDtcbiAgICAgIHZhciB0YXJnZXQgPSAkZWxbMF07XG4gICAgICB2YXIgYWN0aXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICAgIHZhciBwYXNzaXZlTGlzdGVuZXIgPSBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgaWYgKCFTdXBwb3J0LnRvdWNoKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLmVuZCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHNjcm9sbGJhciA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgICB2YXIgJHN3aXBlckVsID0gc3dpcGVyLiRlbDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcblxuICAgICAgdmFyICRlbCA9ICQocGFyYW1zLmVsKTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmICRlbC5sZW5ndGggPiAxICYmICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICRlbCA9ICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgICB9XG5cbiAgICAgIHZhciAkZHJhZ0VsID0gJGVsLmZpbmQoKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcykpKTtcbiAgICAgIGlmICgkZHJhZ0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkZHJhZ0VsID0gJCgoXCI8ZGl2IGNsYXNzPVxcXCJcIiArIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3MpICsgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICAgICRlbC5hcHBlbmQoJGRyYWdFbCk7XG4gICAgICB9XG5cbiAgICAgIFV0aWxzLmV4dGVuZChzY3JvbGxiYXIsIHtcbiAgICAgICAgJGVsOiAkZWwsXG4gICAgICAgIGVsOiAkZWxbMF0sXG4gICAgICAgICRkcmFnRWw6ICRkcmFnRWwsXG4gICAgICAgIGRyYWdFbDogJGRyYWdFbFswXSxcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocGFyYW1zLmRyYWdnYWJsZSkge1xuICAgICAgICBzY3JvbGxiYXIuZW5hYmxlRHJhZ2dhYmxlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRpc2FibGVEcmFnZ2FibGUoKTtcbiAgICB9LFxuICB9O1xuXG4gIHZhciBTY3JvbGxiYXIkMSA9IHtcbiAgICBuYW1lOiAnc2Nyb2xsYmFyJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICBlbDogbnVsbCxcbiAgICAgICAgZHJhZ1NpemU6ICdhdXRvJyxcbiAgICAgICAgaGlkZTogZmFsc2UsXG4gICAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICAgIHNuYXBPblJlbGVhc2U6IHRydWUsXG4gICAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICAgIGRyYWdDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZHJhZycsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgc2Nyb2xsYmFyOiB7XG4gICAgICAgICAgaW5pdDogU2Nyb2xsYmFyLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGRlc3Ryb3k6IFNjcm9sbGJhci5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICB1cGRhdGVTaXplOiBTY3JvbGxiYXIudXBkYXRlU2l6ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNsYXRlOiBTY3JvbGxiYXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uOiBTY3JvbGxiYXIuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZW5hYmxlRHJhZ2dhYmxlOiBTY3JvbGxiYXIuZW5hYmxlRHJhZ2dhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBkaXNhYmxlRHJhZ2dhYmxlOiBTY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0RHJhZ1Bvc2l0aW9uOiBTY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBnZXRQb2ludGVyUG9zaXRpb246IFNjcm9sbGJhci5nZXRQb2ludGVyUG9zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBTY3JvbGxiYXIub25EcmFnU3RhcnQuYmluZChzd2lwZXIpLFxuICAgICAgICAgIG9uRHJhZ01vdmU6IFNjcm9sbGJhci5vbkRyYWdNb3ZlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBvbkRyYWdFbmQ6IFNjcm9sbGJhci5vbkRyYWdFbmQuYmluZChzd2lwZXIpLFxuICAgICAgICAgIGlzVG91Y2hlZDogZmFsc2UsXG4gICAgICAgICAgdGltZW91dDogbnVsbCxcbiAgICAgICAgICBkcmFnVGltZW91dDogbnVsbCxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLmluaXQoKTtcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgIH0sXG4gICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgICAgfSxcbiAgICAgIG9ic2VydmVyVXBkYXRlOiBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHN3aXBlci5zY3JvbGxiYXIudXBkYXRlU2l6ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgc3dpcGVyLnNjcm9sbGJhci5zZXRUcmFuc2xhdGUoKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRlc3Ryb3koKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgUGFyYWxsYXggPSB7XG4gICAgc2V0VHJhbnNmb3JtOiBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsO1xuXG4gICAgICB2YXIgJGVsID0gJChlbCk7XG4gICAgICB2YXIgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuXG4gICAgICB2YXIgcCA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheCcpIHx8ICcwJztcbiAgICAgIHZhciB4ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXgnKTtcbiAgICAgIHZhciB5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICAgIHZhciBzY2FsZSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZScpO1xuICAgICAgdmFyIG9wYWNpdHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eScpO1xuXG4gICAgICBpZiAoeCB8fCB5KSB7XG4gICAgICAgIHggPSB4IHx8ICcwJztcbiAgICAgICAgeSA9IHkgfHwgJzAnO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgeCA9IHA7XG4gICAgICAgIHkgPSAnMCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5ID0gcDtcbiAgICAgICAgeCA9ICcwJztcbiAgICAgIH1cblxuICAgICAgaWYgKCh4KS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgICB4ID0gKHBhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yKSArIFwiJVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeCA9ICh4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3IpICsgXCJweFwiO1xuICAgICAgfVxuICAgICAgaWYgKCh5KS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgICB5ID0gKHBhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzKSArIFwiJVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeSA9ICh5ICogcHJvZ3Jlc3MpICsgXCJweFwiO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIG9wYWNpdHkgIT09ICd1bmRlZmluZWQnICYmIG9wYWNpdHkgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRPcGFjaXR5ID0gb3BhY2l0eSAtICgob3BhY2l0eSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpKTtcbiAgICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2Ygc2NhbGUgPT09ICd1bmRlZmluZWQnIHx8IHNjYWxlID09PSBudWxsKSB7XG4gICAgICAgICRlbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCAwcHgpXCIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjdXJyZW50U2NhbGUgPSBzY2FsZSAtICgoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKSk7XG4gICAgICAgICRlbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCIsIFwiICsgeSArIFwiLCAwcHgpIHNjYWxlKFwiICsgY3VycmVudFNjYWxlICsgXCIpXCIpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgJGVsID0gc3dpcGVyLiRlbDtcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgdmFyIHByb2dyZXNzID0gc3dpcGVyLnByb2dyZXNzO1xuICAgICAgdmFyIHNuYXBHcmlkID0gc3dpcGVyLnNuYXBHcmlkO1xuICAgICAgJGVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJylcbiAgICAgICAgLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbCkge1xuICAgICAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2Zvcm0oZWwsIHByb2dyZXNzKTtcbiAgICAgICAgfSk7XG4gICAgICBzbGlkZXMuZWFjaChmdW5jdGlvbiAoc2xpZGVJbmRleCwgc2xpZGVFbCkge1xuICAgICAgICB2YXIgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJykge1xuICAgICAgICAgIHNsaWRlUHJvZ3Jlc3MgKz0gTWF0aC5jZWlsKHNsaWRlSW5kZXggLyAyKSAtIChwcm9ncmVzcyAqIChzbmFwR3JpZC5sZW5ndGggLSAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2xpZGVQcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC0xKSwgMSk7XG4gICAgICAgICQoc2xpZGVFbCkuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpXG4gICAgICAgICAgLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbCkge1xuICAgICAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zZm9ybShlbCwgc2xpZGVQcm9ncmVzcyk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGlmICggZHVyYXRpb24gPT09IHZvaWQgMCApIGR1cmF0aW9uID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG5cbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICAkZWwuZmluZCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpXG4gICAgICAgIC5lYWNoKGZ1bmN0aW9uIChpbmRleCwgcGFyYWxsYXhFbCkge1xuICAgICAgICAgIHZhciAkcGFyYWxsYXhFbCA9ICQocGFyYWxsYXhFbCk7XG4gICAgICAgICAgdmFyIHBhcmFsbGF4RHVyYXRpb24gPSBwYXJzZUludCgkcGFyYWxsYXhFbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvbicpLCAxMCkgfHwgZHVyYXRpb247XG4gICAgICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSB7IHBhcmFsbGF4RHVyYXRpb24gPSAwOyB9XG4gICAgICAgICAgJHBhcmFsbGF4RWwudHJhbnNpdGlvbihwYXJhbGxheER1cmF0aW9uKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgfTtcblxuICB2YXIgUGFyYWxsYXgkMSA9IHtcbiAgICBuYW1lOiAncGFyYWxsYXgnLFxuICAgIHBhcmFtczoge1xuICAgICAgcGFyYWxsYXg6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgcGFyYWxsYXg6IHtcbiAgICAgICAgICBzZXRUcmFuc2Zvcm06IFBhcmFsbGF4LnNldFRyYW5zZm9ybS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNsYXRlOiBQYXJhbGxheC5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHNldFRyYW5zaXRpb246IFBhcmFsbGF4LnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICB9LFxuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIFpvb20gPSB7XG4gICAgLy8gQ2FsYyBTY2FsZSBGcm9tIE11bHRpLXRvdWNoZXNcbiAgICBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzOiBmdW5jdGlvbiBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpIHtcbiAgICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgeyByZXR1cm4gMTsgfVxuICAgICAgdmFyIHgxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgdmFyIHkxID0gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZO1xuICAgICAgdmFyIHgyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VYO1xuICAgICAgdmFyIHkyID0gZS50YXJnZXRUb3VjaGVzWzFdLnBhZ2VZO1xuICAgICAgdmFyIGRpc3RhbmNlID0gTWF0aC5zcXJ0KChNYXRoLnBvdyggKHgyIC0geDEpLCAyICkpICsgKE1hdGgucG93KCAoeTIgLSB5MSksIDIgKSkpO1xuICAgICAgcmV0dXJuIGRpc3RhbmNlO1xuICAgIH0sXG4gICAgLy8gRXZlbnRzXG4gICAgb25HZXN0dXJlU3RhcnQ6IGZ1bmN0aW9uIG9uR2VzdHVyZVN0YXJ0KGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICAgIGlmICghU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgfHwgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgICAgIGdlc3R1cmUuc2NhbGVTdGFydCA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICAgIH1cbiAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCB8fCAhZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGgpIHtcbiAgICAgICAgZ2VzdHVyZS4kc2xpZGVFbCA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoJy5zd2lwZXItc2xpZGUnKTtcbiAgICAgICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwubGVuZ3RoID09PSAwKSB7IGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7IH1cbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IGdlc3R1cmUuJHNsaWRlRWwuZmluZCgnaW1nLCBzdmcsIGNhbnZhcycpO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KChcIi5cIiArIChwYXJhbXMuY29udGFpbmVyQ2xhc3MpKSk7XG4gICAgICAgIGdlc3R1cmUubWF4UmF0aW8gPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgICAgICBpZiAoZ2VzdHVyZS4kaW1hZ2VXcmFwRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigwKTtcbiAgICAgIHN3aXBlci56b29tLmlzU2NhbGluZyA9IHRydWU7XG4gICAgfSxcbiAgICBvbkdlc3R1cmVDaGFuZ2U6IGZ1bmN0aW9uIG9uR2VzdHVyZUNoYW5nZShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG4gICAgICBpZiAoIVN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScgfHwgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgICAgIGdlc3R1cmUuc2NhbGVNb3ZlID0gWm9vbS5nZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKGUpO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgaWYgKFN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgICAgem9vbS5zY2FsZSA9IGUuc2NhbGUgKiB6b29tLmN1cnJlbnRTY2FsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHpvb20uc2NhbGUgPSAoZ2VzdHVyZS5zY2FsZU1vdmUgLyBnZXN0dXJlLnNjYWxlU3RhcnQpICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgICB9XG4gICAgICBpZiAoem9vbS5zY2FsZSA+IGdlc3R1cmUubWF4UmF0aW8pIHtcbiAgICAgICAgem9vbS5zY2FsZSA9IChnZXN0dXJlLm1heFJhdGlvIC0gMSkgKyAoTWF0aC5wb3coICgoem9vbS5zY2FsZSAtIGdlc3R1cmUubWF4UmF0aW8pICsgMSksIDAuNSApKTtcbiAgICAgIH1cbiAgICAgIGlmICh6b29tLnNjYWxlIDwgcGFyYW1zLm1pblJhdGlvKSB7XG4gICAgICAgIHpvb20uc2NhbGUgPSAocGFyYW1zLm1pblJhdGlvICsgMSkgLSAoTWF0aC5wb3coICgocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSkgKyAxKSwgMC41ICkpO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgKHpvb20uc2NhbGUpICsgXCIpXCIpKTtcbiAgICB9LFxuICAgIG9uR2VzdHVyZUVuZDogZnVuY3Rpb24gb25HZXN0dXJlRW5kKGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgIGlmICghU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICBpZiAoIXpvb20uZmFrZUdlc3R1cmVUb3VjaGVkIHx8ICF6b29tLmZha2VHZXN0dXJlTW92ZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoZW5kJyB8fCAoZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhRGV2aWNlLmFuZHJvaWQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgem9vbS5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHpvb20uc2NhbGUsIGdlc3R1cmUubWF4UmF0aW8pLCBwYXJhbXMubWluUmF0aW8pO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoXCIgKyAoem9vbS5zY2FsZSkgKyBcIilcIikpO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgICAgem9vbS5pc1NjYWxpbmcgPSBmYWxzZTtcbiAgICAgIGlmICh6b29tLnNjYWxlID09PSAxKSB7IGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7IH1cbiAgICB9LFxuICAgIG9uVG91Y2hTdGFydDogZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgdmFyIGltYWdlID0gem9vbS5pbWFnZTtcbiAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgIGlmIChpbWFnZS5pc1RvdWNoZWQpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoRGV2aWNlLmFuZHJvaWQpIHsgZS5wcmV2ZW50RGVmYXVsdCgpOyB9XG4gICAgICBpbWFnZS5pc1RvdWNoZWQgPSB0cnVlO1xuICAgICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VZIDogZS5wYWdlWTtcbiAgICB9LFxuICAgIG9uVG91Y2hNb3ZlOiBmdW5jdGlvbiBvblRvdWNoTW92ZShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgIHZhciBpbWFnZSA9IHpvb20uaW1hZ2U7XG4gICAgICB2YXIgdmVsb2NpdHkgPSB6b29tLnZlbG9jaXR5O1xuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFnZXN0dXJlLiRzbGlkZUVsKSB7IHJldHVybjsgfVxuXG4gICAgICBpZiAoIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgICAgaW1hZ2Uud2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZS5oZWlnaHQgPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldEhlaWdodDtcbiAgICAgICAgaW1hZ2Uuc3RhcnRYID0gVXRpbHMuZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneCcpIHx8IDA7XG4gICAgICAgIGltYWdlLnN0YXJ0WSA9IFV0aWxzLmdldFRyYW5zbGF0ZShnZXN0dXJlLiRpbWFnZVdyYXBFbFswXSwgJ3knKSB8fCAwO1xuICAgICAgICBnZXN0dXJlLnNsaWRlV2lkdGggPSBnZXN0dXJlLiRzbGlkZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICBnZXN0dXJlLnNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMCk7XG4gICAgICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICAgICAgaW1hZ2Uuc3RhcnRYID0gLWltYWdlLnN0YXJ0WDtcbiAgICAgICAgICBpbWFnZS5zdGFydFkgPSAtaW1hZ2Uuc3RhcnRZO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEZWZpbmUgaWYgd2UgbmVlZCBpbWFnZSBkcmFnXG4gICAgICB2YXIgc2NhbGVkV2lkdGggPSBpbWFnZS53aWR0aCAqIHpvb20uc2NhbGU7XG4gICAgICB2YXIgc2NhbGVkSGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0ICogem9vbS5zY2FsZTtcblxuICAgICAgaWYgKHNjYWxlZFdpZHRoIDwgZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHNjYWxlZEhlaWdodCA8IGdlc3R1cmUuc2xpZGVIZWlnaHQpIHsgcmV0dXJuOyB9XG5cbiAgICAgIGltYWdlLm1pblggPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuXG4gICAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgICBpbWFnZS50b3VjaGVzQ3VycmVudC55ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG5cbiAgICAgIGlmICghaW1hZ2UuaXNNb3ZlZCAmJiAhem9vbS5pc1NjYWxpbmcpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAgICYmIChcbiAgICAgICAgICAgIChNYXRoLmZsb29yKGltYWdlLm1pblgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA8IGltYWdlLnRvdWNoZXNTdGFydC54KVxuICAgICAgICAgICAgfHwgKE1hdGguZmxvb3IoaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gaWYgKFxuICAgICAgICAgICFzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgICAmJiAoXG4gICAgICAgICAgICAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSlcbiAgICAgICAgICAgIHx8IChNYXRoLmZsb29yKGltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KVxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSBpbWFnZS50b3VjaGVzU3RhcnQueCkgKyBpbWFnZS5zdGFydFg7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IChpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpICsgaW1hZ2Uuc3RhcnRZO1xuXG4gICAgICBpZiAoaW1hZ2UuY3VycmVudFggPCBpbWFnZS5taW5YKSB7XG4gICAgICAgIGltYWdlLmN1cnJlbnRYID0gKGltYWdlLm1pblggKyAxKSAtIChNYXRoLnBvdyggKChpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFgpICsgMSksIDAuOCApKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFggPSAoaW1hZ2UubWF4WCAtIDEpICsgKE1hdGgucG93KCAoKGltYWdlLmN1cnJlbnRYIC0gaW1hZ2UubWF4WCkgKyAxKSwgMC44ICkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW1hZ2UuY3VycmVudFkgPCBpbWFnZS5taW5ZKSB7XG4gICAgICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLm1pblkgKyAxKSAtIChNYXRoLnBvdyggKChpbWFnZS5taW5ZIC0gaW1hZ2UuY3VycmVudFkpICsgMSksIDAuOCApKTtcbiAgICAgIH1cbiAgICAgIGlmIChpbWFnZS5jdXJyZW50WSA+IGltYWdlLm1heFkpIHtcbiAgICAgICAgaW1hZ2UuY3VycmVudFkgPSAoaW1hZ2UubWF4WSAtIDEpICsgKE1hdGgucG93KCAoKGltYWdlLmN1cnJlbnRZIC0gaW1hZ2UubWF4WSkgKyAxKSwgMC44ICkpO1xuICAgICAgfVxuXG4gICAgICAvLyBWZWxvY2l0eVxuICAgICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSB7IHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54OyB9XG4gICAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblkpIHsgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7IH1cbiAgICAgIGlmICghdmVsb2NpdHkucHJldlRpbWUpIHsgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpOyB9XG4gICAgICB2ZWxvY2l0eS54ID0gKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSAvIChEYXRlLm5vdygpIC0gdmVsb2NpdHkucHJldlRpbWUpIC8gMjtcbiAgICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSA8IDIpIHsgdmVsb2NpdHkueCA9IDA7IH1cbiAgICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgPCAyKSB7IHZlbG9jaXR5LnkgPSAwOyB9XG4gICAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICAgIHZlbG9jaXR5LnByZXZQb3NpdGlvblkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55O1xuICAgICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuXG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyAoaW1hZ2UuY3VycmVudFgpICsgXCJweCwgXCIgKyAoaW1hZ2UuY3VycmVudFkpICsgXCJweCwwKVwiKSk7XG4gICAgfSxcbiAgICBvblRvdWNoRW5kOiBmdW5jdGlvbiBvblRvdWNoRW5kKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG4gICAgICB2YXIgaW1hZ2UgPSB6b29tLmltYWdlO1xuICAgICAgdmFyIHZlbG9jaXR5ID0gem9vbS52ZWxvY2l0eTtcbiAgICAgIGlmICghZ2VzdHVyZS4kaW1hZ2VFbCB8fCBnZXN0dXJlLiRpbWFnZUVsLmxlbmd0aCA9PT0gMCkgeyByZXR1cm47IH1cbiAgICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFpbWFnZS5pc01vdmVkKSB7XG4gICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb25YID0gMzAwO1xuICAgICAgdmFyIG1vbWVudHVtRHVyYXRpb25ZID0gMzAwO1xuICAgICAgdmFyIG1vbWVudHVtRGlzdGFuY2VYID0gdmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YO1xuICAgICAgdmFyIG5ld1Bvc2l0aW9uWCA9IGltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgICB2YXIgbW9tZW50dW1EaXN0YW5jZVkgPSB2ZWxvY2l0eS55ICogbW9tZW50dW1EdXJhdGlvblk7XG4gICAgICB2YXIgbmV3UG9zaXRpb25ZID0gaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTtcblxuICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgeyBtb21lbnR1bUR1cmF0aW9uWCA9IE1hdGguYWJzKChuZXdQb3NpdGlvblggLSBpbWFnZS5jdXJyZW50WCkgLyB2ZWxvY2l0eS54KTsgfVxuICAgICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIHsgbW9tZW50dW1EdXJhdGlvblkgPSBNYXRoLmFicygobmV3UG9zaXRpb25ZIC0gaW1hZ2UuY3VycmVudFkpIC8gdmVsb2NpdHkueSk7IH1cbiAgICAgIHZhciBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5tYXgobW9tZW50dW1EdXJhdGlvblgsIG1vbWVudHVtRHVyYXRpb25ZKTtcblxuICAgICAgaW1hZ2UuY3VycmVudFggPSBuZXdQb3NpdGlvblg7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IG5ld1Bvc2l0aW9uWTtcblxuICAgICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgICAgdmFyIHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgdmFyIHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlV2lkdGggLyAyKSAtIChzY2FsZWRXaWR0aCAvIDIpKSwgMCk7XG4gICAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMikgLSAoc2NhbGVkSGVpZ2h0IC8gMikpLCAwKTtcbiAgICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFgsIGltYWdlLm1heFgpLCBpbWFnZS5taW5YKTtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcblxuICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKS50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyAoaW1hZ2UuY3VycmVudFgpICsgXCJweCwgXCIgKyAoaW1hZ2UuY3VycmVudFkpICsgXCJweCwwKVwiKSk7XG4gICAgfSxcbiAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBnZXN0dXJlID0gem9vbS5nZXN0dXJlO1xuICAgICAgaWYgKGdlc3R1cmUuJHNsaWRlRWwgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJyk7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG5cbiAgICAgICAgem9vbS5zY2FsZSA9IDE7XG4gICAgICAgIHpvb20uY3VycmVudFNjYWxlID0gMTtcblxuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIFRvZ2dsZSBab29tXG4gICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUoZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgem9vbSA9IHN3aXBlci56b29tO1xuXG4gICAgICBpZiAoem9vbS5zY2FsZSAmJiB6b29tLnNjYWxlICE9PSAxKSB7XG4gICAgICAgIC8vIFpvb20gT3V0XG4gICAgICAgIHpvb20ub3V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBab29tIEluXG4gICAgICAgIHpvb20uaW4oZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbjogZnVuY3Rpb24gaW4kMShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcblxuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgICB2YXIgZ2VzdHVyZSA9IHpvb20uZ2VzdHVyZTtcbiAgICAgIHZhciBpbWFnZSA9IHpvb20uaW1hZ2U7XG5cbiAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLmNsaWNrZWRTbGlkZSA/ICQoc3dpcGVyLmNsaWNrZWRTbGlkZSkgOiBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMnKTtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudCgoXCIuXCIgKyAocGFyYW1zLmNvbnRhaW5lckNsYXNzKSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICBnZXN0dXJlLiRzbGlkZUVsLmFkZENsYXNzKChcIlwiICsgKHBhcmFtcy56b29tZWRTbGlkZUNsYXNzKSkpO1xuXG4gICAgICB2YXIgdG91Y2hYO1xuICAgICAgdmFyIHRvdWNoWTtcbiAgICAgIHZhciBvZmZzZXRYO1xuICAgICAgdmFyIG9mZnNldFk7XG4gICAgICB2YXIgZGlmZlg7XG4gICAgICB2YXIgZGlmZlk7XG4gICAgICB2YXIgdHJhbnNsYXRlWDtcbiAgICAgIHZhciB0cmFuc2xhdGVZO1xuICAgICAgdmFyIGltYWdlV2lkdGg7XG4gICAgICB2YXIgaW1hZ2VIZWlnaHQ7XG4gICAgICB2YXIgc2NhbGVkV2lkdGg7XG4gICAgICB2YXIgc2NhbGVkSGVpZ2h0O1xuICAgICAgdmFyIHRyYW5zbGF0ZU1pblg7XG4gICAgICB2YXIgdHJhbnNsYXRlTWluWTtcbiAgICAgIHZhciB0cmFuc2xhdGVNYXhYO1xuICAgICAgdmFyIHRyYW5zbGF0ZU1heFk7XG4gICAgICB2YXIgc2xpZGVXaWR0aDtcbiAgICAgIHZhciBzbGlkZUhlaWdodDtcblxuICAgICAgaWYgKHR5cGVvZiBpbWFnZS50b3VjaGVzU3RhcnQueCA9PT0gJ3VuZGVmaW5lZCcgJiYgZSkge1xuICAgICAgICB0b3VjaFggPSBlLnR5cGUgPT09ICd0b3VjaGVuZCcgPyBlLmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICAgICAgdG91Y2hZID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b3VjaFggPSBpbWFnZS50b3VjaGVzU3RhcnQueDtcbiAgICAgICAgdG91Y2hZID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lnk7XG4gICAgICB9XG5cbiAgICAgIHpvb20uc2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgICAgaWYgKGUpIHtcbiAgICAgICAgc2xpZGVXaWR0aCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIG9mZnNldFggPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLmxlZnQ7XG4gICAgICAgIG9mZnNldFkgPSBnZXN0dXJlLiRzbGlkZUVsLm9mZnNldCgpLnRvcDtcbiAgICAgICAgZGlmZlggPSAob2Zmc2V0WCArIChzbGlkZVdpZHRoIC8gMikpIC0gdG91Y2hYO1xuICAgICAgICBkaWZmWSA9IChvZmZzZXRZICsgKHNsaWRlSGVpZ2h0IC8gMikpIC0gdG91Y2hZO1xuXG4gICAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLiRpbWFnZUVsWzBdLm9mZnNldFdpZHRoO1xuICAgICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgICBzY2FsZWRIZWlnaHQgPSBpbWFnZUhlaWdodCAqIHpvb20uc2NhbGU7XG5cbiAgICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKCgoc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICAgICAgdHJhbnNsYXRlTWluWSA9IE1hdGgubWluKCgoc2xpZGVIZWlnaHQgLyAyKSAtIChzY2FsZWRIZWlnaHQgLyAyKSksIDApO1xuICAgICAgICB0cmFuc2xhdGVNYXhYID0gLXRyYW5zbGF0ZU1pblg7XG4gICAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcblxuICAgICAgICB0cmFuc2xhdGVYID0gZGlmZlggKiB6b29tLnNjYWxlO1xuICAgICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuXG4gICAgICAgIGlmICh0cmFuc2xhdGVYIDwgdHJhbnNsYXRlTWluWCkge1xuICAgICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNaW5YO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2xhdGVYID4gdHJhbnNsYXRlTWF4WCkge1xuICAgICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1pblk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgICAgdHJhbnNsYXRlWSA9IHRyYW5zbGF0ZU1heFk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgICB0cmFuc2xhdGVZID0gMDtcbiAgICAgIH1cbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoXCIgKyB0cmFuc2xhdGVYICsgXCJweCwgXCIgKyB0cmFuc2xhdGVZICsgXCJweCwwKVwiKSk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKFwiICsgKHpvb20uc2NhbGUpICsgXCIpXCIpKTtcbiAgICB9LFxuICAgIG91dDogZnVuY3Rpb24gb3V0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgICAgdmFyIGdlc3R1cmUgPSB6b29tLmdlc3R1cmU7XG5cbiAgICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCkge1xuICAgICAgICBnZXN0dXJlLiRzbGlkZUVsID0gc3dpcGVyLmNsaWNrZWRTbGlkZSA/ICQoc3dpcGVyLmNsaWNrZWRTbGlkZSkgOiBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMnKTtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwgPSBnZXN0dXJlLiRpbWFnZUVsLnBhcmVudCgoXCIuXCIgKyAocGFyYW1zLmNvbnRhaW5lckNsYXNzKSkpO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgIHpvb20uY3VycmVudFNjYWxlID0gMTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zaXRpb24oMzAwKS50cmFuc2Zvcm0oJ3RyYW5zbGF0ZTNkKDAsMCwwKScpO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwucmVtb3ZlQ2xhc3MoKFwiXCIgKyAocGFyYW1zLnpvb21lZFNsaWRlQ2xhc3MpKSk7XG4gICAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgLy8gQXR0YWNoL0RldGFjaCBFdmVudHNcbiAgICBlbmFibGU6IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICAgIGlmICh6b29tLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICB6b29tLmVuYWJsZWQgPSB0cnVlO1xuXG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG5cbiAgICAgIC8vIFNjYWxlIGltYWdlXG4gICAgICBpZiAoU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbignZ2VzdHVyZXN0YXJ0JywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbignZ2VzdHVyZWNoYW5nZScsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKCdnZXN0dXJlZW5kJywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBNb3ZlIGltYWdlXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMubW92ZSwgKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzcykpLCB6b29tLm9uVG91Y2hNb3ZlKTtcbiAgICB9LFxuICAgIGRpc2FibGU6IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB6b29tID0gc3dpcGVyLnpvb207XG4gICAgICBpZiAoIXpvb20uZW5hYmxlZCkgeyByZXR1cm47IH1cblxuICAgICAgc3dpcGVyLnpvb20uZW5hYmxlZCA9IGZhbHNlO1xuXG4gICAgICB2YXIgcGFzc2l2ZUxpc3RlbmVyID0gc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcgJiYgU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgc3dpcGVyLnBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG5cbiAgICAgIC8vIFNjYWxlIGltYWdlXG4gICAgICBpZiAoU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVzdGFydCcsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKCdnZXN0dXJlY2hhbmdlJywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKCdnZXN0dXJlZW5kJywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0ID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCwgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9mZihzd2lwZXIudG91Y2hFdmVudHMuZW5kLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBNb3ZlIGltYWdlXG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIChcIi5cIiArIChzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3MpKSwgem9vbS5vblRvdWNoTW92ZSk7XG4gICAgfSxcbiAgfTtcblxuICB2YXIgWm9vbSQxID0ge1xuICAgIG5hbWU6ICd6b29tJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIHpvb206IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgICBtaW5SYXRpbzogMSxcbiAgICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsXG4gICAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHpvb20gPSB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBzY2FsZTogMSxcbiAgICAgICAgY3VycmVudFNjYWxlOiAxLFxuICAgICAgICBpc1NjYWxpbmc6IGZhbHNlLFxuICAgICAgICBnZXN0dXJlOiB7XG4gICAgICAgICAgJHNsaWRlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzbGlkZVdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgc2xpZGVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAkaW1hZ2VFbDogdW5kZWZpbmVkLFxuICAgICAgICAgICRpbWFnZVdyYXBFbDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgICB9LFxuICAgICAgICBpbWFnZToge1xuICAgICAgICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjdXJyZW50WDogdW5kZWZpbmVkLFxuICAgICAgICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWluWDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1pblk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBtYXhYOiB1bmRlZmluZWQsXG4gICAgICAgICAgbWF4WTogdW5kZWZpbmVkLFxuICAgICAgICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgICAgICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgICAgICAgc3RhcnRYOiB1bmRlZmluZWQsXG4gICAgICAgICAgc3RhcnRZOiB1bmRlZmluZWQsXG4gICAgICAgICAgdG91Y2hlc1N0YXJ0OiB7fSxcbiAgICAgICAgICB0b3VjaGVzQ3VycmVudDoge30sXG4gICAgICAgIH0sXG4gICAgICAgIHZlbG9jaXR5OiB7XG4gICAgICAgICAgeDogdW5kZWZpbmVkLFxuICAgICAgICAgIHk6IHVuZGVmaW5lZCxcbiAgICAgICAgICBwcmV2UG9zaXRpb25YOiB1bmRlZmluZWQsXG4gICAgICAgICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLFxuICAgICAgICAgIHByZXZUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICAoJ29uR2VzdHVyZVN0YXJ0IG9uR2VzdHVyZUNoYW5nZSBvbkdlc3R1cmVFbmQgb25Ub3VjaFN0YXJ0IG9uVG91Y2hNb3ZlIG9uVG91Y2hFbmQgb25UcmFuc2l0aW9uRW5kIHRvZ2dsZSBlbmFibGUgZGlzYWJsZSBpbiBvdXQnKS5zcGxpdCgnICcpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICAgICAgem9vbVttZXRob2ROYW1lXSA9IFpvb21bbWV0aG9kTmFtZV0uYmluZChzd2lwZXIpO1xuICAgICAgfSk7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIHpvb206IHpvb20sXG4gICAgICB9KTtcblxuICAgICAgdmFyIHNjYWxlID0gMTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gc2NhbGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHNjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGltYWdlRWwgPSBzd2lwZXIuem9vbS5nZXN0dXJlLiRpbWFnZUVsID8gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHZhciBzbGlkZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kc2xpZGVFbCA/IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWxbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnem9vbUNoYW5nZScsIHZhbHVlLCBpbWFnZUVsLCBzbGlkZUVsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2NhbGUgPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuem9vbS5lbmFibGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBzd2lwZXIuem9vbS5kaXNhYmxlKCk7XG4gICAgICB9LFxuICAgICAgdG91Y2hTdGFydDogZnVuY3Rpb24gdG91Y2hTdGFydChlKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci56b29tLm9uVG91Y2hTdGFydChlKTtcbiAgICAgIH0sXG4gICAgICB0b3VjaEVuZDogZnVuY3Rpb24gdG91Y2hFbmQoZSkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuem9vbS5vblRvdWNoRW5kKGUpO1xuICAgICAgfSxcbiAgICAgIGRvdWJsZVRhcDogZnVuY3Rpb24gZG91YmxlVGFwKGUpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS50b2dnbGUpIHtcbiAgICAgICAgICBzd2lwZXIuem9vbS50b2dnbGUoZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuem9vbS5vblRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBMYXp5ID0ge1xuICAgIGxvYWRJblNsaWRlOiBmdW5jdGlvbiBsb2FkSW5TbGlkZShpbmRleCwgbG9hZEluRHVwbGljYXRlKSB7XG4gICAgICBpZiAoIGxvYWRJbkR1cGxpY2F0ZSA9PT0gdm9pZCAwICkgbG9hZEluRHVwbGljYXRlID0gdHJ1ZTtcblxuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5sYXp5O1xuICAgICAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgICAgIHZhciAkc2xpZGVFbCA9IGlzVmlydHVhbFxuICAgICAgICA/IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgaW5kZXggKyBcIlxcXCJdXCIpKVxuICAgICAgICA6IHN3aXBlci5zbGlkZXMuZXEoaW5kZXgpO1xuXG4gICAgICB2YXIgJGltYWdlcyA9ICRzbGlkZUVsLmZpbmQoKFwiLlwiICsgKHBhcmFtcy5lbGVtZW50Q2xhc3MpICsgXCI6bm90KC5cIiArIChwYXJhbXMubG9hZGVkQ2xhc3MpICsgXCIpOm5vdCguXCIgKyAocGFyYW1zLmxvYWRpbmdDbGFzcykgKyBcIilcIikpO1xuICAgICAgaWYgKCRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5lbGVtZW50Q2xhc3MpICYmICEkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpICYmICEkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKSkge1xuICAgICAgICAkaW1hZ2VzID0gJGltYWdlcy5hZGQoJHNsaWRlRWxbMF0pO1xuICAgICAgfVxuICAgICAgaWYgKCRpbWFnZXMubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgICAkaW1hZ2VzLmVhY2goZnVuY3Rpb24gKGltYWdlSW5kZXgsIGltYWdlRWwpIHtcbiAgICAgICAgdmFyICRpbWFnZUVsID0gJChpbWFnZUVsKTtcbiAgICAgICAgJGltYWdlRWwuYWRkQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG5cbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLWJhY2tncm91bmQnKTtcbiAgICAgICAgdmFyIHNyYyA9ICRpbWFnZUVsLmF0dHIoJ2RhdGEtc3JjJyk7XG4gICAgICAgIHZhciBzcmNzZXQgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyY3NldCcpO1xuICAgICAgICB2YXIgc2l6ZXMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNpemVzJyk7XG5cbiAgICAgICAgc3dpcGVyLmxvYWRJbWFnZSgkaW1hZ2VFbFswXSwgKHNyYyB8fCBiYWNrZ3JvdW5kKSwgc3Jjc2V0LCBzaXplcywgZmFsc2UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgKHN3aXBlciAmJiAhc3dpcGVyLnBhcmFtcykgfHwgc3dpcGVyLmRlc3Ryb3llZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBpZiAoYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgJGltYWdlRWwuY3NzKCdiYWNrZ3JvdW5kLWltYWdlJywgKFwidXJsKFxcXCJcIiArIGJhY2tncm91bmQgKyBcIlxcXCIpXCIpKTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtYmFja2dyb3VuZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc3Jjc2V0KSB7XG4gICAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyY3NldCcsIHNyY3NldCk7XG4gICAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2l6ZXMpIHtcbiAgICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc2l6ZXMnLCBzaXplcyk7XG4gICAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc2l6ZXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3JjJywgc3JjKTtcbiAgICAgICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1zcmMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkaW1hZ2VFbC5hZGRDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpLnJlbW92ZUNsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuICAgICAgICAgICRzbGlkZUVsLmZpbmQoKFwiLlwiICsgKHBhcmFtcy5wcmVsb2FkZXJDbGFzcykpKS5yZW1vdmUoKTtcbiAgICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIGxvYWRJbkR1cGxpY2F0ZSkge1xuICAgICAgICAgICAgdmFyIHNsaWRlT3JpZ2luYWxJbmRleCA9ICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgICAgICBpZiAoJHNsaWRlRWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZU9yaWdpbmFsSW5kZXggKyBcIlxcXCJdOm5vdCguXCIgKyAoc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSArIFwiKVwiKSk7XG4gICAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKG9yaWdpbmFsU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGR1cGxpY2F0ZWRTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpICsgXCJbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XFxcIlwiICsgc2xpZGVPcmlnaW5hbEluZGV4ICsgXCJcXFwiXVwiKSk7XG4gICAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGR1cGxpY2F0ZWRTbGlkZS5pbmRleCgpLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VSZWFkeScsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN3aXBlci5lbWl0KCdsYXp5SW1hZ2VMb2FkJywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbG9hZDogZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciBzd2lwZXJQYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICB2YXIgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyUGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXJQYXJhbXMubGF6eTtcblxuICAgICAgdmFyIHNsaWRlc1BlclZpZXcgPSBzd2lwZXJQYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNsaWRlRXhpc3QoaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICAgIGlmICgkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChzd2lwZXJQYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBpbmRleCArIFwiXFxcIl1cIikpLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNsaWRlc1tpbmRleF0pIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gc2xpZGVJbmRleChzbGlkZUVsKSB7XG4gICAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgICByZXR1cm4gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkKHNsaWRlRWwpLmluZGV4KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkKSB7IHN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCA9IHRydWU7IH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgICAgICAkd3JhcHBlckVsLmNoaWxkcmVuKChcIi5cIiArIChzd2lwZXJQYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpKSkuZWFjaChmdW5jdGlvbiAoZWxJbmRleCwgc2xpZGVFbCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IGlzVmlydHVhbCA/ICQoc2xpZGVFbCkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA6ICQoc2xpZGVFbCkuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChzbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gYWN0aXZlSW5kZXg7IGkgPCBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSB7IHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGkpOyB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGFjdGl2ZUluZGV4KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMubG9hZFByZXZOZXh0KSB7XG4gICAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID4gMSB8fCAocGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCAmJiBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ID4gMSkpIHtcbiAgICAgICAgICB2YXIgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDtcbiAgICAgICAgICB2YXIgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgICB2YXIgbWF4SW5kZXggPSBNYXRoLm1pbihhY3RpdmVJbmRleCArIHNwdiArIE1hdGgubWF4KGFtb3VudCwgc3B2KSwgc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgICAgdmFyIG1pbkluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBNYXRoLm1heChzcHYsIGFtb3VudCksIDApO1xuICAgICAgICAgIC8vIE5leHQgU2xpZGVzXG4gICAgICAgICAgZm9yICh2YXIgaSQxID0gYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBpJDEgPCBtYXhJbmRleDsgaSQxICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkkMSkpIHsgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSQxKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBQcmV2IFNsaWRlc1xuICAgICAgICAgIGZvciAodmFyIGkkMiA9IG1pbkluZGV4OyBpJDIgPCBhY3RpdmVJbmRleDsgaSQyICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkkMikpIHsgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSQyKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgbmV4dFNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyUGFyYW1zLnNsaWRlTmV4dENsYXNzKSkpO1xuICAgICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgeyBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShzbGlkZUluZGV4KG5leHRTbGlkZSkpOyB9XG5cbiAgICAgICAgICB2YXIgcHJldlNsaWRlID0gJHdyYXBwZXJFbC5jaGlsZHJlbigoXCIuXCIgKyAoc3dpcGVyUGFyYW1zLnNsaWRlUHJldkNsYXNzKSkpO1xuICAgICAgICAgIGlmIChwcmV2U2xpZGUubGVuZ3RoID4gMCkgeyBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShzbGlkZUluZGV4KHByZXZTbGlkZSkpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIHZhciBMYXp5JDEgPSB7XG4gICAgbmFtZTogJ2xhenknLFxuICAgIHBhcmFtczoge1xuICAgICAgbGF6eToge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgbG9hZFByZXZOZXh0OiBmYWxzZSxcbiAgICAgICAgbG9hZFByZXZOZXh0QW1vdW50OiAxLFxuICAgICAgICBsb2FkT25UcmFuc2l0aW9uU3RhcnQ6IGZhbHNlLFxuXG4gICAgICAgIGVsZW1lbnRDbGFzczogJ3N3aXBlci1sYXp5JyxcbiAgICAgICAgbG9hZGluZ0NsYXNzOiAnc3dpcGVyLWxhenktbG9hZGluZycsXG4gICAgICAgIGxvYWRlZENsYXNzOiAnc3dpcGVyLWxhenktbG9hZGVkJyxcbiAgICAgICAgcHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGxhenk6IHtcbiAgICAgICAgICBpbml0aWFsSW1hZ2VMb2FkZWQ6IGZhbHNlLFxuICAgICAgICAgIGxvYWQ6IExhenkubG9hZC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgbG9hZEluU2xpZGU6IExhenkubG9hZEluU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMpIHtcbiAgICAgICAgICBzd2lwZXIucGFyYW1zLnByZWxvYWRJbWFnZXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA9PT0gMCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNjcm9sbDogZnVuY3Rpb24gc2Nyb2xsKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNjcm9sbGJhckRyYWdNb3ZlOiBmdW5jdGlvbiBzY3JvbGxiYXJEcmFnTW92ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgfHwgKCFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0ICYmICFzd2lwZXIubGF6eS5pbml0aWFsSW1hZ2VMb2FkZWQpKSB7XG4gICAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCAmJiAhc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCkge1xuICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIC8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cblxuICB2YXIgQ29udHJvbGxlciA9IHtcbiAgICBMaW5lYXJTcGxpbmU6IGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7XG4gICAgICB2YXIgYmluYXJ5U2VhcmNoID0gKGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICAgICAgdmFyIG1heEluZGV4O1xuICAgICAgICB2YXIgbWluSW5kZXg7XG4gICAgICAgIHZhciBndWVzcztcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcnJheSwgdmFsKSB7XG4gICAgICAgICAgbWluSW5kZXggPSAtMTtcbiAgICAgICAgICBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAobWF4SW5kZXggLSBtaW5JbmRleCA+IDEpIHtcbiAgICAgICAgICAgIGd1ZXNzID0gbWF4SW5kZXggKyBtaW5JbmRleCA+PiAxO1xuICAgICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgICAgbWluSW5kZXggPSBndWVzcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgICAgfTtcbiAgICAgIH0oKSk7XG4gICAgICB0aGlzLnggPSB4O1xuICAgICAgdGhpcy55ID0geTtcbiAgICAgIHRoaXMubGFzdEluZGV4ID0geC5sZW5ndGggLSAxO1xuICAgICAgLy8gR2l2ZW4gYW4geCB2YWx1ZSAoeDIpLCByZXR1cm4gdGhlIGV4cGVjdGVkIHkyIHZhbHVlOlxuICAgICAgLy8gKHgxLHkxKSBpcyB0aGUga25vd24gcG9pbnQgYmVmb3JlIGdpdmVuIHZhbHVlLFxuICAgICAgLy8gKHgzLHkzKSBpcyB0aGUga25vd24gcG9pbnQgYWZ0ZXIgZ2l2ZW4gdmFsdWUuXG4gICAgICB2YXIgaTE7XG4gICAgICB2YXIgaTM7XG5cbiAgICAgIHRoaXMuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiBpbnRlcnBvbGF0ZSh4Mikge1xuICAgICAgICBpZiAoIXgyKSB7IHJldHVybiAwOyB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG4gICAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgICBpMSA9IGkzIC0gMTtcblxuICAgICAgICAvLyBXZSBoYXZlIG91ciBpbmRleGVzIGkxICYgaTMsIHNvIHdlIGNhbiBjYWxjdWxhdGUgYWxyZWFkeTpcbiAgICAgICAgLy8geTIgOj0gKCh4MuKIkngxKSDDlyAoeTPiiJJ5MSkpIMO3ICh4M+KIkngxKSArIHkxXG4gICAgICAgIHJldHVybiAoKCh4MiAtIHRoaXMueFtpMV0pICogKHRoaXMueVtpM10gLSB0aGlzLnlbaTFdKSkgLyAodGhpcy54W2kzXSAtIHRoaXMueFtpMV0pKSArIHRoaXMueVtpMV07XG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvLyB4eHg6IGZvciBub3cgaSB3aWxsIGp1c3Qgc2F2ZSBvbmUgc3BsaW5lIGZ1bmN0aW9uIHRvIHRvXG4gICAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbjogZnVuY3Rpb24gZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHN3aXBlci5wYXJhbXMubG9vcFxuICAgICAgICAgID8gbmV3IENvbnRyb2xsZXIuTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpXG4gICAgICAgICAgOiBuZXcgQ29udHJvbGxlci5MaW5lYXJTcGxpbmUoc3dpcGVyLnNuYXBHcmlkLCBjLnNuYXBHcmlkKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHNldFRyYW5zbGF0ZSQxLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgICAgdmFyIG11bHRpcGxpZXI7XG4gICAgICB2YXIgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgICAvLyBpdCBtYWtlcyBzZW5zZSB0byBjcmVhdGUgdGhpcyBvbmx5IG9uY2UgYW5kIHJlY2FsbCBpdCBmb3IgdGhlIGludGVycG9sYXRpb25cbiAgICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgdmFyIHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5nZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpO1xuICAgICAgICAgIC8vIGkgYW0gbm90IHN1cmUgd2h5IHRoZSB2YWx1ZXMgaGF2ZSB0byBiZSBtdWx0aXBsaWNhdGVkIHRoaXMgd2F5LCB0cmllZCB0byBpbnZlcnQgdGhlIHNuYXBHcmlkXG4gICAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gLXN3aXBlci5jb250cm9sbGVyLnNwbGluZS5pbnRlcnBvbGF0ZSgtdHJhbnNsYXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgICAgbXVsdGlwbGllciA9IChjLm1heFRyYW5zbGF0ZSgpIC0gYy5taW5UcmFuc2xhdGUoKSkgLyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKCh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogbXVsdGlwbGllcikgKyBjLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5pbnZlcnNlKSB7XG4gICAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IGMubWF4VHJhbnNsYXRlKCkgLSBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgICAgICB9XG4gICAgICAgIGMudXBkYXRlUHJvZ3Jlc3MoY29udHJvbGxlZFRyYW5zbGF0ZSk7XG4gICAgICAgIGMuc2V0VHJhbnNsYXRlKGNvbnRyb2xsZWRUcmFuc2xhdGUsIHN3aXBlcik7XG4gICAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgYy51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgICAgdmFyIGk7XG4gICAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjKSB7XG4gICAgICAgIGMuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgc3dpcGVyKTtcbiAgICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgYy50cmFuc2l0aW9uU3RhcnQoKTtcbiAgICAgICAgICBpZiAoYy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgICAgVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWNvbnRyb2xsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgICBpZiAoYy5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgICAgICAgYy5sb29wRml4KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuICB2YXIgQ29udHJvbGxlciQxID0ge1xuICAgIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGNvbnRyb2xsZXI6IHtcbiAgICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgICBpbnZlcnNlOiBmYWxzZSxcbiAgICAgICAgYnk6ICdzbGlkZScsIC8vIG9yICdjb250YWluZXInXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgY29udHJvbGxlcjoge1xuICAgICAgICAgIGNvbnRyb2w6IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sLFxuICAgICAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb246IENvbnRyb2xsZXIuZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNsYXRlOiBDb250cm9sbGVyLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNpdGlvbjogQ29udHJvbGxlci5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgeyByZXR1cm47IH1cbiAgICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2JzZXJ2ZXJVcGRhdGU6IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSB7IHJldHVybjsgfVxuICAgICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBhMTF5ID0ge1xuICAgIG1ha2VFbEZvY3VzYWJsZTogZnVuY3Rpb24gbWFrZUVsRm9jdXNhYmxlKCRlbCkge1xuICAgICAgJGVsLmF0dHIoJ3RhYkluZGV4JywgJzAnKTtcbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSxcbiAgICBhZGRFbFJvbGU6IGZ1bmN0aW9uIGFkZEVsUm9sZSgkZWwsIHJvbGUpIHtcbiAgICAgICRlbC5hdHRyKCdyb2xlJywgcm9sZSk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgYWRkRWxMYWJlbDogZnVuY3Rpb24gYWRkRWxMYWJlbCgkZWwsIGxhYmVsKSB7XG4gICAgICAkZWwuYXR0cignYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICAgIHJldHVybiAkZWw7XG4gICAgfSxcbiAgICBkaXNhYmxlRWw6IGZ1bmN0aW9uIGRpc2FibGVFbCgkZWwpIHtcbiAgICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgZW5hYmxlRWw6IGZ1bmN0aW9uIGVuYWJsZUVsKCRlbCkge1xuICAgICAgJGVsLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgICByZXR1cm4gJGVsO1xuICAgIH0sXG4gICAgb25FbnRlcktleTogZnVuY3Rpb24gb25FbnRlcktleShlKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgICBpZiAoZS5rZXlDb2RlICE9PSAxMykgeyByZXR1cm47IH1cbiAgICAgIHZhciAkdGFyZ2V0RWwgPSAkKGUudGFyZ2V0KTtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsICYmICR0YXJnZXRFbC5pcyhzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSkge1xuICAgICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMubGFzdFNsaWRlTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpKSB7XG4gICAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5maXJzdFNsaWRlTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmICR0YXJnZXRFbC5pcygoXCIuXCIgKyAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkpKSB7XG4gICAgICAgICR0YXJnZXRFbFswXS5jbGljaygpO1xuICAgICAgfVxuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkobWVzc2FnZSkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgbm90aWZpY2F0aW9uID0gc3dpcGVyLmExMXkubGl2ZVJlZ2lvbjtcbiAgICAgIGlmIChub3RpZmljYXRpb24ubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICAgICAgbm90aWZpY2F0aW9uLmh0bWwoJycpO1xuICAgICAgbm90aWZpY2F0aW9uLmh0bWwobWVzc2FnZSk7XG4gICAgfSxcbiAgICB1cGRhdGVOYXZpZ2F0aW9uOiBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgcmVmID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgICB2YXIgJG5leHRFbCA9IHJlZi4kbmV4dEVsO1xuICAgICAgdmFyICRwcmV2RWwgPSByZWYuJHByZXZFbDtcblxuICAgICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJHByZXZFbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJHByZXZFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkuZGlzYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5hMTF5LmVuYWJsZUVsKCRuZXh0RWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVQYWdpbmF0aW9uOiBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmVhY2goZnVuY3Rpb24gKGJ1bGxldEluZGV4LCBidWxsZXRFbCkge1xuICAgICAgICAgIHZhciAkYnVsbGV0RWwgPSAkKGJ1bGxldEVsKTtcbiAgICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJGJ1bGxldEVsKTtcbiAgICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgc3dpcGVyLmExMXkuYWRkRWxMYWJlbCgkYnVsbGV0RWwsIHBhcmFtcy5wYWdpbmF0aW9uQnVsbGV0TWVzc2FnZS5yZXBsYWNlKC97e2luZGV4fX0vLCAkYnVsbGV0RWwuaW5kZXgoKSArIDEpKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG5cbiAgICAgIHN3aXBlci4kZWwuYXBwZW5kKHN3aXBlci5hMTF5LmxpdmVSZWdpb24pO1xuXG4gICAgICAvLyBOYXZpZ2F0aW9uXG4gICAgICB2YXIgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgICAgdmFyICRuZXh0RWw7XG4gICAgICB2YXIgJHByZXZFbDtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsKSB7XG4gICAgICAgICRuZXh0RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kbmV4dEVsO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpIHtcbiAgICAgICAgJHByZXZFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWw7XG4gICAgICB9XG4gICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJG5leHRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkbmV4dEVsLCAnYnV0dG9uJyk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJG5leHRFbCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAkbmV4dEVsLm9uKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgICB9XG4gICAgICBpZiAoJHByZXZFbCkge1xuICAgICAgICBzd2lwZXIuYTExeS5tYWtlRWxGb2N1c2FibGUoJHByZXZFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkcHJldkVsLCAnYnV0dG9uJyk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJHByZXZFbCwgcGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgICAkcHJldkVsLm9uKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFBhZ2luYXRpb25cbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9uKCdrZXlkb3duJywgKFwiLlwiICsgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuYTExeS5saXZlUmVnaW9uICYmIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ubGVuZ3RoID4gMCkgeyBzd2lwZXIuYTExeS5saXZlUmVnaW9uLnJlbW92ZSgpOyB9XG5cbiAgICAgIHZhciAkbmV4dEVsO1xuICAgICAgdmFyICRwcmV2RWw7XG4gICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgICAkbmV4dEVsID0gc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbDtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAgICRwcmV2RWwgPSBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsO1xuICAgICAgfVxuICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgJG5leHRFbC5vZmYoJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICAgIH1cbiAgICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAgICRwcmV2RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFBhZ2luYXRpb25cbiAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9mZigna2V5ZG93bicsIChcIi5cIiArIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSwgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbiAgdmFyIEExMXkgPSB7XG4gICAgbmFtZTogJ2ExMXknLFxuICAgIHBhcmFtczoge1xuICAgICAgYTExeToge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLFxuICAgICAgICBwcmV2U2xpZGVNZXNzYWdlOiAnUHJldmlvdXMgc2xpZGUnLFxuICAgICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgICBsYXN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgbGFzdCBzbGlkZScsXG4gICAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBhMTF5OiB7XG4gICAgICAgICAgbGl2ZVJlZ2lvbjogJCgoXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyAoc3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzKSArIFwiXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiPjwvc3Bhbj5cIikpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBPYmplY3Qua2V5cyhhMTF5KS5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgICAgIHN3aXBlci5hMTF5W21ldGhvZE5hbWVdID0gYTExeVttZXRob2ROYW1lXS5iaW5kKHN3aXBlcik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uOiB7XG4gICAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmExMXkuaW5pdCgpO1xuICAgICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgICB9LFxuICAgICAgdG9FZGdlOiBmdW5jdGlvbiB0b0VkZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuYTExeS51cGRhdGVOYXZpZ2F0aW9uKCk7XG4gICAgICB9LFxuICAgICAgZnJvbUVkZ2U6IGZ1bmN0aW9uIGZyb21FZGdlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgICAgfSxcbiAgICAgIHBhZ2luYXRpb25VcGRhdGU6IGZ1bmN0aW9uIHBhZ2luYXRpb25VcGRhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuYTExeS51cGRhdGVQYWdpbmF0aW9uKCk7XG4gICAgICB9LFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5hMTF5LmRlc3Ryb3koKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgSGlzdG9yeSA9IHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgeyByZXR1cm47IH1cbiAgICAgIGlmICghd2luLmhpc3RvcnkgfHwgIXdpbi5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgICBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICBzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgaGlzdG9yeSA9IHN3aXBlci5oaXN0b3J5O1xuICAgICAgaGlzdG9yeS5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICBoaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKCk7XG4gICAgICBpZiAoIWhpc3RvcnkucGF0aHMua2V5ICYmICFoaXN0b3J5LnBhdGhzLnZhbHVlKSB7IHJldHVybjsgfVxuICAgICAgaGlzdG9yeS5zY3JvbGxUb1NsaWRlKDAsIGhpc3RvcnkucGF0aHMudmFsdWUsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW4uYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbi5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHN3aXBlci5oaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IGZ1bmN0aW9uIHNldEhpc3RvcnlQb3BTdGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLmhpc3RvcnkucGF0aHMgPSBIaXN0b3J5LmdldFBhdGhWYWx1ZXMoKTtcbiAgICAgIHN3aXBlci5oaXN0b3J5LnNjcm9sbFRvU2xpZGUoc3dpcGVyLnBhcmFtcy5zcGVlZCwgc3dpcGVyLmhpc3RvcnkucGF0aHMudmFsdWUsIGZhbHNlKTtcbiAgICB9LFxuICAgIGdldFBhdGhWYWx1ZXM6IGZ1bmN0aW9uIGdldFBhdGhWYWx1ZXMoKSB7XG4gICAgICB2YXIgcGF0aEFycmF5ID0gd2luLmxvY2F0aW9uLnBhdGhuYW1lLnNsaWNlKDEpLnNwbGl0KCcvJykuZmlsdGVyKGZ1bmN0aW9uIChwYXJ0KSB7IHJldHVybiBwYXJ0ICE9PSAnJzsgfSk7XG4gICAgICB2YXIgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgICAgdmFyIGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xuICAgICAgdmFyIHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgICByZXR1cm4geyBrZXk6IGtleSwgdmFsdWU6IHZhbHVlIH07XG4gICAgfSxcbiAgICBzZXRIaXN0b3J5OiBmdW5jdGlvbiBzZXRIaXN0b3J5KGtleSwgaW5kZXgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuaGlzdG9yeS5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHsgcmV0dXJuOyB9XG4gICAgICB2YXIgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4KTtcbiAgICAgIHZhciB2YWx1ZSA9IEhpc3Rvcnkuc2x1Z2lmeShzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKSk7XG4gICAgICBpZiAoIXdpbi5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIHZhbHVlID0ga2V5ICsgXCIvXCIgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBjdXJyZW50U3RhdGUgPSB3aW4uaGlzdG9yeS5zdGF0ZTtcbiAgICAgIGlmIChjdXJyZW50U3RhdGUgJiYgY3VycmVudFN0YXRlLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW4uaGlzdG9yeS5yZXBsYWNlU3RhdGUoeyB2YWx1ZTogdmFsdWUgfSwgbnVsbCwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luLmhpc3RvcnkucHVzaFN0YXRlKHsgdmFsdWU6IHZhbHVlIH0sIG51bGwsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNsdWdpZnk6IGZ1bmN0aW9uIHNsdWdpZnkodGV4dCkge1xuICAgICAgcmV0dXJuIHRleHQudG9TdHJpbmcoKVxuICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCAnLScpXG4gICAgICAgIC5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJylcbiAgICAgICAgLnJlcGxhY2UoLy0tKy9nLCAnLScpXG4gICAgICAgIC5yZXBsYWNlKC9eLSsvLCAnJylcbiAgICAgICAgLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgICB9LFxuICAgIHNjcm9sbFRvU2xpZGU6IGZ1bmN0aW9uIHNjcm9sbFRvU2xpZGUoc3BlZWQsIHZhbHVlLCBydW5DYWxsYmFja3MpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgICAgICB2YXIgc2xpZGVIaXN0b3J5ID0gSGlzdG9yeS5zbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcbiAgICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEhpc3RvcnkkMSA9IHtcbiAgICBuYW1lOiAnaGlzdG9yeScsXG4gICAgcGFyYW1zOiB7XG4gICAgICBoaXN0b3J5OiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgICBrZXk6ICdzbGlkZXMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgICBpbml0OiBIaXN0b3J5LmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHNldEhpc3Rvcnk6IEhpc3Rvcnkuc2V0SGlzdG9yeS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0SGlzdG9yeVBvcFN0YXRlOiBIaXN0b3J5LnNldEhpc3RvcnlQb3BTdGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2Nyb2xsVG9TbGlkZTogSGlzdG9yeS5zY3JvbGxUb1NsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBkZXN0cm95OiBIaXN0b3J5LmRlc3Ryb3kuYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgICAgIHN3aXBlci5oaXN0b3J5LmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuaGlzdG9yeS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0cmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEhhc2hOYXZpZ2F0aW9uID0ge1xuICAgIG9uSGFzaENhbmdlOiBmdW5jdGlvbiBvbkhhc2hDYW5nZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIG5ld0hhc2ggPSBkb2MubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgICAgdmFyIGFjdGl2ZVNsaWRlSGFzaCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLWhhc2gnKTtcbiAgICAgIGlmIChuZXdIYXNoICE9PSBhY3RpdmVTbGlkZUhhc2gpIHtcbiAgICAgICAgdmFyIG5ld0luZGV4ID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiLlwiICsgKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgKyBcIltkYXRhLWhhc2g9XFxcIlwiICsgbmV3SGFzaCArIFwiXFxcIl1cIikpLmluZGV4KCk7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3SW5kZXggPT09ICd1bmRlZmluZWQnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRIYXNoOiBmdW5jdGlvbiBzZXRIYXNoKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7IHJldHVybjsgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbi5oaXN0b3J5ICYmIHdpbi5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW4uaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgKChcIiNcIiArIChzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCkuYXR0cignZGF0YS1oYXNoJykpKSB8fCAnJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgICB2YXIgaGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuICAgICAgICBkb2MubG9jYXRpb24uaGFzaCA9IGhhc2ggfHwgJyc7XG4gICAgICB9XG4gICAgfSxcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCB8fCAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5ICYmIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSkgeyByZXR1cm47IH1cbiAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB2YXIgaGFzaCA9IGRvYy5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgICBpZiAoaGFzaCkge1xuICAgICAgICB2YXIgc3BlZWQgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHZhciBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgICAgICAgdmFyIHNsaWRlSGFzaCA9IHNsaWRlLmF0dHIoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpO1xuICAgICAgICAgIGlmIChzbGlkZUhhc2ggPT09IGhhc2ggJiYgIXNsaWRlLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHNsaWRlLmluZGV4KCk7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICAgJCh3aW4pLm9uKCdoYXNoY2hhbmdlJywgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLm9uSGFzaENhbmdlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICAgJCh3aW4pLm9mZignaGFzaGNoYW5nZScsIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5vbkhhc2hDYW5nZSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbiAgdmFyIEhhc2hOYXZpZ2F0aW9uJDEgPSB7XG4gICAgbmFtZTogJ2hhc2gtbmF2aWdhdGlvbicsXG4gICAgcGFyYW1zOiB7XG4gICAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgICAgd2F0Y2hTdGF0ZTogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgICAgICBpbml0aWFsaXplZDogZmFsc2UsXG4gICAgICAgICAgaW5pdDogSGFzaE5hdmlnYXRpb24uaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgZGVzdHJveTogSGFzaE5hdmlnYXRpb24uZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0SGFzaDogSGFzaE5hdmlnYXRpb24uc2V0SGFzaC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgb25IYXNoQ2FuZ2U6IEhhc2hOYXZpZ2F0aW9uLm9uSGFzaENhbmdlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkKSB7XG4gICAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLnNldEhhc2goKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIC8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogXCJvZmZcIiAqL1xuXG4gIHZhciBBdXRvcGxheSA9IHtcbiAgICBydW46IGZ1bmN0aW9uIHJ1bigpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICRhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgdmFyIGRlbGF5ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICAgIGlmICgkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpKSB7XG4gICAgICAgIGRlbGF5ID0gJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSB8fCBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgICAgfVxuICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS50aW1lb3V0KTtcbiAgICAgIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID0gVXRpbHMubmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0VuZCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfVxuICAgICAgfSwgZGVsYXkpO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAodHlwZW9mIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ICE9PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0YXJ0Jyk7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIHN0b3A6IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICBpZiAodHlwZW9mIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm4gZmFsc2U7IH1cblxuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS50aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS50aW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0b3AnKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKHNwZWVkKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkgeyByZXR1cm47IH1cbiAgICAgIGlmIChzd2lwZXIuYXV0b3BsYXkudGltZW91dCkgeyBjbGVhclRpbWVvdXQoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpOyB9XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gdHJ1ZTtcbiAgICAgIGlmIChzcGVlZCA9PT0gMCB8fCAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS53YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWxbMF0uYWRkRXZlbnRMaXN0ZW5lcignd2Via2l0VHJhbnNpdGlvbkVuZCcsIHN3aXBlci5hdXRvcGxheS5vblRyYW5zaXRpb25FbmQpO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEF1dG9wbGF5JDEgPSB7XG4gICAgbmFtZTogJ2F1dG9wbGF5JyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGF1dG9wbGF5OiB7XG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICBkZWxheTogMzAwMCxcbiAgICAgICAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gICAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiB0cnVlLFxuICAgICAgICBzdG9wT25MYXN0U2xpZGU6IGZhbHNlLFxuICAgICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBhdXRvcGxheToge1xuICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgIHBhdXNlZDogZmFsc2UsXG4gICAgICAgICAgcnVuOiBBdXRvcGxheS5ydW4uYmluZChzd2lwZXIpLFxuICAgICAgICAgIHN0YXJ0OiBBdXRvcGxheS5zdGFydC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc3RvcDogQXV0b3BsYXkuc3RvcC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgcGF1c2U6IEF1dG9wbGF5LnBhdXNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBvblRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuJHdyYXBwZXJFbCkgeyByZXR1cm47IH1cbiAgICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgeyByZXR1cm47IH1cbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQpIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGJlZm9yZVRyYW5zaXRpb25TdGFydDogZnVuY3Rpb24gYmVmb3JlVHJhbnNpdGlvblN0YXJ0KHNwZWVkLCBpbnRlcm5hbCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgICAgaWYgKGludGVybmFsIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2Uoc3BlZWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNsaWRlckZpcnN0TW92ZTogZnVuY3Rpb24gc2xpZGVyRmlyc3RNb3ZlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEZhZGUgPSB7XG4gICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyICRzbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgICAgdmFyIG9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgICB2YXIgdHggPSAtb2Zmc2V0O1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgeyB0eCAtPSBzd2lwZXIudHJhbnNsYXRlOyB9XG4gICAgICAgIHZhciB0eSA9IDA7XG4gICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgICB0eCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGVcbiAgICAgICAgICA/IE1hdGgubWF4KDEgLSBNYXRoLmFicygkc2xpZGVFbFswXS5wcm9ncmVzcyksIDApXG4gICAgICAgICAgOiAxICsgTWF0aC5taW4oTWF0aC5tYXgoJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICAgICRzbGlkZUVsXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiBzbGlkZU9wYWNpdHksXG4gICAgICAgICAgfSlcbiAgICAgICAgICAudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKFwiICsgdHggKyBcInB4LCBcIiArIHR5ICsgXCJweCwgMHB4KVwiKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgdmFyIGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICAgIHNsaWRlcy50cmFuc2l0aW9uRW5kKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICAgIHZhciB0cmlnZ2VyRXZlbnRzID0gWyd3ZWJraXRUcmFuc2l0aW9uRW5kJywgJ3RyYW5zaXRpb25lbmQnXTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gIH07XG5cbiAgdmFyIEVmZmVjdEZhZGUgPSB7XG4gICAgbmFtZTogJ2VmZmVjdC1mYWRlJyxcbiAgICBwYXJhbXM6IHtcbiAgICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgICAgY3Jvc3NGYWRlOiBmYWxzZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBmYWRlRWZmZWN0OiB7XG4gICAgICAgICAgc2V0VHJhbnNsYXRlOiBGYWRlLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNpdGlvbjogRmFkZS5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaCgoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcImZhZGVcIikpO1xuICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZhZGUnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuZmFkZUVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgQ3ViZSA9IHtcbiAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICB2YXIgJHdyYXBwZXJFbCA9IHN3aXBlci4kd3JhcHBlckVsO1xuICAgICAgdmFyIHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gICAgICB2YXIgc3dpcGVyV2lkdGggPSBzd2lwZXIud2lkdGg7XG4gICAgICB2YXIgc3dpcGVySGVpZ2h0ID0gc3dpcGVyLmhlaWdodDtcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgdmFyIHN3aXBlclNpemUgPSBzd2lwZXIuc2l6ZTtcbiAgICAgIHZhciBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Q7XG4gICAgICB2YXIgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgdmFyIGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgdmFyIHdyYXBwZXJSb3RhdGUgPSAwO1xuICAgICAgdmFyICRjdWJlU2hhZG93RWw7XG4gICAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICR3cmFwcGVyRWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgJGN1YmVTaGFkb3dFbCA9ICQoJzxkaXYgY2xhc3M9XCJzd2lwZXItY3ViZS1zaGFkb3dcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICR3cmFwcGVyRWwuYXBwZW5kKCRjdWJlU2hhZG93RWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAkY3ViZVNoYWRvd0VsLmNzcyh7IGhlaWdodDogKHN3aXBlcldpZHRoICsgXCJweFwiKSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJGVsLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgICBpZiAoJGN1YmVTaGFkb3dFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgICAkZWwuYXBwZW5kKCRjdWJlU2hhZG93RWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzbGlkZUFuZ2xlID0gc2xpZGVJbmRleCAqIDkwO1xuICAgICAgICB2YXIgcm91bmQgPSBNYXRoLmZsb29yKHNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgc2xpZGVBbmdsZSA9IC1zbGlkZUFuZ2xlO1xuICAgICAgICAgIHJvdW5kID0gTWF0aC5mbG9vcigtc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oJHNsaWRlRWxbMF0ucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICAgIHZhciB0eCA9IDA7XG4gICAgICAgIHZhciB0eSA9IDA7XG4gICAgICAgIHZhciB0eiA9IDA7XG4gICAgICAgIGlmIChzbGlkZUluZGV4ICUgNCA9PT0gMCkge1xuICAgICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgICAgdHogPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMSkgJSA0ID09PSAwKSB7XG4gICAgICAgICAgdHggPSAwO1xuICAgICAgICAgIHR6ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAyKSAlIDQgPT09IDApIHtcbiAgICAgICAgICB0eCA9IHN3aXBlclNpemUgKyAocm91bmQgKiA0ICogc3dpcGVyU2l6ZSk7XG4gICAgICAgICAgdHogPSBzd2lwZXJTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMykgJSA0ID09PSAwKSB7XG4gICAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgICB0eiA9ICgzICogc3dpcGVyU2l6ZSkgKyAoc3dpcGVyU2l6ZSAqIDQgKiByb3VuZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIHR4ID0gLXR4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgICB0eSA9IHR4O1xuICAgICAgICAgIHR4ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2Zvcm0gPSBcInJvdGF0ZVgoXCIgKyAoaXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlKSArIFwiZGVnKSByb3RhdGVZKFwiICsgKGlzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwKSArIFwiZGVnKSB0cmFuc2xhdGUzZChcIiArIHR4ICsgXCJweCwgXCIgKyB0eSArIFwicHgsIFwiICsgdHogKyBcInB4KVwiO1xuICAgICAgICBpZiAocHJvZ3Jlc3MgPD0gMSAmJiBwcm9ncmVzcyA+IC0xKSB7XG4gICAgICAgICAgd3JhcHBlclJvdGF0ZSA9IChzbGlkZUluZGV4ICogOTApICsgKHByb2dyZXNzICogOTApO1xuICAgICAgICAgIGlmIChydGwpIHsgd3JhcHBlclJvdGF0ZSA9ICgtc2xpZGVJbmRleCAqIDkwKSAtIChwcm9ncmVzcyAqIDkwKTsgfVxuICAgICAgICB9XG4gICAgICAgICRzbGlkZUVsLnRyYW5zZm9ybSh0cmFuc2Zvcm0pO1xuICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgICAgdmFyIHNoYWRvd0JlZm9yZSA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgIHZhciBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgICBpZiAoc2hhZG93QmVmb3JlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2hhZG93QmVmb3JlID0gJCgoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHNoYWRvd0FmdGVyID0gJCgoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJykgKyBcIlxcXCI+PC9kaXY+XCIpKTtcbiAgICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSB7IHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTsgfVxuICAgICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHsgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTsgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkd3JhcHBlckVsLmNzcyh7XG4gICAgICAgICctd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4nOiAoXCI1MCUgNTAlIC1cIiArIChzd2lwZXJTaXplIC8gMikgKyBcInB4XCIpLFxuICAgICAgICAnLW1vei10cmFuc2Zvcm0tb3JpZ2luJzogKFwiNTAlIDUwJSAtXCIgKyAoc3dpcGVyU2l6ZSAvIDIpICsgXCJweFwiKSxcbiAgICAgICAgJy1tcy10cmFuc2Zvcm0tb3JpZ2luJzogKFwiNTAlIDUwJSAtXCIgKyAoc3dpcGVyU2l6ZSAvIDIpICsgXCJweFwiKSxcbiAgICAgICAgJ3RyYW5zZm9ybS1vcmlnaW4nOiAoXCI1MCUgNTAlIC1cIiArIChzd2lwZXJTaXplIC8gMikgKyBcInB4XCIpLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybSgoXCJ0cmFuc2xhdGUzZCgwcHgsIFwiICsgKChzd2lwZXJXaWR0aCAvIDIpICsgcGFyYW1zLnNoYWRvd09mZnNldCkgKyBcInB4LCBcIiArICgtc3dpcGVyV2lkdGggLyAyKSArIFwicHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoXCIgKyAocGFyYW1zLnNoYWRvd1NjYWxlKSArIFwiKVwiKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHNoYWRvd0FuZ2xlID0gTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLSAoTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwKTtcbiAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IDEuNSAtIChcbiAgICAgICAgICAgIChNYXRoLnNpbigoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMilcbiAgICAgICAgICAgICsgKE1hdGguY29zKChzaGFkb3dBbmdsZSAqIDIgKiBNYXRoLlBJKSAvIDM2MCkgLyAyKVxuICAgICAgICAgICk7XG4gICAgICAgICAgdmFyIHNjYWxlMSA9IHBhcmFtcy5zaGFkb3dTY2FsZTtcbiAgICAgICAgICB2YXIgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjtcbiAgICAgICAgICB2YXIgb2Zmc2V0ID0gcGFyYW1zLnNoYWRvd09mZnNldDtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybSgoXCJzY2FsZTNkKFwiICsgc2NhbGUxICsgXCIsIDEsIFwiICsgc2NhbGUyICsgXCIpIHRyYW5zbGF0ZTNkKDBweCwgXCIgKyAoKHN3aXBlckhlaWdodCAvIDIpICsgb2Zmc2V0KSArIFwicHgsIFwiICsgKC1zd2lwZXJIZWlnaHQgLyAyIC8gc2NhbGUyKSArIFwicHgpIHJvdGF0ZVgoLTkwZGVnKVwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB6RmFjdG9yID0gKEJyb3dzZXIuaXNTYWZhcmkgfHwgQnJvd3Nlci5pc1VpV2ViVmlldykgPyAoLXN3aXBlclNpemUgLyAyKSA6IDA7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC50cmFuc2Zvcm0oKFwidHJhbnNsYXRlM2QoMHB4LDAsXCIgKyB6RmFjdG9yICsgXCJweCkgcm90YXRlWChcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZSkgKyBcImRlZykgcm90YXRlWShcIiArIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDApICsgXCJkZWcpXCIpKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyICRlbCA9IHN3aXBlci4kZWw7XG4gICAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICAgIHNsaWRlc1xuICAgICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpXG4gICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93ICYmICFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgJGVsLmZpbmQoJy5zd2lwZXItY3ViZS1zaGFkb3cnKS50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIHZhciBFZmZlY3RDdWJlID0ge1xuICAgIG5hbWU6ICdlZmZlY3QtY3ViZScsXG4gICAgcGFyYW1zOiB7XG4gICAgICBjdWJlRWZmZWN0OiB7XG4gICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgICAgc2hhZG93OiB0cnVlLFxuICAgICAgICBzaGFkb3dPZmZzZXQ6IDIwLFxuICAgICAgICBzaGFkb3dTY2FsZTogMC45NCxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBjdWJlRWZmZWN0OiB7XG4gICAgICAgICAgc2V0VHJhbnNsYXRlOiBDdWJlLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNpdGlvbjogQ3ViZS5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaCgoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcImN1YmVcIikpO1xuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiM2RcIikpO1xuICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgcmVzaXN0YW5jZVJhdGlvOiAwLFxuICAgICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgICBjZW50ZXJlZFNsaWRlczogZmFsc2UsXG4gICAgICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNsYXRlOiBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIHZhciBGbGlwID0ge1xuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc2xpZGVzID0gc3dpcGVyLnNsaWRlcztcbiAgICAgIHZhciBydGwgPSBzd2lwZXIucnRsVHJhbnNsYXRlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgICB2YXIgcHJvZ3Jlc3MgPSAkc2xpZGVFbFswXS5wcm9ncmVzcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigkc2xpZGVFbFswXS5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIHZhciByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7XG4gICAgICAgIHZhciByb3RhdGVZID0gcm90YXRlO1xuICAgICAgICB2YXIgcm90YXRlWCA9IDA7XG4gICAgICAgIHZhciB0eCA9IC1vZmZzZXQ7XG4gICAgICAgIHZhciB0eSA9IDA7XG4gICAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgICB0eCA9IDA7XG4gICAgICAgICAgcm90YXRlWCA9IC1yb3RhdGVZO1xuICAgICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHJ0bCkge1xuICAgICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgICAgfVxuXG4gICAgICAgICRzbGlkZUVsWzBdLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Quc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgICB2YXIgc2hhZG93QmVmb3JlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgICAgdmFyIHNoYWRvd0FmdGVyID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCcpICsgXCJcXFwiPjwvZGl2PlwiKSk7XG4gICAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKChcIjxkaXYgY2xhc3M9XFxcInN3aXBlci1zbGlkZS1zaGFkb3ctXCIgKyAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nKSArIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHsgc2hhZG93QmVmb3JlWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApOyB9XG4gICAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgeyBzaGFkb3dBZnRlclswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApOyB9XG4gICAgICAgIH1cbiAgICAgICAgJHNsaWRlRWxcbiAgICAgICAgICAudHJhbnNmb3JtKChcInRyYW5zbGF0ZTNkKFwiICsgdHggKyBcInB4LCBcIiArIHR5ICsgXCJweCwgMHB4KSByb3RhdGVYKFwiICsgcm90YXRlWCArIFwiZGVnKSByb3RhdGVZKFwiICsgcm90YXRlWSArIFwiZGVnKVwiKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHNsaWRlc1xuICAgICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgICAgLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpXG4gICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgdmFyIGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKCkge1xuICAgICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIC8vIGlmICghJCh0aGlzKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpKSByZXR1cm47XG4gICAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyRXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9O1xuXG4gIHZhciBFZmZlY3RGbGlwID0ge1xuICAgIG5hbWU6ICdlZmZlY3QtZmxpcCcsXG4gICAgcGFyYW1zOiB7XG4gICAgICBmbGlwRWZmZWN0OiB7XG4gICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBmbGlwRWZmZWN0OiB7XG4gICAgICAgICAgc2V0VHJhbnNsYXRlOiBGbGlwLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgICAgc2V0VHJhbnNpdGlvbjogRmxpcC5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaCgoKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgKyBcImZsaXBcIikpO1xuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiM2RcIikpO1xuICAgICAgICB2YXIgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zbGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHNldFRyYW5zaXRpb246IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2ZsaXAnKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIuZmxpcEVmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgQ292ZXJmbG93ID0ge1xuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICB2YXIgc3dpcGVyV2lkdGggPSBzd2lwZXIud2lkdGg7XG4gICAgICB2YXIgc3dpcGVySGVpZ2h0ID0gc3dpcGVyLmhlaWdodDtcbiAgICAgIHZhciBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAgICAgdmFyICR3cmFwcGVyRWwgPSBzd2lwZXIuJHdyYXBwZXJFbDtcbiAgICAgIHZhciBzbGlkZXNTaXplc0dyaWQgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkO1xuICAgICAgdmFyIHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgICAgdmFyIGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgdmFyIGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyAoc3dpcGVyV2lkdGggLyAyKSA6IC10cmFuc2Zvcm0gKyAoc3dpcGVySGVpZ2h0IC8gMik7XG4gICAgICB2YXIgcm90YXRlID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnJvdGF0ZSA6IC1wYXJhbXMucm90YXRlO1xuICAgICAgdmFyIHRyYW5zbGF0ZSA9IHBhcmFtcy5kZXB0aDtcbiAgICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciAkc2xpZGVFbCA9IHNsaWRlcy5lcShpKTtcbiAgICAgICAgdmFyIHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgICAgdmFyIHNsaWRlT2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICAgIHZhciBvZmZzZXRNdWx0aXBsaWVyID0gKChjZW50ZXIgLSBzbGlkZU9mZnNldCAtIChzbGlkZVNpemUgLyAyKSkgLyBzbGlkZVNpemUpICogcGFyYW1zLm1vZGlmaWVyO1xuXG4gICAgICAgIHZhciByb3RhdGVZID0gaXNIb3Jpem9udGFsID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIHZhciByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7XG4gICAgICAgIC8vIHZhciByb3RhdGVaID0gMFxuICAgICAgICB2YXIgdHJhbnNsYXRlWiA9IC10cmFuc2xhdGUgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcblxuICAgICAgICB2YXIgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBwYXJhbXMuc3RyZXRjaCAqIChvZmZzZXRNdWx0aXBsaWVyKTtcbiAgICAgICAgdmFyIHRyYW5zbGF0ZVggPSBpc0hvcml6b250YWwgPyBwYXJhbXMuc3RyZXRjaCAqIChvZmZzZXRNdWx0aXBsaWVyKSA6IDA7XG5cbiAgICAgICAgLy8gRml4IGZvciB1bHRyYSBzbWFsbCB2YWx1ZXNcbiAgICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpIDwgMC4wMDEpIHsgdHJhbnNsYXRlWCA9IDA7IH1cbiAgICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVkpIDwgMC4wMDEpIHsgdHJhbnNsYXRlWSA9IDA7IH1cbiAgICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVopIDwgMC4wMDEpIHsgdHJhbnNsYXRlWiA9IDA7IH1cbiAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVkpIDwgMC4wMDEpIHsgcm90YXRlWSA9IDA7IH1cbiAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIDwgMC4wMDEpIHsgcm90YXRlWCA9IDA7IH1cblxuICAgICAgICB2YXIgc2xpZGVUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgdHJhbnNsYXRlWCArIFwicHgsXCIgKyB0cmFuc2xhdGVZICsgXCJweCxcIiArIHRyYW5zbGF0ZVogKyBcInB4KSAgcm90YXRlWChcIiArIHJvdGF0ZVggKyBcImRlZykgcm90YXRlWShcIiArIHJvdGF0ZVkgKyBcImRlZylcIjtcblxuICAgICAgICAkc2xpZGVFbC50cmFuc2Zvcm0oc2xpZGVUcmFuc2Zvcm0pO1xuICAgICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvZmZzZXRNdWx0aXBsaWVyKSkgKyAxO1xuICAgICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgICAgdmFyICRzaGFkb3dCZWZvcmVFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICAgIHZhciAkc2hhZG93QWZ0ZXJFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgICBpZiAoJHNoYWRvd0JlZm9yZUVsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgJHNoYWRvd0JlZm9yZUVsID0gJCgoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKSArIFwiXFxcIj48L2Rpdj5cIikpO1xuICAgICAgICAgICAgJHNsaWRlRWwuYXBwZW5kKCRzaGFkb3dCZWZvcmVFbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICRzaGFkb3dBZnRlckVsID0gJCgoXCI8ZGl2IGNsYXNzPVxcXCJzd2lwZXItc2xpZGUtc2hhZG93LVwiICsgKGlzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJykgKyBcIlxcXCI+PC9kaXY+XCIpKTtcbiAgICAgICAgICAgICRzbGlkZUVsLmFwcGVuZCgkc2hhZG93QWZ0ZXJFbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoKSB7ICRzaGFkb3dCZWZvcmVFbFswXS5zdHlsZS5vcGFjaXR5ID0gb2Zmc2V0TXVsdGlwbGllciA+IDAgPyBvZmZzZXRNdWx0aXBsaWVyIDogMDsgfVxuICAgICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGgpIHsgJHNoYWRvd0FmdGVyRWxbMF0uc3R5bGUub3BhY2l0eSA9ICgtb2Zmc2V0TXVsdGlwbGllcikgPiAwID8gLW9mZnNldE11bHRpcGxpZXIgOiAwOyB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2V0IGNvcnJlY3QgcGVyc3BlY3RpdmUgZm9yIElFMTBcbiAgICAgIGlmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMgfHwgU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgdmFyIHdzID0gJHdyYXBwZXJFbFswXS5zdHlsZTtcbiAgICAgICAgd3MucGVyc3BlY3RpdmVPcmlnaW4gPSBjZW50ZXIgKyBcInB4IDUwJVwiO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2xpZGVzXG4gICAgICAgIC50cmFuc2l0aW9uKGR1cmF0aW9uKVxuICAgICAgICAuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JylcbiAgICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH07XG5cbiAgdmFyIEVmZmVjdENvdmVyZmxvdyA9IHtcbiAgICBuYW1lOiAnZWZmZWN0LWNvdmVyZmxvdycsXG4gICAgcGFyYW1zOiB7XG4gICAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcbiAgICAgICAgcm90YXRlOiA1MCxcbiAgICAgICAgc3RyZXRjaDogMCxcbiAgICAgICAgZGVwdGg6IDEwMCxcbiAgICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcbiAgICAgICAgICBzZXRUcmFuc2xhdGU6IENvdmVyZmxvdy5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICAgIHNldFRyYW5zaXRpb246IENvdmVyZmxvdy5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb246IHtcbiAgICAgIGJlZm9yZUluaXQ6IGZ1bmN0aW9uIGJlZm9yZUluaXQoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSB7IHJldHVybjsgfVxuXG4gICAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goKChzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpICsgXCJjb3ZlcmZsb3dcIikpO1xuICAgICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKCgoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSArIFwiM2RcIikpO1xuXG4gICAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2xhdGU6IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2NvdmVyZmxvdycpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci5jb3ZlcmZsb3dFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9LFxuICAgICAgc2V0VHJhbnNpdGlvbjogZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICB2YXIgVGh1bWJzID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciByZWYgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgdmFyIHRodW1ic1BhcmFtcyA9IHJlZi50aHVtYnM7XG4gICAgICB2YXIgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgICBpZiAodGh1bWJzUGFyYW1zLnN3aXBlciBpbnN0YW5jZW9mIFN3aXBlckNsYXNzKSB7XG4gICAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gdGh1bWJzUGFyYW1zLnN3aXBlcjtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3MoVXRpbHMuZXh0ZW5kKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyLCB7XG4gICAgICAgICAgd2F0Y2hTbGlkZXNWaXNpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gICAgICAgIH0pKTtcbiAgICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXJDcmVhdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLiRlbC5hZGRDbGFzcyhzd2lwZXIucGFyYW1zLnRodW1icy50aHVtYnNDb250YWluZXJDbGFzcyk7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5vbigndGFwJywgc3dpcGVyLnRodW1icy5vblRodW1iQ2xpY2spO1xuICAgIH0sXG4gICAgb25UaHVtYkNsaWNrOiBmdW5jdGlvbiBvblRodW1iQ2xpY2soKSB7XG4gICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSB7IHJldHVybjsgfVxuICAgICAgdmFyIGNsaWNrZWRJbmRleCA9IHRodW1ic1N3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgICB2YXIgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTtcbiAgICAgIGlmIChjbGlja2VkU2xpZGUgJiYgJChjbGlja2VkU2xpZGUpLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHsgcmV0dXJuOyB9XG4gICAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSB7IHJldHVybjsgfVxuICAgICAgdmFyIHNsaWRlVG9JbmRleDtcbiAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gcGFyc2VJbnQoJCh0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZVRvSW5kZXggPSBjbGlja2VkSW5kZXg7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHZhciBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgICBjdXJyZW50SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IHN3aXBlci5zbGlkZXMuZXEoY3VycmVudEluZGV4KS5wcmV2QWxsKChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyBzbGlkZVRvSW5kZXggKyBcIlxcXCJdXCIpKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICB2YXIgbmV4dEluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLm5leHRBbGwoKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIHNsaWRlVG9JbmRleCArIFwiXFxcIl1cIikpLmVxKDApLmluZGV4KCk7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldkluZGV4ID09PSAndW5kZWZpbmVkJykgeyBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7IH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG5leHRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHsgc2xpZGVUb0luZGV4ID0gcHJldkluZGV4OyB9XG4gICAgICAgIGVsc2UgaWYgKG5leHRJbmRleCAtIGN1cnJlbnRJbmRleCA8IGN1cnJlbnRJbmRleCAtIHByZXZJbmRleCkgeyBzbGlkZVRvSW5kZXggPSBuZXh0SW5kZXg7IH1cbiAgICAgICAgZWxzZSB7IHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDsgfVxuICAgICAgfVxuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9LFxuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGluaXRpYWwpIHtcbiAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgdmFyIHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHsgcmV0dXJuOyB9XG5cbiAgICAgIHZhciBzbGlkZXNQZXJWaWV3ID0gdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bydcbiAgICAgICAgPyB0aHVtYnNTd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKVxuICAgICAgICA6IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgICAgaWYgKHN3aXBlci5yZWFsSW5kZXggIT09IHRodW1ic1N3aXBlci5yZWFsSW5kZXgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgICAgdmFyIG5ld1RodW1ic0luZGV4O1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgaWYgKHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5oYXNDbGFzcyh0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICB0aHVtYnNTd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICB0aHVtYnNTd2lwZXIuX2NsaWVudExlZnQgPSB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbFswXS5jbGllbnRMZWZ0O1xuICAgICAgICAgICAgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBGaW5kIGFjdHVhbCB0aHVtYnMgaW5kZXggdG8gc2xpZGUgdG9cbiAgICAgICAgICB2YXIgcHJldlRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLnByZXZBbGwoKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChzd2lwZXIucmVhbEluZGV4KSArIFwiXFxcIl1cIikpLmVxKDApLmluZGV4KCk7XG4gICAgICAgICAgdmFyIG5leHRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5uZXh0QWxsKChcIltkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cXFwiXCIgKyAoc3dpcGVyLnJlYWxJbmRleCkgKyBcIlxcXCJdXCIpKS5lcSgwKS5pbmRleCgpO1xuICAgICAgICAgIGlmICh0eXBlb2YgcHJldlRodW1ic0luZGV4ID09PSAndW5kZWZpbmVkJykgeyBuZXdUaHVtYnNJbmRleCA9IG5leHRUaHVtYnNJbmRleDsgfVxuICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBuZXh0VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSB7IG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4OyB9XG4gICAgICAgICAgZWxzZSBpZiAobmV4dFRodW1ic0luZGV4IC0gY3VycmVudFRodW1ic0luZGV4ID09PSBjdXJyZW50VGh1bWJzSW5kZXggLSBwcmV2VGh1bWJzSW5kZXgpIHsgbmV3VGh1bWJzSW5kZXggPSBjdXJyZW50VGh1bWJzSW5kZXg7IH1cbiAgICAgICAgICBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPCBjdXJyZW50VGh1bWJzSW5kZXggLSBwcmV2VGh1bWJzSW5kZXgpIHsgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7IH1cbiAgICAgICAgICBlbHNlIHsgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiB0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMuaW5kZXhPZihuZXdUaHVtYnNJbmRleCkgPCAwKSB7XG4gICAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4KSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRodW1ic1N3aXBlci5zbGlkZVRvKG5ld1RodW1ic0luZGV4LCBpbml0aWFsID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gQWN0aXZhdGUgdGh1bWJzXG4gICAgICB2YXIgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgICB2YXIgdGh1bWJBY3RpdmVDbGFzcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgdGh1bWJzVG9BY3RpdmF0ZSA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIH1cblxuICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5yZW1vdmVDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSArPSAxKSB7XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oKFwiW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVxcXCJcIiArIChzd2lwZXIucmVhbEluZGV4ICsgaSkgKyBcIlxcXCJdXCIpKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSQxICs9IDEpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5yZWFsSW5kZXggKyBpJDEpLmFkZENsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbiAgdmFyIFRodW1icyQxID0ge1xuICAgIG5hbWU6ICd0aHVtYnMnLFxuICAgIHBhcmFtczoge1xuICAgICAgdGh1bWJzOiB7XG4gICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICAgIHRodW1ic0NvbnRhaW5lckNsYXNzOiAnc3dpcGVyLWNvbnRhaW5lci10aHVtYnMnLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAgIHRodW1iczoge1xuICAgICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgICBpbml0OiBUaHVtYnMuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgICAgdXBkYXRlOiBUaHVtYnMudXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgICBvblRodW1iQ2xpY2s6IFRodW1icy5vblRodW1iQ2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbjoge1xuICAgICAgYmVmb3JlSW5pdDogZnVuY3Rpb24gYmVmb3JlSW5pdCgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciByZWYgPSBzd2lwZXIucGFyYW1zO1xuICAgICAgICB2YXIgdGh1bWJzID0gcmVmLnRodW1icztcbiAgICAgICAgaWYgKCF0aHVtYnMgfHwgIXRodW1icy5zd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci50aHVtYnMuaW5pdCgpO1xuICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSh0cnVlKTtcbiAgICAgIH0sXG4gICAgICBzbGlkZUNoYW5nZTogZnVuY3Rpb24gc2xpZGVDaGFuZ2UoKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSB7IHJldHVybjsgfVxuICAgICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICByZXNpemU6IGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgICB9LFxuICAgICAgb2JzZXJ2ZXJVcGRhdGU6IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICB2YXIgc3dpcGVyID0gdGhpcztcbiAgICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgeyByZXR1cm47IH1cbiAgICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICBzZXRUcmFuc2l0aW9uOiBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICAgIHZhciBzd2lwZXIgPSB0aGlzO1xuICAgICAgICB2YXIgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICAgIGlmICghdGh1bWJzU3dpcGVyKSB7IHJldHVybjsgfVxuICAgICAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgICB9LFxuICAgICAgYmVmb3JlRGVzdHJveTogZnVuY3Rpb24gYmVmb3JlRGVzdHJveSgpIHtcbiAgICAgICAgdmFyIHN3aXBlciA9IHRoaXM7XG4gICAgICAgIHZhciB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgICAgaWYgKCF0aHVtYnNTd2lwZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIGlmIChzd2lwZXIudGh1bWJzLnN3aXBlckNyZWF0ZWQgJiYgdGh1bWJzU3dpcGVyKSB7XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIC8vIFN3aXBlciBDbGFzc1xuXG4gIHZhciBjb21wb25lbnRzID0gW1xuICAgIERldmljZSQxLFxuICAgIFN1cHBvcnQkMSxcbiAgICBCcm93c2VyJDEsXG4gICAgUmVzaXplLFxuICAgIE9ic2VydmVyJDEsXG4gICAgVmlydHVhbCQxLFxuICAgIEtleWJvYXJkJDEsXG4gICAgTW91c2V3aGVlbCQxLFxuICAgIE5hdmlnYXRpb24kMSxcbiAgICBQYWdpbmF0aW9uJDEsXG4gICAgU2Nyb2xsYmFyJDEsXG4gICAgUGFyYWxsYXgkMSxcbiAgICBab29tJDEsXG4gICAgTGF6eSQxLFxuICAgIENvbnRyb2xsZXIkMSxcbiAgICBBMTF5LFxuICAgIEhpc3RvcnkkMSxcbiAgICBIYXNoTmF2aWdhdGlvbiQxLFxuICAgIEF1dG9wbGF5JDEsXG4gICAgRWZmZWN0RmFkZSxcbiAgICBFZmZlY3RDdWJlLFxuICAgIEVmZmVjdEZsaXAsXG4gICAgRWZmZWN0Q292ZXJmbG93LFxuICAgIFRodW1icyQxXG4gIF07XG5cbiAgaWYgKHR5cGVvZiBTd2lwZXIudXNlID09PSAndW5kZWZpbmVkJykge1xuICAgIFN3aXBlci51c2UgPSBTd2lwZXIuQ2xhc3MudXNlO1xuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlID0gU3dpcGVyLkNsYXNzLmluc3RhbGxNb2R1bGU7XG4gIH1cblxuICBTd2lwZXIudXNlKGNvbXBvbmVudHMpO1xuXG4gIHJldHVybiBTd2lwZXI7XG5cbn0pKTtcbiIsIi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBmYW5jeUJveCB2My41LjJcbi8vXG4vLyBMaWNlbnNlZCBHUEx2MyBmb3Igb3BlbiBzb3VyY2UgdXNlXG4vLyBvciBmYW5jeUJveCBDb21tZXJjaWFsIExpY2Vuc2UgZm9yIGNvbW1lcmNpYWwgdXNlXG4vL1xuLy8gaHR0cDovL2ZhbmN5YXBwcy5jb20vZmFuY3lib3gvXG4vLyBDb3B5cmlnaHQgMjAxOCBmYW5jeUFwcHNcbi8vXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsICQsIHVuZGVmaW5lZCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB3aW5kb3cuY29uc29sZSA9IHdpbmRvdy5jb25zb2xlIHx8IHtcclxuICAgIGluZm86IGZ1bmN0aW9uKHN0dWZmKSB7fVxyXG4gIH07XHJcblxyXG4gIC8vIElmIHRoZXJlJ3Mgbm8galF1ZXJ5LCBmYW5jeUJveCBjYW4ndCB3b3JrXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgaWYgKCEkKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBDaGVjayBpZiBmYW5jeUJveCBpcyBhbHJlYWR5IGluaXRpYWxpemVkXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICBpZiAoJC5mbi5mYW5jeWJveCkge1xyXG4gICAgY29uc29sZS5pbmZvKFwiZmFuY3lCb3ggYWxyZWFkeSBpbml0aWFsaXplZFwiKTtcclxuXHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvLyBQcml2YXRlIGRlZmF1bHQgc2V0dGluZ3NcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgLy8gQ2xvc2UgZXhpc3RpbmcgbW9kYWxzXHJcbiAgICAvLyBTZXQgdGhpcyB0byBmYWxzZSBpZiB5b3UgZG8gbm90IG5lZWQgdG8gc3RhY2sgbXVsdGlwbGUgaW5zdGFuY2VzXHJcbiAgICBjbG9zZUV4aXN0aW5nOiBmYWxzZSxcclxuXHJcbiAgICAvLyBFbmFibGUgaW5maW5pdGUgZ2FsbGVyeSBuYXZpZ2F0aW9uXHJcbiAgICBsb29wOiBmYWxzZSxcclxuXHJcbiAgICAvLyBIb3Jpem9udGFsIHNwYWNlIGJldHdlZW4gc2xpZGVzXHJcbiAgICBndXR0ZXI6IDUwLFxyXG5cclxuICAgIC8vIEVuYWJsZSBrZXlib2FyZCBuYXZpZ2F0aW9uXHJcbiAgICBrZXlib2FyZDogdHJ1ZSxcclxuXHJcbiAgICAvLyBTaG91bGQgYWxsb3cgY2FwdGlvbiB0byBvdmVybGFwIHRoZSBjb250ZW50XHJcbiAgICBwcmV2ZW50Q2FwdGlvbk92ZXJsYXA6IHRydWUsXHJcblxyXG4gICAgLy8gU2hvdWxkIGRpc3BsYXkgbmF2aWdhdGlvbiBhcnJvd3MgYXQgdGhlIHNjcmVlbiBlZGdlc1xyXG4gICAgYXJyb3dzOiB0cnVlLFxyXG5cclxuICAgIC8vIFNob3VsZCBkaXNwbGF5IGNvdW50ZXIgYXQgdGhlIHRvcCBsZWZ0IGNvcm5lclxyXG4gICAgaW5mb2JhcjogdHJ1ZSxcclxuXHJcbiAgICAvLyBTaG91bGQgZGlzcGxheSBjbG9zZSBidXR0b24gKHVzaW5nIGBidG5UcGwuc21hbGxCdG5gIHRlbXBsYXRlKSBvdmVyIHRoZSBjb250ZW50XHJcbiAgICAvLyBDYW4gYmUgdHJ1ZSwgZmFsc2UsIFwiYXV0b1wiXHJcbiAgICAvLyBJZiBcImF1dG9cIiAtIHdpbGwgYmUgYXV0b21hdGljYWxseSBlbmFibGVkIGZvciBcImh0bWxcIiwgXCJpbmxpbmVcIiBvciBcImFqYXhcIiBpdGVtc1xyXG4gICAgc21hbGxCdG46IFwiYXV0b1wiLFxyXG5cclxuICAgIC8vIFNob3VsZCBkaXNwbGF5IHRvb2xiYXIgKGJ1dHRvbnMgYXQgdGhlIHRvcClcclxuICAgIC8vIENhbiBiZSB0cnVlLCBmYWxzZSwgXCJhdXRvXCJcclxuICAgIC8vIElmIFwiYXV0b1wiIC0gd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGhpZGRlbiBpZiBcInNtYWxsQnRuXCIgaXMgZW5hYmxlZFxyXG4gICAgdG9vbGJhcjogXCJhdXRvXCIsXHJcblxyXG4gICAgLy8gV2hhdCBidXR0b25zIHNob3VsZCBhcHBlYXIgaW4gdGhlIHRvcCByaWdodCBjb3JuZXIuXHJcbiAgICAvLyBCdXR0b25zIHdpbGwgYmUgY3JlYXRlZCB1c2luZyB0ZW1wbGF0ZXMgZnJvbSBgYnRuVHBsYCBvcHRpb25cclxuICAgIC8vIGFuZCB0aGV5IHdpbGwgYmUgcGxhY2VkIGludG8gdG9vbGJhciAoY2xhc3M9XCJmYW5jeWJveC10b29sYmFyXCJgIGVsZW1lbnQpXHJcbiAgICBidXR0b25zOiBbXHJcbiAgICAgIFwiem9vbVwiLFxyXG4gICAgICAvL1wic2hhcmVcIixcclxuICAgICAgXCJzbGlkZVNob3dcIixcclxuICAgICAgLy9cImZ1bGxTY3JlZW5cIixcclxuICAgICAgLy9cImRvd25sb2FkXCIsXHJcbiAgICAgIFwidGh1bWJzXCIsXHJcbiAgICAgIFwiY2xvc2VcIlxyXG4gICAgXSxcclxuXHJcbiAgICAvLyBEZXRlY3QgXCJpZGxlXCIgdGltZSBpbiBzZWNvbmRzXHJcbiAgICBpZGxlVGltZTogMyxcclxuXHJcbiAgICAvLyBEaXNhYmxlIHJpZ2h0LWNsaWNrIGFuZCB1c2Ugc2ltcGxlIGltYWdlIHByb3RlY3Rpb24gZm9yIGltYWdlc1xyXG4gICAgcHJvdGVjdDogZmFsc2UsXHJcblxyXG4gICAgLy8gU2hvcnRjdXQgdG8gbWFrZSBjb250ZW50IFwibW9kYWxcIiAtIGRpc2FibGUga2V5Ym9hcmQgbmF2aWd0aW9uLCBoaWRlIGJ1dHRvbnMsIGV0Y1xyXG4gICAgbW9kYWw6IGZhbHNlLFxyXG5cclxuICAgIGltYWdlOiB7XHJcbiAgICAgIC8vIFdhaXQgZm9yIGltYWdlcyB0byBsb2FkIGJlZm9yZSBkaXNwbGF5aW5nXHJcbiAgICAgIC8vICAgdHJ1ZSAgLSB3YWl0IGZvciBpbWFnZSB0byBsb2FkIGFuZCB0aGVuIGRpc3BsYXk7XHJcbiAgICAgIC8vICAgZmFsc2UgLSBkaXNwbGF5IHRodW1ibmFpbCBhbmQgbG9hZCB0aGUgZnVsbC1zaXplZCBpbWFnZSBvdmVyIHRvcCxcclxuICAgICAgLy8gICAgICAgICAgIHJlcXVpcmVzIHByZWRlZmluZWQgaW1hZ2UgZGltZW5zaW9ucyAoYGRhdGEtd2lkdGhgIGFuZCBgZGF0YS1oZWlnaHRgIGF0dHJpYnV0ZXMpXHJcbiAgICAgIHByZWxvYWQ6IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIGFqYXg6IHtcclxuICAgICAgLy8gT2JqZWN0IGNvbnRhaW5pbmcgc2V0dGluZ3MgZm9yIGFqYXggcmVxdWVzdFxyXG4gICAgICBzZXR0aW5nczoge1xyXG4gICAgICAgIC8vIFRoaXMgaGVscHMgdG8gaW5kaWNhdGUgdGhhdCByZXF1ZXN0IGNvbWVzIGZyb20gdGhlIG1vZGFsXHJcbiAgICAgICAgLy8gRmVlbCBmcmVlIHRvIGNoYW5nZSBuYW1pbmdcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICBmYW5jeWJveDogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBpZnJhbWU6IHtcclxuICAgICAgLy8gSWZyYW1lIHRlbXBsYXRlXHJcbiAgICAgIHRwbDpcclxuICAgICAgICAnPGlmcmFtZSBpZD1cImZhbmN5Ym94LWZyYW1le3JuZH1cIiBuYW1lPVwiZmFuY3lib3gtZnJhbWV7cm5kfVwiIGNsYXNzPVwiZmFuY3lib3gtaWZyYW1lXCIgYWxsb3dmdWxsc2NyZWVuIGFsbG93PVwiYXV0b3BsYXk7IGZ1bGxzY3JlZW5cIiBzcmM9XCJcIj48L2lmcmFtZT4nLFxyXG5cclxuICAgICAgLy8gUHJlbG9hZCBpZnJhbWUgYmVmb3JlIGRpc3BsYXlpbmcgaXRcclxuICAgICAgLy8gVGhpcyBhbGxvd3MgdG8gY2FsY3VsYXRlIGlmcmFtZSBjb250ZW50IHdpZHRoIGFuZCBoZWlnaHRcclxuICAgICAgLy8gKG5vdGU6IER1ZSB0byBcIlNhbWUgT3JpZ2luIFBvbGljeVwiLCB5b3UgY2FuJ3QgZ2V0IGNyb3NzIGRvbWFpbiBkYXRhKS5cclxuICAgICAgcHJlbG9hZDogdHJ1ZSxcclxuXHJcbiAgICAgIC8vIEN1c3RvbSBDU1Mgc3R5bGluZyBmb3IgaWZyYW1lIHdyYXBwaW5nIGVsZW1lbnRcclxuICAgICAgLy8gWW91IGNhbiB1c2UgdGhpcyB0byBzZXQgY3VzdG9tIGlmcmFtZSBkaW1lbnNpb25zXHJcbiAgICAgIGNzczoge30sXHJcblxyXG4gICAgICAvLyBJZnJhbWUgdGFnIGF0dHJpYnV0ZXNcclxuICAgICAgYXR0cjoge1xyXG4gICAgICAgIHNjcm9sbGluZzogXCJhdXRvXCJcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBGb3IgSFRNTDUgdmlkZW8gb25seVxyXG4gICAgdmlkZW86IHtcclxuICAgICAgdHBsOlxyXG4gICAgICAgICc8dmlkZW8gY2xhc3M9XCJmYW5jeWJveC12aWRlb1wiIGNvbnRyb2xzIGNvbnRyb2xzTGlzdD1cIm5vZG93bmxvYWRcIiBwb3N0ZXI9XCJ7e3Bvc3Rlcn19XCI+JyArXHJcbiAgICAgICAgJzxzb3VyY2Ugc3JjPVwie3tzcmN9fVwiIHR5cGU9XCJ7e2Zvcm1hdH19XCIgLz4nICtcclxuICAgICAgICAnU29ycnksIHlvdXIgYnJvd3NlciBkb2VzblxcJ3Qgc3VwcG9ydCBlbWJlZGRlZCB2aWRlb3MsIDxhIGhyZWY9XCJ7e3NyY319XCI+ZG93bmxvYWQ8L2E+IGFuZCB3YXRjaCB3aXRoIHlvdXIgZmF2b3JpdGUgdmlkZW8gcGxheWVyIScgK1xyXG4gICAgICAgIFwiPC92aWRlbz5cIixcclxuICAgICAgZm9ybWF0OiBcIlwiLCAvLyBjdXN0b20gdmlkZW8gZm9ybWF0XHJcbiAgICAgIGF1dG9TdGFydDogdHJ1ZVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBEZWZhdWx0IGNvbnRlbnQgdHlwZSBpZiBjYW5ub3QgYmUgZGV0ZWN0ZWQgYXV0b21hdGljYWxseVxyXG4gICAgZGVmYXVsdFR5cGU6IFwiaW1hZ2VcIixcclxuXHJcbiAgICAvLyBPcGVuL2Nsb3NlIGFuaW1hdGlvbiB0eXBlXHJcbiAgICAvLyBQb3NzaWJsZSB2YWx1ZXM6XHJcbiAgICAvLyAgIGZhbHNlICAgICAgICAgICAgLSBkaXNhYmxlXHJcbiAgICAvLyAgIFwiem9vbVwiICAgICAgICAgICAtIHpvb20gaW1hZ2VzIGZyb20vdG8gdGh1bWJuYWlsXHJcbiAgICAvLyAgIFwiZmFkZVwiXHJcbiAgICAvLyAgIFwiem9vbS1pbi1vdXRcIlxyXG4gICAgLy9cclxuICAgIGFuaW1hdGlvbkVmZmVjdDogXCJ6b29tXCIsXHJcblxyXG4gICAgLy8gRHVyYXRpb24gaW4gbXMgZm9yIG9wZW4vY2xvc2UgYW5pbWF0aW9uXHJcbiAgICBhbmltYXRpb25EdXJhdGlvbjogMzY2LFxyXG5cclxuICAgIC8vIFNob3VsZCBpbWFnZSBjaGFuZ2Ugb3BhY2l0eSB3aGlsZSB6b29taW5nXHJcbiAgICAvLyBJZiBvcGFjaXR5IGlzIFwiYXV0b1wiLCB0aGVuIG9wYWNpdHkgd2lsbCBiZSBjaGFuZ2VkIGlmIGltYWdlIGFuZCB0aHVtYm5haWwgaGF2ZSBkaWZmZXJlbnQgYXNwZWN0IHJhdGlvc1xyXG4gICAgem9vbU9wYWNpdHk6IFwiYXV0b1wiLFxyXG5cclxuICAgIC8vIFRyYW5zaXRpb24gZWZmZWN0IGJldHdlZW4gc2xpZGVzXHJcbiAgICAvL1xyXG4gICAgLy8gUG9zc2libGUgdmFsdWVzOlxyXG4gICAgLy8gICBmYWxzZSAgICAgICAgICAgIC0gZGlzYWJsZVxyXG4gICAgLy8gICBcImZhZGUnXHJcbiAgICAvLyAgIFwic2xpZGUnXHJcbiAgICAvLyAgIFwiY2lyY3VsYXInXHJcbiAgICAvLyAgIFwidHViZSdcclxuICAgIC8vICAgXCJ6b29tLWluLW91dCdcclxuICAgIC8vICAgXCJyb3RhdGUnXHJcbiAgICAvL1xyXG4gICAgdHJhbnNpdGlvbkVmZmVjdDogXCJmYWRlXCIsXHJcblxyXG4gICAgLy8gRHVyYXRpb24gaW4gbXMgZm9yIHRyYW5zaXRpb24gYW5pbWF0aW9uXHJcbiAgICB0cmFuc2l0aW9uRHVyYXRpb246IDM2NixcclxuXHJcbiAgICAvLyBDdXN0b20gQ1NTIGNsYXNzIGZvciBzbGlkZSBlbGVtZW50XHJcbiAgICBzbGlkZUNsYXNzOiBcIlwiLFxyXG5cclxuICAgIC8vIEN1c3RvbSBDU1MgY2xhc3MgZm9yIGxheW91dFxyXG4gICAgYmFzZUNsYXNzOiBcIlwiLFxyXG5cclxuICAgIC8vIEJhc2UgdGVtcGxhdGUgZm9yIGxheW91dFxyXG4gICAgYmFzZVRwbDpcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jb250YWluZXJcIiByb2xlPVwiZGlhbG9nXCIgdGFiaW5kZXg9XCItMVwiPicgK1xyXG4gICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWJnXCI+PC9kaXY+JyArXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtaW5uZXJcIj4nICtcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1pbmZvYmFyXCI+PHNwYW4gZGF0YS1mYW5jeWJveC1pbmRleD48L3NwYW4+Jm5ic3A7LyZuYnNwOzxzcGFuIGRhdGEtZmFuY3lib3gtY291bnQ+PC9zcGFuPjwvZGl2PicgK1xyXG4gICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXRvb2xiYXJcIj57e2J1dHRvbnN9fTwvZGl2PicgK1xyXG4gICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LW5hdmlnYXRpb25cIj57e2Fycm93c319PC9kaXY+JyArXHJcbiAgICAgICc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc3RhZ2VcIj48L2Rpdj4nICtcclxuICAgICAgJzxkaXYgY2xhc3M9XCJmYW5jeWJveC1jYXB0aW9uXCI+PC9kaXY+JyArXHJcbiAgICAgIFwiPC9kaXY+XCIgK1xyXG4gICAgICBcIjwvZGl2PlwiLFxyXG5cclxuICAgIC8vIExvYWRpbmcgaW5kaWNhdG9yIHRlbXBsYXRlXHJcbiAgICBzcGlubmVyVHBsOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWxvYWRpbmdcIj48L2Rpdj4nLFxyXG5cclxuICAgIC8vIEVycm9yIG1lc3NhZ2UgdGVtcGxhdGVcclxuICAgIGVycm9yVHBsOiAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LWVycm9yXCI+PHA+e3tFUlJPUn19PC9wPjwvZGl2PicsXHJcblxyXG4gICAgYnRuVHBsOiB7XHJcbiAgICAgIGRvd25sb2FkOlxyXG4gICAgICAgICc8YSBkb3dubG9hZCBkYXRhLWZhbmN5Ym94LWRvd25sb2FkIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tZG93bmxvYWRcIiB0aXRsZT1cInt7RE9XTkxPQUR9fVwiIGhyZWY9XCJqYXZhc2NyaXB0OjtcIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTguNjIgMTcuMDlWMTlINS4zOHYtMS45MXptLTIuOTctNi45NkwxNyAxMS40NWwtNSA0Ljg3LTUtNC44NyAxLjM2LTEuMzIgMi42OCAyLjY0VjVoMS45MnY3Ljc3elwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjwvYT5cIixcclxuXHJcbiAgICAgIHpvb206XHJcbiAgICAgICAgJzxidXR0b24gZGF0YS1mYW5jeWJveC16b29tIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tem9vbVwiIHRpdGxlPVwie3taT09NfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTguNyAxNy4zbC0zLTNhNS45IDUuOSAwIDAgMC0uNi03LjYgNS45IDUuOSAwIDAgMC04LjQgMCA1LjkgNS45IDAgMCAwIDAgOC40IDUuOSA1LjkgMCAwIDAgNy43LjdsMyAzYTEgMSAwIDAgMCAxLjMgMGMuNC0uNS40LTEgMC0xLjV6TTguMSAxMy44YTQgNCAwIDAgMSAwLTUuNyA0IDQgMCAwIDEgNS43IDAgNCA0IDAgMCAxIDAgNS43IDQgNCAwIDAgMS01LjcgMHpcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8L2J1dHRvbj5cIixcclxuXHJcbiAgICAgIGNsb3NlOlxyXG4gICAgICAgICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtY2xvc2UgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1jbG9zZVwiIHRpdGxlPVwie3tDTE9TRX19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTEyIDEwLjZMNi42IDUuMiA1LjIgNi42bDUuNCA1LjQtNS40IDUuNCAxLjQgMS40IDUuNC01LjQgNS40IDUuNCAxLjQtMS40LTUuNC01LjQgNS40LTUuNC0xLjQtMS40LTUuNCA1LjR6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPC9idXR0b24+XCIsXHJcblxyXG4gICAgICAvLyBBcnJvd3NcclxuICAgICAgYXJyb3dMZWZ0OlxyXG4gICAgICAgICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtcHJldiBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWFycm93X2xlZnRcIiB0aXRsZT1cInt7UFJFVn19XCI+JyArXHJcbiAgICAgICAgJzxkaXY+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMTEuMjggMTUuN2wtMS4zNCAxLjM3TDUgMTJsNC45NC01LjA3IDEuMzQgMS4zOC0yLjY4IDIuNzJIMTl2MS45NEg4LjZ6XCIvPjwvc3ZnPjwvZGl2PicgK1xyXG4gICAgICAgIFwiPC9idXR0b24+XCIsXHJcblxyXG4gICAgICBhcnJvd1JpZ2h0OlxyXG4gICAgICAgICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtbmV4dCBjbGFzcz1cImZhbmN5Ym94LWJ1dHRvbiBmYW5jeWJveC1idXR0b24tLWFycm93X3JpZ2h0XCIgdGl0bGU9XCJ7e05FWFR9fVwiPicgK1xyXG4gICAgICAgICc8ZGl2PjxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTE1LjQgMTIuOTdsLTIuNjggMi43MiAxLjM0IDEuMzhMMTkgMTJsLTQuOTQtNS4wNy0xLjM0IDEuMzggMi42OCAyLjcySDV2MS45NHpcIi8+PC9zdmc+PC9kaXY+JyArXHJcbiAgICAgICAgXCI8L2J1dHRvbj5cIixcclxuXHJcbiAgICAgIC8vIFRoaXMgc21hbGwgY2xvc2UgYnV0dG9uIHdpbGwgYmUgYXBwZW5kZWQgdG8geW91ciBodG1sL2lubGluZS9hamF4IGNvbnRlbnQgYnkgZGVmYXVsdCxcclxuICAgICAgLy8gaWYgXCJzbWFsbEJ0blwiIG9wdGlvbiBpcyBub3Qgc2V0IHRvIGZhbHNlXHJcbiAgICAgIHNtYWxsQnRuOlxyXG4gICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBkYXRhLWZhbmN5Ym94LWNsb3NlIGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWNsb3NlLXNtYWxsXCIgdGl0bGU9XCJ7e0NMT1NFfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmVyc2lvbj1cIjFcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xMyAxMmw1LTUtMS0xLTUgNS01LTUtMSAxIDUgNS01IDUgMSAxIDUtNSA1IDUgMS0xelwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENvbnRhaW5lciBpcyBpbmplY3RlZCBpbnRvIHRoaXMgZWxlbWVudFxyXG4gICAgcGFyZW50RWw6IFwiYm9keVwiLFxyXG5cclxuICAgIC8vIEhpZGUgYnJvd3NlciB2ZXJ0aWNhbCBzY3JvbGxiYXJzOyB1c2UgYXQgeW91ciBvd24gcmlza1xyXG4gICAgaGlkZVNjcm9sbGJhcjogdHJ1ZSxcclxuXHJcbiAgICAvLyBGb2N1cyBoYW5kbGluZ1xyXG4gICAgLy8gPT09PT09PT09PT09PT1cclxuXHJcbiAgICAvLyBUcnkgdG8gZm9jdXMgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50IGFmdGVyIG9wZW5pbmdcclxuICAgIGF1dG9Gb2N1czogdHJ1ZSxcclxuXHJcbiAgICAvLyBQdXQgZm9jdXMgYmFjayB0byBhY3RpdmUgZWxlbWVudCBhZnRlciBjbG9zaW5nXHJcbiAgICBiYWNrRm9jdXM6IHRydWUsXHJcblxyXG4gICAgLy8gRG8gbm90IGxldCB1c2VyIHRvIGZvY3VzIG9uIGVsZW1lbnQgb3V0c2lkZSBtb2RhbCBjb250ZW50XHJcbiAgICB0cmFwRm9jdXM6IHRydWUsXHJcblxyXG4gICAgLy8gTW9kdWxlIHNwZWNpZmljIG9wdGlvbnNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZnVsbFNjcmVlbjoge1xyXG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNldCBgdG91Y2g6IGZhbHNlYCB0byBkaXNhYmxlIHBhbm5pbmcvc3dpcGluZ1xyXG4gICAgdG91Y2g6IHtcclxuICAgICAgdmVydGljYWw6IHRydWUsIC8vIEFsbG93IHRvIGRyYWcgY29udGVudCB2ZXJ0aWNhbGx5XHJcbiAgICAgIG1vbWVudHVtOiB0cnVlIC8vIENvbnRpbnVlIG1vdmVtZW50IGFmdGVyIHJlbGVhc2luZyBtb3VzZS90b3VjaCB3aGVuIHBhbm5pbmdcclxuICAgIH0sXHJcblxyXG4gICAgLy8gSGFzaCB2YWx1ZSB3aGVuIGluaXRpYWxpemluZyBtYW51YWxseSxcclxuICAgIC8vIHNldCBgZmFsc2VgIHRvIGRpc2FibGUgaGFzaCBjaGFuZ2VcclxuICAgIGhhc2g6IG51bGwsXHJcblxyXG4gICAgLy8gQ3VzdG9taXplIG9yIGFkZCBuZXcgbWVkaWEgdHlwZXNcclxuICAgIC8vIEV4YW1wbGU6XHJcbiAgICAvKlxyXG4gICAgICBtZWRpYSA6IHtcclxuICAgICAgICB5b3V0dWJlIDoge1xyXG4gICAgICAgICAgcGFyYW1zIDoge1xyXG4gICAgICAgICAgICBhdXRvcGxheSA6IDBcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICovXHJcbiAgICBtZWRpYToge30sXHJcblxyXG4gICAgc2xpZGVTaG93OiB7XHJcbiAgICAgIGF1dG9TdGFydDogZmFsc2UsXHJcbiAgICAgIHNwZWVkOiAzMDAwXHJcbiAgICB9LFxyXG5cclxuICAgIHRodW1iczoge1xyXG4gICAgICBhdXRvU3RhcnQ6IGZhbHNlLCAvLyBEaXNwbGF5IHRodW1ibmFpbHMgb24gb3BlbmluZ1xyXG4gICAgICBoaWRlT25DbG9zZTogdHJ1ZSwgLy8gSGlkZSB0aHVtYm5haWwgZ3JpZCB3aGVuIGNsb3NpbmcgYW5pbWF0aW9uIHN0YXJ0c1xyXG4gICAgICBwYXJlbnRFbDogXCIuZmFuY3lib3gtY29udGFpbmVyXCIsIC8vIENvbnRhaW5lciBpcyBpbmplY3RlZCBpbnRvIHRoaXMgZWxlbWVudFxyXG4gICAgICBheGlzOiBcInlcIiAvLyBWZXJ0aWNhbCAoeSkgb3IgaG9yaXpvbnRhbCAoeCkgc2Nyb2xsaW5nXHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFVzZSBtb3VzZXdoZWVsIHRvIG5hdmlnYXRlIGdhbGxlcnlcclxuICAgIC8vIElmICdhdXRvJyAtIGVuYWJsZWQgZm9yIGltYWdlcyBvbmx5XHJcbiAgICB3aGVlbDogXCJhdXRvXCIsXHJcblxyXG4gICAgLy8gQ2FsbGJhY2tzXHJcbiAgICAvLz09PT09PT09PT1cclxuXHJcbiAgICAvLyBTZWUgRG9jdW1lbnRhdGlvbi9BUEkvRXZlbnRzIGZvciBtb3JlIGluZm9ybWF0aW9uXHJcbiAgICAvLyBFeGFtcGxlOlxyXG4gICAgLypcclxuICAgICAgYWZ0ZXJTaG93OiBmdW5jdGlvbiggaW5zdGFuY2UsIGN1cnJlbnQgKSB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCAnQ2xpY2tlZCBlbGVtZW50OicgKTtcclxuICAgICAgICBjb25zb2xlLmluZm8oIGN1cnJlbnQub3B0cy4kb3JpZyApO1xyXG4gICAgICB9XHJcbiAgICAqL1xyXG5cclxuICAgIG9uSW5pdDogJC5ub29wLCAvLyBXaGVuIGluc3RhbmNlIGhhcyBiZWVuIGluaXRpYWxpemVkXHJcblxyXG4gICAgYmVmb3JlTG9hZDogJC5ub29wLCAvLyBCZWZvcmUgdGhlIGNvbnRlbnQgb2YgYSBzbGlkZSBpcyBiZWluZyBsb2FkZWRcclxuICAgIGFmdGVyTG9hZDogJC5ub29wLCAvLyBXaGVuIHRoZSBjb250ZW50IG9mIGEgc2xpZGUgaXMgZG9uZSBsb2FkaW5nXHJcblxyXG4gICAgYmVmb3JlU2hvdzogJC5ub29wLCAvLyBCZWZvcmUgb3BlbiBhbmltYXRpb24gc3RhcnRzXHJcbiAgICBhZnRlclNob3c6ICQubm9vcCwgLy8gV2hlbiBjb250ZW50IGlzIGRvbmUgbG9hZGluZyBhbmQgYW5pbWF0aW5nXHJcblxyXG4gICAgYmVmb3JlQ2xvc2U6ICQubm9vcCwgLy8gQmVmb3JlIHRoZSBpbnN0YW5jZSBhdHRlbXB0cyB0byBjbG9zZS4gUmV0dXJuIGZhbHNlIHRvIGNhbmNlbCB0aGUgY2xvc2UuXHJcbiAgICBhZnRlckNsb3NlOiAkLm5vb3AsIC8vIEFmdGVyIGluc3RhbmNlIGhhcyBiZWVuIGNsb3NlZFxyXG5cclxuICAgIG9uQWN0aXZhdGU6ICQubm9vcCwgLy8gV2hlbiBpbnN0YW5jZSBpcyBicm91Z2h0IHRvIGZyb250XHJcbiAgICBvbkRlYWN0aXZhdGU6ICQubm9vcCwgLy8gV2hlbiBvdGhlciBpbnN0YW5jZSBoYXMgYmVlbiBhY3RpdmF0ZWRcclxuXHJcbiAgICAvLyBJbnRlcmFjdGlvblxyXG4gICAgLy8gPT09PT09PT09PT1cclxuXHJcbiAgICAvLyBVc2Ugb3B0aW9ucyBiZWxvdyB0byBjdXN0b21pemUgdGFrZW4gYWN0aW9uIHdoZW4gdXNlciBjbGlja3Mgb3IgZG91YmxlIGNsaWNrcyBvbiB0aGUgZmFuY3lCb3ggYXJlYSxcclxuICAgIC8vIGVhY2ggb3B0aW9uIGNhbiBiZSBzdHJpbmcgb3IgbWV0aG9kIHRoYXQgcmV0dXJucyB2YWx1ZS5cclxuICAgIC8vXHJcbiAgICAvLyBQb3NzaWJsZSB2YWx1ZXM6XHJcbiAgICAvLyAgIFwiY2xvc2VcIiAgICAgICAgICAgLSBjbG9zZSBpbnN0YW5jZVxyXG4gICAgLy8gICBcIm5leHRcIiAgICAgICAgICAgIC0gbW92ZSB0byBuZXh0IGdhbGxlcnkgaXRlbVxyXG4gICAgLy8gICBcIm5leHRPckNsb3NlXCIgICAgIC0gbW92ZSB0byBuZXh0IGdhbGxlcnkgaXRlbSBvciBjbG9zZSBpZiBnYWxsZXJ5IGhhcyBvbmx5IG9uZSBpdGVtXHJcbiAgICAvLyAgIFwidG9nZ2xlQ29udHJvbHNcIiAgLSBzaG93L2hpZGUgY29udHJvbHNcclxuICAgIC8vICAgXCJ6b29tXCIgICAgICAgICAgICAtIHpvb20gaW1hZ2UgKGlmIGxvYWRlZClcclxuICAgIC8vICAgZmFsc2UgICAgICAgICAgICAgLSBkbyBub3RoaW5nXHJcblxyXG4gICAgLy8gQ2xpY2tlZCBvbiB0aGUgY29udGVudFxyXG4gICAgY2xpY2tDb250ZW50OiBmdW5jdGlvbihjdXJyZW50LCBldmVudCkge1xyXG4gICAgICByZXR1cm4gY3VycmVudC50eXBlID09PSBcImltYWdlXCIgPyBcInpvb21cIiA6IGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDbGlja2VkIG9uIHRoZSBzbGlkZVxyXG4gICAgY2xpY2tTbGlkZTogXCJjbG9zZVwiLFxyXG5cclxuICAgIC8vIENsaWNrZWQgb24gdGhlIGJhY2tncm91bmQgKGJhY2tkcm9wKSBlbGVtZW50O1xyXG4gICAgLy8gaWYgeW91IGhhdmUgbm90IGNoYW5nZWQgdGhlIGxheW91dCwgdGhlbiBtb3N0IGxpa2VseSB5b3UgbmVlZCB0byB1c2UgYGNsaWNrU2xpZGVgIG9wdGlvblxyXG4gICAgY2xpY2tPdXRzaWRlOiBcImNsb3NlXCIsXHJcblxyXG4gICAgLy8gU2FtZSBhcyBwcmV2aW91cyB0d28sIGJ1dCBmb3IgZG91YmxlIGNsaWNrXHJcbiAgICBkYmxjbGlja0NvbnRlbnQ6IGZhbHNlLFxyXG4gICAgZGJsY2xpY2tTbGlkZTogZmFsc2UsXHJcbiAgICBkYmxjbGlja091dHNpZGU6IGZhbHNlLFxyXG5cclxuICAgIC8vIEN1c3RvbSBvcHRpb25zIHdoZW4gbW9iaWxlIGRldmljZSBpcyBkZXRlY3RlZFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgbW9iaWxlOiB7XHJcbiAgICAgIHByZXZlbnRDYXB0aW9uT3ZlcmxhcDogZmFsc2UsXHJcbiAgICAgIGlkbGVUaW1lOiBmYWxzZSxcclxuICAgICAgY2xpY2tDb250ZW50OiBmdW5jdGlvbihjdXJyZW50LCBldmVudCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IFwidG9nZ2xlQ29udHJvbHNcIiA6IGZhbHNlO1xyXG4gICAgICB9LFxyXG4gICAgICBjbGlja1NsaWRlOiBmdW5jdGlvbihjdXJyZW50LCBldmVudCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IFwidG9nZ2xlQ29udHJvbHNcIiA6IFwiY2xvc2VcIjtcclxuICAgICAgfSxcclxuICAgICAgZGJsY2xpY2tDb250ZW50OiBmdW5jdGlvbihjdXJyZW50LCBldmVudCkge1xyXG4gICAgICAgIHJldHVybiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IFwiem9vbVwiIDogZmFsc2U7XHJcbiAgICAgIH0sXHJcbiAgICAgIGRibGNsaWNrU2xpZGU6IGZ1bmN0aW9uKGN1cnJlbnQsIGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiID8gXCJ6b29tXCIgOiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBJbnRlcm5hdGlvbmFsaXphdGlvblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBsYW5nOiBcImVuXCIsXHJcbiAgICBpMThuOiB7XHJcbiAgICAgIGVuOiB7XHJcbiAgICAgICAgQ0xPU0U6IFwiQ2xvc2VcIixcclxuICAgICAgICBORVhUOiBcIk5leHRcIixcclxuICAgICAgICBQUkVWOiBcIlByZXZpb3VzXCIsXHJcbiAgICAgICAgRVJST1I6IFwiVGhlIHJlcXVlc3RlZCBjb250ZW50IGNhbm5vdCBiZSBsb2FkZWQuIDxici8+IFBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuXCIsXHJcbiAgICAgICAgUExBWV9TVEFSVDogXCJTdGFydCBzbGlkZXNob3dcIixcclxuICAgICAgICBQTEFZX1NUT1A6IFwiUGF1c2Ugc2xpZGVzaG93XCIsXHJcbiAgICAgICAgRlVMTF9TQ1JFRU46IFwiRnVsbCBzY3JlZW5cIixcclxuICAgICAgICBUSFVNQlM6IFwiVGh1bWJuYWlsc1wiLFxyXG4gICAgICAgIERPV05MT0FEOiBcIkRvd25sb2FkXCIsXHJcbiAgICAgICAgU0hBUkU6IFwiU2hhcmVcIixcclxuICAgICAgICBaT09NOiBcIlpvb21cIlxyXG4gICAgICB9LFxyXG4gICAgICBkZToge1xyXG4gICAgICAgIENMT1NFOiBcIlNjaGxpZXNzZW5cIixcclxuICAgICAgICBORVhUOiBcIldlaXRlclwiLFxyXG4gICAgICAgIFBSRVY6IFwiWnVyw7xja1wiLFxyXG4gICAgICAgIEVSUk9SOiBcIkRpZSBhbmdlZm9yZGVydGVuIERhdGVuIGtvbm50ZW4gbmljaHQgZ2VsYWRlbiB3ZXJkZW4uIDxici8+IEJpdHRlIHZlcnN1Y2hlbiBTaWUgZXMgc3DDpHRlciBub2NobWFsLlwiLFxyXG4gICAgICAgIFBMQVlfU1RBUlQ6IFwiRGlhc2NoYXUgc3RhcnRlblwiLFxyXG4gICAgICAgIFBMQVlfU1RPUDogXCJEaWFzY2hhdSBiZWVuZGVuXCIsXHJcbiAgICAgICAgRlVMTF9TQ1JFRU46IFwiVm9sbGJpbGRcIixcclxuICAgICAgICBUSFVNQlM6IFwiVm9yc2NoYXViaWxkZXJcIixcclxuICAgICAgICBET1dOTE9BRDogXCJIZXJ1bnRlcmxhZGVuXCIsXHJcbiAgICAgICAgU0hBUkU6IFwiVGVpbGVuXCIsXHJcbiAgICAgICAgWk9PTTogXCJNYcOfc3RhYlwiXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBGZXcgdXNlZnVsIHZhcmlhYmxlcyBhbmQgbWV0aG9kc1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gIHZhciAkVyA9ICQod2luZG93KTtcclxuICB2YXIgJEQgPSAkKGRvY3VtZW50KTtcclxuXHJcbiAgdmFyIGNhbGxlZCA9IDA7XHJcblxyXG4gIC8vIENoZWNrIGlmIGFuIG9iamVjdCBpcyBhIGpRdWVyeSBvYmplY3QgYW5kIG5vdCBhIG5hdGl2ZSBKYXZhU2NyaXB0IG9iamVjdFxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIHZhciBpc1F1ZXJ5ID0gZnVuY3Rpb24ob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqICYmIG9iai5oYXNPd25Qcm9wZXJ0eSAmJiBvYmogaW5zdGFuY2VvZiAkO1xyXG4gIH07XHJcblxyXG4gIC8vIEhhbmRsZSBtdWx0aXBsZSBicm93c2VycyBmb3IgXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIiBhbmQgXCJjYW5jZWxBbmltYXRpb25GcmFtZVwiXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIHZhciByZXF1ZXN0QUZyYW1lID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgLy8gaWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBzZXRUaW1lb3V0XHJcbiAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pKCk7XHJcblxyXG4gIHZhciBjYW5jZWxBRnJhbWUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChpZCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSkoKTtcclxuXHJcbiAgLy8gRGV0ZWN0IHRoZSBzdXBwb3J0ZWQgdHJhbnNpdGlvbi1lbmQgZXZlbnQgcHJvcGVydHkgbmFtZVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICB2YXIgdHJhbnNpdGlvbkVuZCA9IChmdW5jdGlvbigpIHtcclxuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmYWtlZWxlbWVudFwiKSxcclxuICAgICAgdDtcclxuXHJcbiAgICB2YXIgdHJhbnNpdGlvbnMgPSB7XHJcbiAgICAgIHRyYW5zaXRpb246IFwidHJhbnNpdGlvbmVuZFwiLFxyXG4gICAgICBPVHJhbnNpdGlvbjogXCJvVHJhbnNpdGlvbkVuZFwiLFxyXG4gICAgICBNb3pUcmFuc2l0aW9uOiBcInRyYW5zaXRpb25lbmRcIixcclxuICAgICAgV2Via2l0VHJhbnNpdGlvbjogXCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCJcclxuICAgIH07XHJcblxyXG4gICAgZm9yICh0IGluIHRyYW5zaXRpb25zKSB7XHJcbiAgICAgIGlmIChlbC5zdHlsZVt0XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRyYW5zaXRpb25zW3RdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIFwidHJhbnNpdGlvbmVuZFwiO1xyXG4gIH0pKCk7XHJcblxyXG4gIC8vIEZvcmNlIHJlZHJhdyBvbiBhbiBlbGVtZW50LlxyXG4gIC8vIFRoaXMgaGVscHMgaW4gY2FzZXMgd2hlcmUgdGhlIGJyb3dzZXIgZG9lc24ndCByZWRyYXcgYW4gdXBkYXRlZCBlbGVtZW50IHByb3Blcmx5XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICB2YXIgZm9yY2VSZWRyYXcgPSBmdW5jdGlvbigkZWwpIHtcclxuICAgIHJldHVybiAkZWwgJiYgJGVsLmxlbmd0aCAmJiAkZWxbMF0ub2Zmc2V0SGVpZ2h0O1xyXG4gIH07XHJcblxyXG4gIC8vIEV4Y2x1ZGUgYXJyYXkgKGBidXR0b25zYCkgb3B0aW9ucyBmcm9tIGRlZXAgbWVyZ2luZ1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIHZhciBtZXJnZU9wdHMgPSBmdW5jdGlvbihvcHRzMSwgb3B0czIpIHtcclxuICAgIHZhciByZXogPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0czEsIG9wdHMyKTtcclxuXHJcbiAgICAkLmVhY2gob3B0czIsIGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgaWYgKCQuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICByZXpba2V5XSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmV6O1xyXG4gIH07XHJcblxyXG4gIC8vIEhvdyBtdWNoIG9mIGFuIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiB2aWV3cG9ydFxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgaW5WaWV3cG9ydCA9IGZ1bmN0aW9uKGVsZW0pIHtcclxuICAgIHZhciBlbGVtQ2VudGVyLCByZXo7XHJcblxyXG4gICAgaWYgKCFlbGVtIHx8IGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgICQoXCIuZmFuY3lib3gtY29udGFpbmVyXCIpLmNzcyhcInBvaW50ZXItZXZlbnRzXCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICBlbGVtQ2VudGVyID0ge1xyXG4gICAgICB4OiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgKyBlbGVtLm9mZnNldFdpZHRoIC8gMixcclxuICAgICAgeTogZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyBlbGVtLm9mZnNldEhlaWdodCAvIDJcclxuICAgIH07XHJcblxyXG4gICAgcmV6ID0gZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludChlbGVtQ2VudGVyLngsIGVsZW1DZW50ZXIueSkgPT09IGVsZW07XHJcblxyXG4gICAgJChcIi5mYW5jeWJveC1jb250YWluZXJcIikuY3NzKFwicG9pbnRlci1ldmVudHNcIiwgXCJcIik7XHJcblxyXG4gICAgcmV0dXJuIHJlejtcclxuICB9O1xyXG5cclxuICAvLyBDbGFzcyBkZWZpbml0aW9uXHJcbiAgLy8gPT09PT09PT09PT09PT09PVxyXG5cclxuICB2YXIgRmFuY3lCb3ggPSBmdW5jdGlvbihjb250ZW50LCBvcHRzLCBpbmRleCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHNlbGYub3B0cyA9IG1lcmdlT3B0cyh7aW5kZXg6IGluZGV4fSwgJC5mYW5jeWJveC5kZWZhdWx0cyk7XHJcblxyXG4gICAgaWYgKCQuaXNQbGFpbk9iamVjdChvcHRzKSkge1xyXG4gICAgICBzZWxmLm9wdHMgPSBtZXJnZU9wdHMoc2VsZi5vcHRzLCBvcHRzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJC5mYW5jeWJveC5pc01vYmlsZSkge1xyXG4gICAgICBzZWxmLm9wdHMgPSBtZXJnZU9wdHMoc2VsZi5vcHRzLCBzZWxmLm9wdHMubW9iaWxlKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmlkID0gc2VsZi5vcHRzLmlkIHx8ICsrY2FsbGVkO1xyXG5cclxuICAgIHNlbGYuY3VyckluZGV4ID0gcGFyc2VJbnQoc2VsZi5vcHRzLmluZGV4LCAxMCkgfHwgMDtcclxuICAgIHNlbGYucHJldkluZGV4ID0gbnVsbDtcclxuXHJcbiAgICBzZWxmLnByZXZQb3MgPSBudWxsO1xyXG4gICAgc2VsZi5jdXJyUG9zID0gMDtcclxuXHJcbiAgICBzZWxmLmZpcnN0UnVuID0gdHJ1ZTtcclxuXHJcbiAgICAvLyBBbGwgZ3JvdXAgaXRlbXNcclxuICAgIHNlbGYuZ3JvdXAgPSBbXTtcclxuXHJcbiAgICAvLyBFeGlzdGluZyBzbGlkZXMgKGZvciBjdXJyZW50LCBuZXh0IGFuZCBwcmV2aW91cyBnYWxsZXJ5IGl0ZW1zKVxyXG4gICAgc2VsZi5zbGlkZXMgPSB7fTtcclxuXHJcbiAgICAvLyBDcmVhdGUgZ3JvdXAgZWxlbWVudHNcclxuICAgIHNlbGYuYWRkQ29udGVudChjb250ZW50KTtcclxuXHJcbiAgICBpZiAoIXNlbGYuZ3JvdXAubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmluaXQoKTtcclxuICB9O1xyXG5cclxuICAkLmV4dGVuZChGYW5jeUJveC5wcm90b3R5cGUsIHtcclxuICAgIC8vIENyZWF0ZSBET00gc3RydWN0dXJlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgZmlyc3RJdGVtID0gc2VsZi5ncm91cFtzZWxmLmN1cnJJbmRleF0sXHJcbiAgICAgICAgZmlyc3RJdGVtT3B0cyA9IGZpcnN0SXRlbS5vcHRzLFxyXG4gICAgICAgICRjb250YWluZXIsXHJcbiAgICAgICAgYnV0dG9uU3RyO1xyXG5cclxuICAgICAgaWYgKGZpcnN0SXRlbU9wdHMuY2xvc2VFeGlzdGluZykge1xyXG4gICAgICAgICQuZmFuY3lib3guY2xvc2UodHJ1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEhpZGUgc2Nyb2xsYmFyc1xyXG4gICAgICAvLyA9PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICQoXCJib2R5XCIpLmFkZENsYXNzKFwiZmFuY3lib3gtYWN0aXZlXCIpO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgICEkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkgJiZcclxuICAgICAgICBmaXJzdEl0ZW1PcHRzLmhpZGVTY3JvbGxiYXIgIT09IGZhbHNlICYmXHJcbiAgICAgICAgISQuZmFuY3lib3guaXNNb2JpbGUgJiZcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodFxyXG4gICAgICApIHtcclxuICAgICAgICAkKFwiaGVhZFwiKS5hcHBlbmQoXHJcbiAgICAgICAgICAnPHN0eWxlIGlkPVwiZmFuY3lib3gtc3R5bGUtbm9zY3JvbGxcIiB0eXBlPVwidGV4dC9jc3NcIj4uY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFye21hcmdpbi1yaWdodDonICtcclxuICAgICAgICAgICAgKHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSArXHJcbiAgICAgICAgICAgIFwicHg7fTwvc3R5bGU+XCJcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICAkKFwiYm9keVwiKS5hZGRDbGFzcyhcImNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQnVpbGQgaHRtbCBtYXJrdXAgYW5kIHNldCByZWZlcmVuY2VzXHJcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgLy8gQnVpbGQgaHRtbCBjb2RlIGZvciBidXR0b25zIGFuZCBpbnNlcnQgaW50byBtYWluIHRlbXBsYXRlXHJcbiAgICAgIGJ1dHRvblN0ciA9IFwiXCI7XHJcblxyXG4gICAgICAkLmVhY2goZmlyc3RJdGVtT3B0cy5idXR0b25zLCBmdW5jdGlvbihpbmRleCwgdmFsdWUpIHtcclxuICAgICAgICBidXR0b25TdHIgKz0gZmlyc3RJdGVtT3B0cy5idG5UcGxbdmFsdWVdIHx8IFwiXCI7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIG1hcmt1cCBmcm9tIGJhc2UgdGVtcGxhdGUsIGl0IHdpbGwgYmUgaW5pdGlhbGx5IGhpZGRlbiB0b1xyXG4gICAgICAvLyBhdm9pZCB1bm5lY2Vzc2FyeSB3b3JrIGxpa2UgcGFpbnRpbmcgd2hpbGUgaW5pdGlhbGl6aW5nIGlzIG5vdCBjb21wbGV0ZVxyXG4gICAgICAkY29udGFpbmVyID0gJChcclxuICAgICAgICBzZWxmLnRyYW5zbGF0ZShcclxuICAgICAgICAgIHNlbGYsXHJcbiAgICAgICAgICBmaXJzdEl0ZW1PcHRzLmJhc2VUcGxcclxuICAgICAgICAgICAgLnJlcGxhY2UoXCJ7e2J1dHRvbnN9fVwiLCBidXR0b25TdHIpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKFwie3thcnJvd3N9fVwiLCBmaXJzdEl0ZW1PcHRzLmJ0blRwbC5hcnJvd0xlZnQgKyBmaXJzdEl0ZW1PcHRzLmJ0blRwbC5hcnJvd1JpZ2h0KVxyXG4gICAgICAgIClcclxuICAgICAgKVxyXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJmYW5jeWJveC1jb250YWluZXItXCIgKyBzZWxmLmlkKVxyXG4gICAgICAgIC5hZGRDbGFzcyhmaXJzdEl0ZW1PcHRzLmJhc2VDbGFzcylcclxuICAgICAgICAuZGF0YShcIkZhbmN5Qm94XCIsIHNlbGYpXHJcbiAgICAgICAgLmFwcGVuZFRvKGZpcnN0SXRlbU9wdHMucGFyZW50RWwpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIG9iamVjdCBob2xkaW5nIHJlZmVyZW5jZXMgdG8galF1ZXJ5IHdyYXBwZWQgbm9kZXNcclxuICAgICAgc2VsZi4kcmVmcyA9IHtcclxuICAgICAgICBjb250YWluZXI6ICRjb250YWluZXJcclxuICAgICAgfTtcclxuXHJcbiAgICAgIFtcImJnXCIsIFwiaW5uZXJcIiwgXCJpbmZvYmFyXCIsIFwidG9vbGJhclwiLCBcInN0YWdlXCIsIFwiY2FwdGlvblwiLCBcIm5hdmlnYXRpb25cIl0uZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XHJcbiAgICAgICAgc2VsZi4kcmVmc1tpdGVtXSA9ICRjb250YWluZXIuZmluZChcIi5mYW5jeWJveC1cIiArIGl0ZW0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcIm9uSW5pdFwiKTtcclxuXHJcbiAgICAgIC8vIEVuYWJsZSBldmVudHMsIGRlYWN0aXZlIHByZXZpb3VzIGluc3RhbmNlc1xyXG4gICAgICBzZWxmLmFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAvLyBCdWlsZCBzbGlkZXMsIGxvYWQgYW5kIHJldmVhbCBjb250ZW50XHJcbiAgICAgIHNlbGYuanVtcFRvKHNlbGYuY3VyckluZGV4KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gU2ltcGxlIGkxOG4gc3VwcG9ydCAtIHJlcGxhY2VzIG9iamVjdCBrZXlzIGZvdW5kIGluIHRlbXBsYXRlXHJcbiAgICAvLyB3aXRoIGNvcnJlc3BvbmRpbmcgdmFsdWVzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uKG9iaiwgc3RyKSB7XHJcbiAgICAgIHZhciBhcnIgPSBvYmoub3B0cy5pMThuW29iai5vcHRzLmxhbmddIHx8IG9iai5vcHRzLmkxOG4uZW47XHJcblxyXG4gICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xce1xceyhcXHcrKVxcfVxcfS9nLCBmdW5jdGlvbihtYXRjaCwgbikge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGFycltuXTtcclxuXHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHJldHVybiBtYXRjaDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFBvcHVsYXRlIGN1cnJlbnQgZ3JvdXAgd2l0aCBmcmVzaCBjb250ZW50XHJcbiAgICAvLyBDaGVjayBpZiBlYWNoIG9iamVjdCBoYXMgdmFsaWQgdHlwZSBhbmQgY29udGVudFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhZGRDb250ZW50OiBmdW5jdGlvbihjb250ZW50KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBpdGVtcyA9ICQubWFrZUFycmF5KGNvbnRlbnQpLFxyXG4gICAgICAgIHRodW1icztcclxuXHJcbiAgICAgICQuZWFjaChpdGVtcywgZnVuY3Rpb24oaSwgaXRlbSkge1xyXG4gICAgICAgIHZhciBvYmogPSB7fSxcclxuICAgICAgICAgIG9wdHMgPSB7fSxcclxuICAgICAgICAgICRpdGVtLFxyXG4gICAgICAgICAgdHlwZSxcclxuICAgICAgICAgIGZvdW5kLFxyXG4gICAgICAgICAgc3JjLFxyXG4gICAgICAgICAgc3JjUGFydHM7XHJcblxyXG4gICAgICAgIC8vIFN0ZXAgMSAtIE1ha2Ugc3VyZSB3ZSBoYXZlIGFuIG9iamVjdFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KGl0ZW0pKSB7XHJcbiAgICAgICAgICAvLyBXZSBwcm9iYWJseSBoYXZlIG1hbnVhbCB1c2FnZSBoZXJlLCBzb21ldGhpbmcgbGlrZVxyXG4gICAgICAgICAgLy8gJC5mYW5jeWJveC5vcGVuKCBbIHsgc3JjIDogXCJpbWFnZS5qcGdcIiwgdHlwZSA6IFwiaW1hZ2VcIiB9IF0gKVxyXG5cclxuICAgICAgICAgIG9iaiA9IGl0ZW07XHJcbiAgICAgICAgICBvcHRzID0gaXRlbS5vcHRzIHx8IGl0ZW07XHJcbiAgICAgICAgfSBlbHNlIGlmICgkLnR5cGUoaXRlbSkgPT09IFwib2JqZWN0XCIgJiYgJChpdGVtKS5sZW5ndGgpIHtcclxuICAgICAgICAgIC8vIEhlcmUgd2UgcHJvYmFibHkgaGF2ZSBqUXVlcnkgY29sbGVjdGlvbiByZXR1cm5lZCBieSBzb21lIHNlbGVjdG9yXHJcbiAgICAgICAgICAkaXRlbSA9ICQoaXRlbSk7XHJcblxyXG4gICAgICAgICAgLy8gU3VwcG9ydCBhdHRyaWJ1dGVzIGxpa2UgYGRhdGEtb3B0aW9ucz0ne1widG91Y2hcIiA6IGZhbHNlfSdgIGFuZCBgZGF0YS10b3VjaD0nZmFsc2UnYFxyXG4gICAgICAgICAgb3B0cyA9ICRpdGVtLmRhdGEoKSB8fCB7fTtcclxuICAgICAgICAgIG9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0cywgb3B0cy5vcHRpb25zKTtcclxuXHJcbiAgICAgICAgICAvLyBIZXJlIHdlIHN0b3JlIGNsaWNrZWQgZWxlbWVudFxyXG4gICAgICAgICAgb3B0cy4kb3JpZyA9ICRpdGVtO1xyXG5cclxuICAgICAgICAgIG9iai5zcmMgPSBzZWxmLm9wdHMuc3JjIHx8IG9wdHMuc3JjIHx8ICRpdGVtLmF0dHIoXCJocmVmXCIpO1xyXG5cclxuICAgICAgICAgIC8vIEFzc3VtZSB0aGF0IHNpbXBsZSBzeW50YXggaXMgdXNlZCwgZm9yIGV4YW1wbGU6XHJcbiAgICAgICAgICAvLyAgIGAkLmZhbmN5Ym94Lm9wZW4oICQoXCIjdGVzdFwiKSwge30gKTtgXHJcbiAgICAgICAgICBpZiAoIW9iai50eXBlICYmICFvYmouc3JjKSB7XHJcbiAgICAgICAgICAgIG9iai50eXBlID0gXCJpbmxpbmVcIjtcclxuICAgICAgICAgICAgb2JqLnNyYyA9IGl0ZW07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIEFzc3VtZSB3ZSBoYXZlIGEgc2ltcGxlIGh0bWwgY29kZSwgZm9yIGV4YW1wbGU6XHJcbiAgICAgICAgICAvLyAgICQuZmFuY3lib3gub3BlbiggJzxkaXY+PGgxPkhpITwvaDE+PC9kaXY+JyApO1xyXG4gICAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICB0eXBlOiBcImh0bWxcIixcclxuICAgICAgICAgICAgc3JjOiBpdGVtICsgXCJcIlxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEVhY2ggZ2FsbGVyeSBvYmplY3QgaGFzIGZ1bGwgY29sbGVjdGlvbiBvZiBvcHRpb25zXHJcbiAgICAgICAgb2JqLm9wdHMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgc2VsZi5vcHRzLCBvcHRzKTtcclxuXHJcbiAgICAgICAgLy8gRG8gbm90IG1lcmdlIGJ1dHRvbnMgYXJyYXlcclxuICAgICAgICBpZiAoJC5pc0FycmF5KG9wdHMuYnV0dG9ucykpIHtcclxuICAgICAgICAgIG9iai5vcHRzLmJ1dHRvbnMgPSBvcHRzLmJ1dHRvbnM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJC5mYW5jeWJveC5pc01vYmlsZSAmJiBvYmoub3B0cy5tb2JpbGUpIHtcclxuICAgICAgICAgIG9iai5vcHRzID0gbWVyZ2VPcHRzKG9iai5vcHRzLCBvYmoub3B0cy5tb2JpbGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RlcCAyIC0gTWFrZSBzdXJlIHdlIGhhdmUgY29udGVudCB0eXBlLCBpZiBub3QgLSB0cnkgdG8gZ3Vlc3NcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICB0eXBlID0gb2JqLnR5cGUgfHwgb2JqLm9wdHMudHlwZTtcclxuICAgICAgICBzcmMgPSBvYmouc3JjIHx8IFwiXCI7XHJcblxyXG4gICAgICAgIGlmICghdHlwZSAmJiBzcmMpIHtcclxuICAgICAgICAgIGlmICgoZm91bmQgPSBzcmMubWF0Y2goL1xcLihtcDR8bW92fG9ndnx3ZWJtKSgoXFw/fCMpLiopPyQvaSkpKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcInZpZGVvXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW9iai5vcHRzLnZpZGVvLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgIG9iai5vcHRzLnZpZGVvLmZvcm1hdCA9IFwidmlkZW8vXCIgKyAoZm91bmRbMV0gPT09IFwib2d2XCIgPyBcIm9nZ1wiIDogZm91bmRbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHNyYy5tYXRjaCgvKF5kYXRhOmltYWdlXFwvW2EtejAtOStcXC89XSosKXwoXFwuKGpwKGV8Z3xlZyl8Z2lmfHBuZ3xibXB8d2VicHxzdmd8aWNvKSgoXFw/fCMpLiopPyQpL2kpKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcImltYWdlXCI7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHNyYy5tYXRjaCgvXFwuKHBkZikoKFxcP3wjKS4qKT8kL2kpKSB7XHJcbiAgICAgICAgICAgIHR5cGUgPSBcImlmcmFtZVwiO1xyXG4gICAgICAgICAgICBvYmogPSAkLmV4dGVuZCh0cnVlLCBvYmosIHtjb250ZW50VHlwZTogXCJwZGZcIiwgb3B0czoge2lmcmFtZToge3ByZWxvYWQ6IGZhbHNlfX19KTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc3JjLmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcclxuICAgICAgICAgICAgdHlwZSA9IFwiaW5saW5lXCI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgb2JqLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzZWxmLnRyaWdnZXIoXCJvYmplY3ROZWVkc1R5cGVcIiwgb2JqKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghb2JqLmNvbnRlbnRUeXBlKSB7XHJcbiAgICAgICAgICBvYmouY29udGVudFR5cGUgPSAkLmluQXJyYXkob2JqLnR5cGUsIFtcImh0bWxcIiwgXCJpbmxpbmVcIiwgXCJhamF4XCJdKSA+IC0xID8gXCJodG1sXCIgOiBvYmoudHlwZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFN0ZXAgMyAtIFNvbWUgYWRqdXN0bWVudHNcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIG9iai5pbmRleCA9IHNlbGYuZ3JvdXAubGVuZ3RoO1xyXG5cclxuICAgICAgICBpZiAob2JqLm9wdHMuc21hbGxCdG4gPT0gXCJhdXRvXCIpIHtcclxuICAgICAgICAgIG9iai5vcHRzLnNtYWxsQnRuID0gJC5pbkFycmF5KG9iai50eXBlLCBbXCJodG1sXCIsIFwiaW5saW5lXCIsIFwiYWpheFwiXSkgPiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmoub3B0cy50b29sYmFyID09PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgb2JqLm9wdHMudG9vbGJhciA9ICFvYmoub3B0cy5zbWFsbEJ0bjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZpbmQgdGh1bWJuYWlsIGltYWdlLCBjaGVjayBpZiBleGlzdHMgYW5kIGlmIGlzIGluIHRoZSB2aWV3cG9ydFxyXG4gICAgICAgIG9iai4kdGh1bWIgPSBvYmoub3B0cy4kdGh1bWIgfHwgbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKG9iai5vcHRzLiR0cmlnZ2VyICYmIG9iai5pbmRleCA9PT0gc2VsZi5vcHRzLmluZGV4KSB7XHJcbiAgICAgICAgICBvYmouJHRodW1iID0gb2JqLm9wdHMuJHRyaWdnZXIuZmluZChcImltZzpmaXJzdFwiKTtcclxuXHJcbiAgICAgICAgICBpZiAob2JqLiR0aHVtYi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgb2JqLm9wdHMuJG9yaWcgPSBvYmoub3B0cy4kdHJpZ2dlcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghKG9iai4kdGh1bWIgJiYgb2JqLiR0aHVtYi5sZW5ndGgpICYmIG9iai5vcHRzLiRvcmlnKSB7XHJcbiAgICAgICAgICBvYmouJHRodW1iID0gb2JqLm9wdHMuJG9yaWcuZmluZChcImltZzpmaXJzdFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvYmouJHRodW1iICYmICFvYmouJHRodW1iLmxlbmd0aCkge1xyXG4gICAgICAgICAgb2JqLiR0aHVtYiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvYmoudGh1bWIgPSBvYmoub3B0cy50aHVtYiB8fCAob2JqLiR0aHVtYiA/IG9iai4kdGh1bWJbMF0uc3JjIDogbnVsbCk7XHJcblxyXG4gICAgICAgIC8vIFwiY2FwdGlvblwiIGlzIGEgXCJzcGVjaWFsXCIgb3B0aW9uLCBpdCBjYW4gYmUgdXNlZCB0byBjdXN0b21pemUgY2FwdGlvbiBwZXIgZ2FsbGVyeSBpdGVtXHJcbiAgICAgICAgaWYgKCQudHlwZShvYmoub3B0cy5jYXB0aW9uKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy5jYXB0aW9uID0gb2JqLm9wdHMuY2FwdGlvbi5hcHBseShpdGVtLCBbc2VsZiwgb2JqXSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJC50eXBlKHNlbGYub3B0cy5jYXB0aW9uKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy5jYXB0aW9uID0gc2VsZi5vcHRzLmNhcHRpb24uYXBwbHkoaXRlbSwgW3NlbGYsIG9ial0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgY2FwdGlvbiBhcyBhIHN0cmluZyBvciBqUXVlcnkgb2JqZWN0XHJcbiAgICAgICAgaWYgKCEob2JqLm9wdHMuY2FwdGlvbiBpbnN0YW5jZW9mICQpKSB7XHJcbiAgICAgICAgICBvYmoub3B0cy5jYXB0aW9uID0gb2JqLm9wdHMuY2FwdGlvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IG9iai5vcHRzLmNhcHRpb24gKyBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdXJsIGNvbnRhaW5zIFwiZmlsdGVyXCIgdXNlZCB0byBmaWx0ZXIgdGhlIGNvbnRlbnRcclxuICAgICAgICAvLyBFeGFtcGxlOiBcImFqYXguaHRtbCAjc29tZXRoaW5nXCJcclxuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFwiYWpheFwiKSB7XHJcbiAgICAgICAgICBzcmNQYXJ0cyA9IHNyYy5zcGxpdCgvXFxzKy8sIDIpO1xyXG5cclxuICAgICAgICAgIGlmIChzcmNQYXJ0cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIG9iai5zcmMgPSBzcmNQYXJ0cy5zaGlmdCgpO1xyXG5cclxuICAgICAgICAgICAgb2JqLm9wdHMuZmlsdGVyID0gc3JjUGFydHMuc2hpZnQoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhpZGUgYWxsIGJ1dHRvbnMgYW5kIGRpc2FibGUgaW50ZXJhY3Rpdml0eSBmb3IgbW9kYWwgaXRlbXNcclxuICAgICAgICBpZiAob2JqLm9wdHMubW9kYWwpIHtcclxuICAgICAgICAgIG9iai5vcHRzID0gJC5leHRlbmQodHJ1ZSwgb2JqLm9wdHMsIHtcclxuICAgICAgICAgICAgdHJhcEZvY3VzOiB0cnVlLFxyXG4gICAgICAgICAgICAvLyBSZW1vdmUgYnV0dG9uc1xyXG4gICAgICAgICAgICBpbmZvYmFyOiAwLFxyXG4gICAgICAgICAgICB0b29sYmFyOiAwLFxyXG5cclxuICAgICAgICAgICAgc21hbGxCdG46IDAsXHJcblxyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGtleWJvYXJkIG5hdmlnYXRpb25cclxuICAgICAgICAgICAga2V5Ym9hcmQ6IDAsXHJcblxyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIHNvbWUgbW9kdWxlc1xyXG4gICAgICAgICAgICBzbGlkZVNob3c6IDAsXHJcbiAgICAgICAgICAgIGZ1bGxTY3JlZW46IDAsXHJcbiAgICAgICAgICAgIHRodW1iczogMCxcclxuICAgICAgICAgICAgdG91Y2g6IDAsXHJcblxyXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGNsaWNrIGV2ZW50IGhhbmRsZXJzXHJcbiAgICAgICAgICAgIGNsaWNrQ29udGVudDogZmFsc2UsXHJcbiAgICAgICAgICAgIGNsaWNrU2xpZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBjbGlja091dHNpZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYmxjbGlja0NvbnRlbnQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBkYmxjbGlja1NsaWRlOiBmYWxzZSxcclxuICAgICAgICAgICAgZGJsY2xpY2tPdXRzaWRlOiBmYWxzZVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTdGVwIDQgLSBBZGQgcHJvY2Vzc2VkIG9iamVjdCB0byBncm91cFxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIHNlbGYuZ3JvdXAucHVzaChvYmopO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBjb250cm9scyBpZiBnYWxsZXJ5IGlzIGFscmVhZHkgb3BlbmVkXHJcbiAgICAgIGlmIChPYmplY3Qua2V5cyhzZWxmLnNsaWRlcykubGVuZ3RoKSB7XHJcbiAgICAgICAgc2VsZi51cGRhdGVDb250cm9scygpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGh1bWJuYWlscywgaWYgbmVlZGVkXHJcbiAgICAgICAgdGh1bWJzID0gc2VsZi5UaHVtYnM7XHJcblxyXG4gICAgICAgIGlmICh0aHVtYnMgJiYgdGh1bWJzLmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICB0aHVtYnMuY3JlYXRlKCk7XHJcblxyXG4gICAgICAgICAgdGh1bWJzLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEF0dGFjaCBhbiBldmVudCBoYW5kbGVyIGZ1bmN0aW9ucyBmb3I6XHJcbiAgICAvLyAgIC0gbmF2aWdhdGlvbiBidXR0b25zXHJcbiAgICAvLyAgIC0gYnJvd3NlciBzY3JvbGxpbmcsIHJlc2l6aW5nO1xyXG4gICAgLy8gICAtIGZvY3VzaW5nXHJcbiAgICAvLyAgIC0ga2V5Ym9hcmRcclxuICAgIC8vICAgLSBkZXRlY3RpbmcgaW5hY3Rpdml0eVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhZGRFdmVudHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBzZWxmLnJlbW92ZUV2ZW50cygpO1xyXG5cclxuICAgICAgLy8gTWFrZSBuYXZpZ2F0aW9uIGVsZW1lbnRzIGNsaWNrYWJsZVxyXG4gICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICBzZWxmLiRyZWZzLmNvbnRhaW5lclxyXG4gICAgICAgIC5vbihcImNsaWNrLmZiLWNsb3NlXCIsIFwiW2RhdGEtZmFuY3lib3gtY2xvc2VdXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgc2VsZi5jbG9zZShlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5vbihcInRvdWNoc3RhcnQuZmItcHJldiBjbGljay5mYi1wcmV2XCIsIFwiW2RhdGEtZmFuY3lib3gtcHJldl1cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICBzZWxmLnByZXZpb3VzKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJ0b3VjaHN0YXJ0LmZiLW5leHQgY2xpY2suZmItbmV4dFwiLCBcIltkYXRhLWZhbmN5Ym94LW5leHRdXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgc2VsZi5uZXh0KCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICAub24oXCJjbGljay5mYlwiLCBcIltkYXRhLWZhbmN5Ym94LXpvb21dXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgIC8vIENsaWNrIGhhbmRsZXIgZm9yIHpvb20gYnV0dG9uXHJcbiAgICAgICAgICBzZWxmW3NlbGYuaXNTY2FsZWREb3duKCkgPyBcInNjYWxlVG9BY3R1YWxcIiA6IFwic2NhbGVUb0ZpdFwiXSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgLy8gSGFuZGxlIHBhZ2Ugc2Nyb2xsaW5nIGFuZCBicm93c2VyIHJlc2l6aW5nXHJcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgJFcub24oXCJvcmllbnRhdGlvbmNoYW5nZS5mYiByZXNpemUuZmJcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmIChlICYmIGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQudHlwZSA9PT0gXCJyZXNpemVcIikge1xyXG4gICAgICAgICAgaWYgKHNlbGYucmVxdWVzdElkKSB7XHJcbiAgICAgICAgICAgIGNhbmNlbEFGcmFtZShzZWxmLnJlcXVlc3RJZCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgc2VsZi5yZXF1ZXN0SWQgPSByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBzZWxmLnVwZGF0ZShlKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoc2VsZi5jdXJyZW50ICYmIHNlbGYuY3VycmVudC50eXBlID09PSBcImlmcmFtZVwiKSB7XHJcbiAgICAgICAgICAgIHNlbGYuJHJlZnMuc3RhZ2UuaGlkZSgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHNlbGYuJHJlZnMuc3RhZ2Uuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi51cGRhdGUoZSk7XHJcbiAgICAgICAgICB9LCAkLmZhbmN5Ym94LmlzTW9iaWxlID8gNjAwIDogMjUwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJEQub24oXCJrZXlkb3duLmZiXCIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB2YXIgaW5zdGFuY2UgPSAkLmZhbmN5Ym94ID8gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpIDogbnVsbCxcclxuICAgICAgICAgIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50LFxyXG4gICAgICAgICAga2V5Y29kZSA9IGUua2V5Q29kZSB8fCBlLndoaWNoO1xyXG5cclxuICAgICAgICAvLyBUcmFwIGtleWJvYXJkIGZvY3VzIGluc2lkZSBvZiB0aGUgbW9kYWxcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAgICAgaWYgKGtleWNvZGUgPT0gOSkge1xyXG4gICAgICAgICAgaWYgKGN1cnJlbnQub3B0cy50cmFwRm9jdXMpIHtcclxuICAgICAgICAgICAgc2VsZi5mb2N1cyhlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFbmFibGUga2V5Ym9hcmQgbmF2aWdhdGlvblxyXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgIGlmICghY3VycmVudC5vcHRzLmtleWJvYXJkIHx8IGUuY3RybEtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5IHx8ICQoZS50YXJnZXQpLmlzKFwiaW5wdXRcIikgfHwgJChlLnRhcmdldCkuaXMoXCJ0ZXh0YXJlYVwiKSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQmFja3NwYWNlIGFuZCBFc2Mga2V5c1xyXG4gICAgICAgIGlmIChrZXljb2RlID09PSA4IHx8IGtleWNvZGUgPT09IDI3KSB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgc2VsZi5jbG9zZShlKTtcclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMZWZ0IGFycm93IGFuZCBVcCBhcnJvd1xyXG4gICAgICAgIGlmIChrZXljb2RlID09PSAzNyB8fCBrZXljb2RlID09PSAzOCkge1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIHNlbGYucHJldmlvdXMoKTtcclxuXHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSaWdoIGFycm93IGFuZCBEb3duIGFycm93XHJcbiAgICAgICAgaWYgKGtleWNvZGUgPT09IDM5IHx8IGtleWNvZGUgPT09IDQwKSB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgc2VsZi5uZXh0KCk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi50cmlnZ2VyKFwiYWZ0ZXJLZXlkb3duXCIsIGUsIGtleWNvZGUpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIEhpZGUgY29udHJvbHMgYWZ0ZXIgc29tZSBpbmFjdGl2aXR5IHBlcmlvZFxyXG4gICAgICBpZiAoc2VsZi5ncm91cFtzZWxmLmN1cnJJbmRleF0ub3B0cy5pZGxlVGltZSkge1xyXG4gICAgICAgIHNlbGYuaWRsZVNlY29uZHNDb3VudGVyID0gMDtcclxuXHJcbiAgICAgICAgJEQub24oXHJcbiAgICAgICAgICBcIm1vdXNlbW92ZS5mYi1pZGxlIG1vdXNlbGVhdmUuZmItaWRsZSBtb3VzZWRvd24uZmItaWRsZSB0b3VjaHN0YXJ0LmZiLWlkbGUgdG91Y2htb3ZlLmZiLWlkbGUgc2Nyb2xsLmZiLWlkbGUga2V5ZG93bi5mYi1pZGxlXCIsXHJcbiAgICAgICAgICBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHNlbGYuaWRsZVNlY29uZHNDb3VudGVyID0gMDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxmLmlzSWRsZSkge1xyXG4gICAgICAgICAgICAgIHNlbGYuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGYuaXNJZGxlID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc2VsZi5pZGxlSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlcisrO1xyXG5cclxuICAgICAgICAgIGlmIChzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA+PSBzZWxmLmdyb3VwW3NlbGYuY3VyckluZGV4XS5vcHRzLmlkbGVUaW1lICYmICFzZWxmLmlzRHJhZ2dpbmcpIHtcclxuICAgICAgICAgICAgc2VsZi5pc0lkbGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAgICAgICBzZWxmLmhpZGVDb250cm9scygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFJlbW92ZSBldmVudHMgYWRkZWQgYnkgdGhlIGNvcmVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICByZW1vdmVFdmVudHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAkVy5vZmYoXCJvcmllbnRhdGlvbmNoYW5nZS5mYiByZXNpemUuZmJcIik7XHJcbiAgICAgICRELm9mZihcImtleWRvd24uZmIgLmZiLWlkbGVcIik7XHJcblxyXG4gICAgICB0aGlzLiRyZWZzLmNvbnRhaW5lci5vZmYoXCIuZmItY2xvc2UgLmZiLXByZXYgLmZiLW5leHRcIik7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pZGxlSW50ZXJ2YWwpIHtcclxuICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChzZWxmLmlkbGVJbnRlcnZhbCk7XHJcblxyXG4gICAgICAgIHNlbGYuaWRsZUludGVydmFsID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGFuZ2UgdG8gcHJldmlvdXMgZ2FsbGVyeSBpdGVtXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgcHJldmlvdXM6IGZ1bmN0aW9uKGR1cmF0aW9uKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmp1bXBUbyh0aGlzLmN1cnJQb3MgLSAxLCBkdXJhdGlvbik7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoYW5nZSB0byBuZXh0IGdhbGxlcnkgaXRlbVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgbmV4dDogZnVuY3Rpb24oZHVyYXRpb24pIHtcclxuICAgICAgcmV0dXJuIHRoaXMuanVtcFRvKHRoaXMuY3VyclBvcyArIDEsIGR1cmF0aW9uKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gU3dpdGNoIHRvIHNlbGVjdGVkIGdhbGxlcnkgaXRlbVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGp1bXBUbzogZnVuY3Rpb24ocG9zLCBkdXJhdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgZ3JvdXBMZW4gPSBzZWxmLmdyb3VwLmxlbmd0aCxcclxuICAgICAgICBmaXJzdFJ1bixcclxuICAgICAgICBpc01vdmVkLFxyXG4gICAgICAgIGxvb3AsXHJcbiAgICAgICAgY3VycmVudCxcclxuICAgICAgICBwcmV2aW91cyxcclxuICAgICAgICBzbGlkZVBvcyxcclxuICAgICAgICBzdGFnZVBvcyxcclxuICAgICAgICBwcm9wLFxyXG4gICAgICAgIGRpZmY7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0RyYWdnaW5nIHx8IHNlbGYuaXNDbG9zaW5nIHx8IChzZWxmLmlzQW5pbWF0aW5nICYmIHNlbGYuZmlyc3RSdW4pKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTaG91bGQgbG9vcD9cclxuICAgICAgcG9zID0gcGFyc2VJbnQocG9zLCAxMCk7XHJcbiAgICAgIGxvb3AgPSBzZWxmLmN1cnJlbnQgPyBzZWxmLmN1cnJlbnQub3B0cy5sb29wIDogc2VsZi5vcHRzLmxvb3A7XHJcblxyXG4gICAgICBpZiAoIWxvb3AgJiYgKHBvcyA8IDAgfHwgcG9zID49IGdyb3VwTGVuKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgb3BlbmluZyBmb3IgdGhlIGZpcnN0IHRpbWU7IHRoaXMgaGVscHMgdG8gc3BlZWQgdGhpbmdzIHVwXHJcbiAgICAgIGZpcnN0UnVuID0gc2VsZi5maXJzdFJ1biA9ICFPYmplY3Qua2V5cyhzZWxmLnNsaWRlcykubGVuZ3RoO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIHNsaWRlc1xyXG4gICAgICBwcmV2aW91cyA9IHNlbGYuY3VycmVudDtcclxuXHJcbiAgICAgIHNlbGYucHJldkluZGV4ID0gc2VsZi5jdXJySW5kZXg7XHJcbiAgICAgIHNlbGYucHJldlBvcyA9IHNlbGYuY3VyclBvcztcclxuXHJcbiAgICAgIGN1cnJlbnQgPSBzZWxmLmNyZWF0ZVNsaWRlKHBvcyk7XHJcblxyXG4gICAgICBpZiAoZ3JvdXBMZW4gPiAxKSB7XHJcbiAgICAgICAgaWYgKGxvb3AgfHwgY3VycmVudC5pbmRleCA8IGdyb3VwTGVuIC0gMSkge1xyXG4gICAgICAgICAgc2VsZi5jcmVhdGVTbGlkZShwb3MgKyAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChsb29wIHx8IGN1cnJlbnQuaW5kZXggPiAwKSB7XHJcbiAgICAgICAgICBzZWxmLmNyZWF0ZVNsaWRlKHBvcyAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5jdXJyZW50ID0gY3VycmVudDtcclxuICAgICAgc2VsZi5jdXJySW5kZXggPSBjdXJyZW50LmluZGV4O1xyXG4gICAgICBzZWxmLmN1cnJQb3MgPSBjdXJyZW50LnBvcztcclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcImJlZm9yZVNob3dcIiwgZmlyc3RSdW4pO1xyXG5cclxuICAgICAgc2VsZi51cGRhdGVDb250cm9scygpO1xyXG5cclxuICAgICAgLy8gVmFsaWRhdGUgZHVyYXRpb24gbGVuZ3RoXHJcbiAgICAgIGN1cnJlbnQuZm9yY2VkRHVyYXRpb24gPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICBpZiAoJC5pc051bWVyaWMoZHVyYXRpb24pKSB7XHJcbiAgICAgICAgY3VycmVudC5mb3JjZWREdXJhdGlvbiA9IGR1cmF0aW9uO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGR1cmF0aW9uID0gY3VycmVudC5vcHRzW2ZpcnN0UnVuID8gXCJhbmltYXRpb25EdXJhdGlvblwiIDogXCJ0cmFuc2l0aW9uRHVyYXRpb25cIl07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGR1cmF0aW9uID0gcGFyc2VJbnQoZHVyYXRpb24sIDEwKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHVzZXIgaGFzIHN3aXBlZCB0aGUgc2xpZGVzIG9yIGlmIHN0aWxsIGFuaW1hdGluZ1xyXG4gICAgICBpc01vdmVkID0gc2VsZi5pc01vdmVkKGN1cnJlbnQpO1xyXG5cclxuICAgICAgLy8gTWFrZSBzdXJlIGN1cnJlbnQgc2xpZGUgaXMgdmlzaWJsZVxyXG4gICAgICBjdXJyZW50LiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIpO1xyXG5cclxuICAgICAgLy8gRnJlc2ggc3RhcnQgLSByZXZlYWwgY29udGFpbmVyLCBjdXJyZW50IHNsaWRlIGFuZCBzdGFydCBsb2FkaW5nIGNvbnRlbnRcclxuICAgICAgaWYgKGZpcnN0UnVuKSB7XHJcbiAgICAgICAgaWYgKGN1cnJlbnQub3B0cy5hbmltYXRpb25FZmZlY3QgJiYgZHVyYXRpb24pIHtcclxuICAgICAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgZHVyYXRpb24gKyBcIm1zXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1vcGVuXCIpLnRyaWdnZXIoXCJmb2N1c1wiKTtcclxuXHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBsb2FkIGNvbnRlbnQgaW50byBzbGlkZVxyXG4gICAgICAgIC8vIFRoaXMgd2lsbCBsYXRlciBjYWxsIGBhZnRlckxvYWRgIC0+IGByZXZlYWxDb250ZW50YFxyXG4gICAgICAgIHNlbGYubG9hZFNsaWRlKGN1cnJlbnQpO1xyXG5cclxuICAgICAgICBzZWxmLnByZWxvYWQoXCJpbWFnZVwiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZXQgYWN0dWFsIHNsaWRlL3N0YWdlIHBvc2l0aW9ucyAoYmVmb3JlIGNsZWFuaW5nIHVwKVxyXG4gICAgICBzbGlkZVBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKHByZXZpb3VzLiRzbGlkZSk7XHJcbiAgICAgIHN0YWdlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoc2VsZi4kcmVmcy5zdGFnZSk7XHJcblxyXG4gICAgICAvLyBDbGVhbiB1cCBhbGwgc2xpZGVzXHJcbiAgICAgICQuZWFjaChzZWxmLnNsaWRlcywgZnVuY3Rpb24oaW5kZXgsIHNsaWRlKSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRzbGlkZSwgdHJ1ZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHByZXZpb3VzLnBvcyAhPT0gY3VycmVudC5wb3MpIHtcclxuICAgICAgICBwcmV2aW91cy5pc0NvbXBsZXRlID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHByZXZpb3VzLiRzbGlkZS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jb21wbGV0ZSBmYW5jeWJveC1zbGlkZS0tY3VycmVudFwiKTtcclxuXHJcbiAgICAgIC8vIElmIHNsaWRlcyBhcmUgb3V0IG9mIHBsYWNlLCB0aGVuIGFuaW1hdGUgdGhlbSB0byBjb3JyZWN0IHBvc2l0aW9uXHJcbiAgICAgIGlmIChpc01vdmVkKSB7XHJcbiAgICAgICAgLy8gQ2FsY3VsYXRlIGhvcml6b250YWwgc3dpcGUgZGlzdGFuY2VcclxuICAgICAgICBkaWZmID0gc2xpZGVQb3MubGVmdCAtIChwcmV2aW91cy5wb3MgKiBzbGlkZVBvcy53aWR0aCArIHByZXZpb3VzLnBvcyAqIHByZXZpb3VzLm9wdHMuZ3V0dGVyKTtcclxuXHJcbiAgICAgICAgJC5lYWNoKHNlbGYuc2xpZGVzLCBmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcclxuICAgICAgICAgIHNsaWRlLiRzbGlkZS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFuaW1hdGVkXCIpLnJlbW92ZUNsYXNzKGZ1bmN0aW9uKGluZGV4LCBjbGFzc05hbWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChjbGFzc05hbWUubWF0Y2goLyhefFxccylmYW5jeWJveC1meC1cXFMrL2cpIHx8IFtdKS5qb2luKFwiIFwiKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IGVhY2ggc2xpZGUgaXMgaW4gZXF1YWwgZGlzdGFuY2VcclxuICAgICAgICAgIC8vIFRoaXMgaXMgbW9zdGx5IG5lZWRlZCBmb3IgZnJlc2hseSBhZGRlZCBzbGlkZXMsIGJlY2F1c2UgdGhleSBhcmUgbm90IHlldCBwb3NpdGlvbmVkXHJcbiAgICAgICAgICB2YXIgbGVmdFBvcyA9IHNsaWRlLnBvcyAqIHNsaWRlUG9zLndpZHRoICsgc2xpZGUucG9zICogc2xpZGUub3B0cy5ndXR0ZXI7XHJcblxyXG4gICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2xpZGUuJHNsaWRlLCB7dG9wOiAwLCBsZWZ0OiBsZWZ0UG9zIC0gc3RhZ2VQb3MubGVmdCArIGRpZmZ9KTtcclxuXHJcbiAgICAgICAgICBpZiAoc2xpZGUucG9zICE9PSBjdXJyZW50LnBvcykge1xyXG4gICAgICAgICAgICBzbGlkZS4kc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIgKyAoc2xpZGUucG9zID4gY3VycmVudC5wb3MgPyBcIm5leHRcIiA6IFwicHJldmlvdXNcIikpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJlZHJhdyB0byBtYWtlIHN1cmUgdGhhdCB0cmFuc2l0aW9uIHdpbGwgc3RhcnRcclxuICAgICAgICAgIGZvcmNlUmVkcmF3KHNsaWRlLiRzbGlkZSk7XHJcblxyXG4gICAgICAgICAgLy8gQW5pbWF0ZSB0aGUgc2xpZGVcclxuICAgICAgICAgICQuZmFuY3lib3guYW5pbWF0ZShcclxuICAgICAgICAgICAgc2xpZGUuJHNsaWRlLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgICAgICAgIGxlZnQ6IChzbGlkZS5wb3MgLSBjdXJyZW50LnBvcykgKiBzbGlkZVBvcy53aWR0aCArIChzbGlkZS5wb3MgLSBjdXJyZW50LnBvcykgKiBzbGlkZS5vcHRzLmd1dHRlclxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkdXJhdGlvbixcclxuICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgICAgICAgICAuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICBvcGFjaXR5OiBcIlwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpO1xyXG5cclxuICAgICAgICAgICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gJiYgY3VycmVudC5vcHRzLnRyYW5zaXRpb25FZmZlY3QpIHtcclxuICAgICAgICAvLyBTZXQgdHJhbnNpdGlvbiBlZmZlY3QgZm9yIHByZXZpb3VzbHkgYWN0aXZlIHNsaWRlXHJcbiAgICAgICAgcHJvcCA9IFwiZmFuY3lib3gtYW5pbWF0ZWQgZmFuY3lib3gtZngtXCIgKyBjdXJyZW50Lm9wdHMudHJhbnNpdGlvbkVmZmVjdDtcclxuXHJcbiAgICAgICAgcHJldmlvdXMuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiICsgKHByZXZpb3VzLnBvcyA+IGN1cnJlbnQucG9zID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCIpKTtcclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICAgcHJldmlvdXMuJHNsaWRlLFxyXG4gICAgICAgICAgcHJvcCxcclxuICAgICAgICAgIGR1cmF0aW9uLFxyXG4gICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHByZXZpb3VzLiRzbGlkZS5yZW1vdmVDbGFzcyhwcm9wKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1uZXh0IGZhbmN5Ym94LXNsaWRlLS1wcmV2aW91c1wiKTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChjdXJyZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgICAgc2VsZi5yZXZlYWxDb250ZW50KGN1cnJlbnQpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYubG9hZFNsaWRlKGN1cnJlbnQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnByZWxvYWQoXCJpbWFnZVwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ3JlYXRlIG5ldyBcInNsaWRlXCIgZWxlbWVudFxyXG4gICAgLy8gVGhlc2UgYXJlIGdhbGxlcnkgaXRlbXMgIHRoYXQgYXJlIGFjdHVhbGx5IGFkZGVkIHRvIERPTVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNyZWF0ZVNsaWRlOiBmdW5jdGlvbihwb3MpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICRzbGlkZSxcclxuICAgICAgICBpbmRleDtcclxuXHJcbiAgICAgIGluZGV4ID0gcG9zICUgc2VsZi5ncm91cC5sZW5ndGg7XHJcbiAgICAgIGluZGV4ID0gaW5kZXggPCAwID8gc2VsZi5ncm91cC5sZW5ndGggKyBpbmRleCA6IGluZGV4O1xyXG5cclxuICAgICAgaWYgKCFzZWxmLnNsaWRlc1twb3NdICYmIHNlbGYuZ3JvdXBbaW5kZXhdKSB7XHJcbiAgICAgICAgJHNsaWRlID0gJCgnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNsaWRlXCI+PC9kaXY+JykuYXBwZW5kVG8oc2VsZi4kcmVmcy5zdGFnZSk7XHJcblxyXG4gICAgICAgIHNlbGYuc2xpZGVzW3Bvc10gPSAkLmV4dGVuZCh0cnVlLCB7fSwgc2VsZi5ncm91cFtpbmRleF0sIHtcclxuICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgJHNsaWRlOiAkc2xpZGUsXHJcbiAgICAgICAgICBpc0xvYWRlZDogZmFsc2VcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc2VsZi51cGRhdGVTbGlkZShzZWxmLnNsaWRlc1twb3NdKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHNlbGYuc2xpZGVzW3Bvc107XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNjYWxlIGltYWdlIHRvIHRoZSBhY3R1YWwgc2l6ZSBvZiB0aGUgaW1hZ2U7XHJcbiAgICAvLyB4IGFuZCB5IHZhbHVlcyBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIHNsaWRlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2NhbGVUb0FjdHVhbDogZnVuY3Rpb24oeCwgeSwgZHVyYXRpb24pIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgJGNvbnRlbnQgPSBjdXJyZW50LiRjb250ZW50LFxyXG4gICAgICAgIGNhbnZhc1dpZHRoID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoY3VycmVudC4kc2xpZGUpLndpZHRoLFxyXG4gICAgICAgIGNhbnZhc0hlaWdodCA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKGN1cnJlbnQuJHNsaWRlKS5oZWlnaHQsXHJcbiAgICAgICAgbmV3SW1nV2lkdGggPSBjdXJyZW50LndpZHRoLFxyXG4gICAgICAgIG5ld0ltZ0hlaWdodCA9IGN1cnJlbnQuaGVpZ2h0LFxyXG4gICAgICAgIGltZ1BvcyxcclxuICAgICAgICBwb3NYLFxyXG4gICAgICAgIHBvc1ksXHJcbiAgICAgICAgc2NhbGVYLFxyXG4gICAgICAgIHNjYWxlWTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzQW5pbWF0aW5nIHx8IHNlbGYuaXNNb3ZlZCgpIHx8ICEkY29udGVudCB8fCAhKGN1cnJlbnQudHlwZSA9PSBcImltYWdlXCIgJiYgY3VycmVudC5pc0xvYWRlZCAmJiAhY3VycmVudC5oYXNFcnJvcikpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5zdG9wKCRjb250ZW50KTtcclxuXHJcbiAgICAgIHggPSB4ID09PSB1bmRlZmluZWQgPyBjYW52YXNXaWR0aCAqIDAuNSA6IHg7XHJcbiAgICAgIHkgPSB5ID09PSB1bmRlZmluZWQgPyBjYW52YXNIZWlnaHQgKiAwLjUgOiB5O1xyXG5cclxuICAgICAgaW1nUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgaW1nUG9zLnRvcCAtPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShjdXJyZW50LiRzbGlkZSkudG9wO1xyXG4gICAgICBpbWdQb3MubGVmdCAtPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShjdXJyZW50LiRzbGlkZSkubGVmdDtcclxuXHJcbiAgICAgIHNjYWxlWCA9IG5ld0ltZ1dpZHRoIC8gaW1nUG9zLndpZHRoO1xyXG4gICAgICBzY2FsZVkgPSBuZXdJbWdIZWlnaHQgLyBpbWdQb3MuaGVpZ2h0O1xyXG5cclxuICAgICAgLy8gR2V0IGNlbnRlciBwb3NpdGlvbiBmb3Igb3JpZ2luYWwgaW1hZ2VcclxuICAgICAgcG9zWCA9IGNhbnZhc1dpZHRoICogMC41IC0gbmV3SW1nV2lkdGggKiAwLjU7XHJcbiAgICAgIHBvc1kgPSBjYW52YXNIZWlnaHQgKiAwLjUgLSBuZXdJbWdIZWlnaHQgKiAwLjU7XHJcblxyXG4gICAgICAvLyBNYWtlIHN1cmUgaW1hZ2UgZG9lcyBub3QgbW92ZSBhd2F5IGZyb20gZWRnZXNcclxuICAgICAgaWYgKG5ld0ltZ1dpZHRoID4gY2FudmFzV2lkdGgpIHtcclxuICAgICAgICBwb3NYID0gaW1nUG9zLmxlZnQgKiBzY2FsZVggLSAoeCAqIHNjYWxlWCAtIHgpO1xyXG5cclxuICAgICAgICBpZiAocG9zWCA+IDApIHtcclxuICAgICAgICAgIHBvc1ggPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBvc1ggPCBjYW52YXNXaWR0aCAtIG5ld0ltZ1dpZHRoKSB7XHJcbiAgICAgICAgICBwb3NYID0gY2FudmFzV2lkdGggLSBuZXdJbWdXaWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChuZXdJbWdIZWlnaHQgPiBjYW52YXNIZWlnaHQpIHtcclxuICAgICAgICBwb3NZID0gaW1nUG9zLnRvcCAqIHNjYWxlWSAtICh5ICogc2NhbGVZIC0geSk7XHJcblxyXG4gICAgICAgIGlmIChwb3NZID4gMCkge1xyXG4gICAgICAgICAgcG9zWSA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocG9zWSA8IGNhbnZhc0hlaWdodCAtIG5ld0ltZ0hlaWdodCkge1xyXG4gICAgICAgICAgcG9zWSA9IGNhbnZhc0hlaWdodCAtIG5ld0ltZ0hlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKG5ld0ltZ1dpZHRoLCBuZXdJbWdIZWlnaHQpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICRjb250ZW50LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHRvcDogcG9zWSxcclxuICAgICAgICAgIGxlZnQ6IHBvc1gsXHJcbiAgICAgICAgICBzY2FsZVg6IHNjYWxlWCxcclxuICAgICAgICAgIHNjYWxlWTogc2NhbGVZXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkdXJhdGlvbiB8fCAzMzAsXHJcbiAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gU3RvcCBzbGlkZXNob3dcclxuICAgICAgaWYgKHNlbGYuU2xpZGVTaG93ICYmIHNlbGYuU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgICAgc2VsZi5TbGlkZVNob3cuc3RvcCgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFNjYWxlIGltYWdlIHRvIGZpdCBpbnNpZGUgcGFyZW50IGVsZW1lbnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzY2FsZVRvRml0OiBmdW5jdGlvbihkdXJhdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAkY29udGVudCA9IGN1cnJlbnQuJGNvbnRlbnQsXHJcbiAgICAgICAgZW5kO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNBbmltYXRpbmcgfHwgc2VsZi5pc01vdmVkKCkgfHwgISRjb250ZW50IHx8ICEoY3VycmVudC50eXBlID09IFwiaW1hZ2VcIiAmJiBjdXJyZW50LmlzTG9hZGVkICYmICFjdXJyZW50Lmhhc0Vycm9yKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IHRydWU7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LnN0b3AoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgZW5kID0gc2VsZi5nZXRGaXRQb3MoY3VycmVudCk7XHJcblxyXG4gICAgICBzZWxmLnVwZGF0ZUN1cnNvcihlbmQud2lkdGgsIGVuZC5oZWlnaHQpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICRjb250ZW50LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHRvcDogZW5kLnRvcCxcclxuICAgICAgICAgIGxlZnQ6IGVuZC5sZWZ0LFxyXG4gICAgICAgICAgc2NhbGVYOiBlbmQud2lkdGggLyAkY29udGVudC53aWR0aCgpLFxyXG4gICAgICAgICAgc2NhbGVZOiBlbmQuaGVpZ2h0IC8gJGNvbnRlbnQuaGVpZ2h0KClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGR1cmF0aW9uIHx8IDMzMCxcclxuICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBpbWFnZSBzaXplIHRvIGZpdCBpbnNpZGUgdmlld3BvcnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBnZXRGaXRQb3M6IGZ1bmN0aW9uKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICAkY29udGVudCA9IHNsaWRlLiRjb250ZW50LFxyXG4gICAgICAgICRzbGlkZSA9IHNsaWRlLiRzbGlkZSxcclxuICAgICAgICB3aWR0aCA9IHNsaWRlLndpZHRoIHx8IHNsaWRlLm9wdHMud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0ID0gc2xpZGUuaGVpZ2h0IHx8IHNsaWRlLm9wdHMuaGVpZ2h0LFxyXG4gICAgICAgIG1heFdpZHRoLFxyXG4gICAgICAgIG1heEhlaWdodCxcclxuICAgICAgICBtaW5SYXRpbyxcclxuICAgICAgICBhc3BlY3RSYXRpbyxcclxuICAgICAgICByZXogPSB7fTtcclxuXHJcbiAgICAgIGlmICghc2xpZGUuaXNMb2FkZWQgfHwgISRjb250ZW50IHx8ICEkY29udGVudC5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIG1heFdpZHRoID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoc2VsZi4kcmVmcy5zdGFnZSkud2lkdGg7XHJcbiAgICAgIG1heEhlaWdodCA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKHNlbGYuJHJlZnMuc3RhZ2UpLmhlaWdodDtcclxuXHJcbiAgICAgIG1heFdpZHRoIC09XHJcbiAgICAgICAgcGFyc2VGbG9hdCgkc2xpZGUuY3NzKFwicGFkZGluZ0xlZnRcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRzbGlkZS5jc3MoXCJwYWRkaW5nUmlnaHRcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRjb250ZW50LmNzcyhcIm1hcmdpbkxlZnRcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRjb250ZW50LmNzcyhcIm1hcmdpblJpZ2h0XCIpKTtcclxuXHJcbiAgICAgIG1heEhlaWdodCAtPVxyXG4gICAgICAgIHBhcnNlRmxvYXQoJHNsaWRlLmNzcyhcInBhZGRpbmdUb3BcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRzbGlkZS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpKSArXHJcbiAgICAgICAgcGFyc2VGbG9hdCgkY29udGVudC5jc3MoXCJtYXJnaW5Ub3BcIikpICtcclxuICAgICAgICBwYXJzZUZsb2F0KCRjb250ZW50LmNzcyhcIm1hcmdpbkJvdHRvbVwiKSk7XHJcblxyXG4gICAgICBpZiAoIXdpZHRoIHx8ICFoZWlnaHQpIHtcclxuICAgICAgICB3aWR0aCA9IG1heFdpZHRoO1xyXG4gICAgICAgIGhlaWdodCA9IG1heEhlaWdodDtcclxuICAgICAgfVxyXG5cclxuICAgICAgbWluUmF0aW8gPSBNYXRoLm1pbigxLCBtYXhXaWR0aCAvIHdpZHRoLCBtYXhIZWlnaHQgLyBoZWlnaHQpO1xyXG5cclxuICAgICAgd2lkdGggPSBtaW5SYXRpbyAqIHdpZHRoO1xyXG4gICAgICBoZWlnaHQgPSBtaW5SYXRpbyAqIGhlaWdodDtcclxuXHJcbiAgICAgIC8vIEFkanVzdCB3aWR0aC9oZWlnaHQgdG8gcHJlY2lzZWx5IGZpdCBpbnRvIGNvbnRhaW5lclxyXG4gICAgICBpZiAod2lkdGggPiBtYXhXaWR0aCAtIDAuNSkge1xyXG4gICAgICAgIHdpZHRoID0gbWF4V2lkdGg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChoZWlnaHQgPiBtYXhIZWlnaHQgLSAwLjUpIHtcclxuICAgICAgICBoZWlnaHQgPSBtYXhIZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzbGlkZS50eXBlID09PSBcImltYWdlXCIpIHtcclxuICAgICAgICByZXoudG9wID0gTWF0aC5mbG9vcigobWF4SGVpZ2h0IC0gaGVpZ2h0KSAqIDAuNSkgKyBwYXJzZUZsb2F0KCRzbGlkZS5jc3MoXCJwYWRkaW5nVG9wXCIpKTtcclxuICAgICAgICByZXoubGVmdCA9IE1hdGguZmxvb3IoKG1heFdpZHRoIC0gd2lkdGgpICogMC41KSArIHBhcnNlRmxvYXQoJHNsaWRlLmNzcyhcInBhZGRpbmdMZWZ0XCIpKTtcclxuICAgICAgfSBlbHNlIGlmIChzbGlkZS5jb250ZW50VHlwZSA9PT0gXCJ2aWRlb1wiKSB7XHJcbiAgICAgICAgLy8gRm9yY2UgYXNwZWN0IHJhdGlvIGZvciB0aGUgdmlkZW9cclxuICAgICAgICAvLyBcIkkgc2F5IHRoZSB3aG9sZSB3b3JsZCBtdXN0IGxlYXJuIG9mIG91ciBwZWFjZWZ1bCB3YXlz4oCmIGJ5IGZvcmNlIVwiXHJcbiAgICAgICAgYXNwZWN0UmF0aW8gPSBzbGlkZS5vcHRzLndpZHRoICYmIHNsaWRlLm9wdHMuaGVpZ2h0ID8gd2lkdGggLyBoZWlnaHQgOiBzbGlkZS5vcHRzLnJhdGlvIHx8IDE2IC8gOTtcclxuXHJcbiAgICAgICAgaWYgKGhlaWdodCA+IHdpZHRoIC8gYXNwZWN0UmF0aW8pIHtcclxuICAgICAgICAgIGhlaWdodCA9IHdpZHRoIC8gYXNwZWN0UmF0aW87XHJcbiAgICAgICAgfSBlbHNlIGlmICh3aWR0aCA+IGhlaWdodCAqIGFzcGVjdFJhdGlvKSB7XHJcbiAgICAgICAgICB3aWR0aCA9IGhlaWdodCAqIGFzcGVjdFJhdGlvO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV6LndpZHRoID0gd2lkdGg7XHJcbiAgICAgIHJlei5oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG4gICAgICByZXR1cm4gcmV6O1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVcGRhdGUgY29udGVudCBzaXplIGFuZCBwb3NpdGlvbiBmb3IgYWxsIHNsaWRlc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHVwZGF0ZTogZnVuY3Rpb24oZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAkLmVhY2goc2VsZi5zbGlkZXMsIGZ1bmN0aW9uKGtleSwgc2xpZGUpIHtcclxuICAgICAgICBzZWxmLnVwZGF0ZVNsaWRlKHNsaWRlLCBlKTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFVwZGF0ZSBzbGlkZSBjb250ZW50IHBvc2l0aW9uIGFuZCBzaXplXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHVwZGF0ZVNsaWRlOiBmdW5jdGlvbihzbGlkZSwgZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgJGNvbnRlbnQgPSBzbGlkZSAmJiBzbGlkZS4kY29udGVudCxcclxuICAgICAgICB3aWR0aCA9IHNsaWRlLndpZHRoIHx8IHNsaWRlLm9wdHMud2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0ID0gc2xpZGUuaGVpZ2h0IHx8IHNsaWRlLm9wdHMuaGVpZ2h0LFxyXG4gICAgICAgICRzbGlkZSA9IHNsaWRlLiRzbGlkZTtcclxuXHJcbiAgICAgIC8vIEZpcnN0LCBwcmV2ZW50IGNhcHRpb24gb3ZlcmxhcCwgaWYgbmVlZGVkXHJcbiAgICAgIHNlbGYuYWRqdXN0Q2FwdGlvbihzbGlkZSk7XHJcblxyXG4gICAgICAvLyBUaGVuIHJlc2l6ZSBjb250ZW50IHRvIGZpdCBpbnNpZGUgdGhlIHNsaWRlXHJcbiAgICAgIGlmICgkY29udGVudCAmJiAod2lkdGggfHwgaGVpZ2h0IHx8IHNsaWRlLmNvbnRlbnRUeXBlID09PSBcInZpZGVvXCIpICYmICFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgICQuZmFuY3lib3guc3RvcCgkY29udGVudCk7XHJcblxyXG4gICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKCRjb250ZW50LCBzZWxmLmdldEZpdFBvcyhzbGlkZSkpO1xyXG5cclxuICAgICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICAgIHNlbGYuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVGhlbiBzb21lIGFkanVzdG1lbnRzXHJcbiAgICAgIHNlbGYuYWRqdXN0TGF5b3V0KHNsaWRlKTtcclxuXHJcbiAgICAgIGlmICgkc2xpZGUubGVuZ3RoKSB7XHJcbiAgICAgICAgJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpO1xyXG5cclxuICAgICAgICBpZiAoc2xpZGUucG9zID09PSBzZWxmLmN1cnJQb3MpIHtcclxuICAgICAgICAgIHNlbGYuJHJlZnMudG9vbGJhclxyXG4gICAgICAgICAgICAuYWRkKHNlbGYuJHJlZnMubmF2aWdhdGlvbi5maW5kKFwiLmZhbmN5Ym94LWJ1dHRvbi0tYXJyb3dfcmlnaHRcIikpXHJcbiAgICAgICAgICAgIC50b2dnbGVDbGFzcyhcImNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiLCAkc2xpZGUuZ2V0KDApLnNjcm9sbEhlaWdodCA+ICRzbGlkZS5nZXQoMCkuY2xpZW50SGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcIm9uVXBkYXRlXCIsIHNsaWRlLCBlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gSG9yaXpvbnRhbGx5IGNlbnRlciBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNlbnRlclNsaWRlOiBmdW5jdGlvbihkdXJhdGlvbikge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAkc2xpZGUgPSBjdXJyZW50LiRzbGlkZTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmlzQ2xvc2luZyB8fCAhY3VycmVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgJHNsaWRlLnNpYmxpbmdzKCkuY3NzKHtcclxuICAgICAgICB0cmFuc2Zvcm06IFwiXCIsXHJcbiAgICAgICAgb3BhY2l0eTogXCJcIlxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgICRzbGlkZVxyXG4gICAgICAgIC5wYXJlbnQoKVxyXG4gICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzIGZhbmN5Ym94LXNsaWRlLS1uZXh0XCIpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICRzbGlkZSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZHVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDAgOiBkdXJhdGlvbixcclxuICAgICAgICBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIC8vIENsZWFuIHVwXHJcbiAgICAgICAgICAkc2xpZGUuY3NzKHtcclxuICAgICAgICAgICAgdHJhbnNmb3JtOiBcIlwiLFxyXG4gICAgICAgICAgICBvcGFjaXR5OiBcIlwiXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICBpZiAoIWN1cnJlbnQuaXNDb21wbGV0ZSkge1xyXG4gICAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGVjayBpZiBjdXJyZW50IHNsaWRlIGlzIG1vdmVkIChzd2lwZWQpXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaXNNb3ZlZDogZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgICAgdmFyIGN1cnJlbnQgPSBzbGlkZSB8fCB0aGlzLmN1cnJlbnQsXHJcbiAgICAgICAgc2xpZGVQb3MsXHJcbiAgICAgICAgc3RhZ2VQb3M7XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN0YWdlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUodGhpcy4kcmVmcy5zdGFnZSk7XHJcbiAgICAgIHNsaWRlUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoY3VycmVudC4kc2xpZGUpO1xyXG5cclxuICAgICAgcmV0dXJuIChcclxuICAgICAgICAhY3VycmVudC4kc2xpZGUuaGFzQ2xhc3MoXCJmYW5jeWJveC1hbmltYXRlZFwiKSAmJlxyXG4gICAgICAgIChNYXRoLmFicyhzbGlkZVBvcy50b3AgLSBzdGFnZVBvcy50b3ApID4gMC41IHx8IE1hdGguYWJzKHNsaWRlUG9zLmxlZnQgLSBzdGFnZVBvcy5sZWZ0KSA+IDAuNSlcclxuICAgICAgKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVXBkYXRlIGN1cnNvciBzdHlsZSBkZXBlbmRpbmcgaWYgY29udGVudCBjYW4gYmUgem9vbWVkXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB1cGRhdGVDdXJzb3I6IGZ1bmN0aW9uKG5leHRXaWR0aCwgbmV4dEhlaWdodCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICAkY29udGFpbmVyID0gc2VsZi4kcmVmcy5jb250YWluZXIsXHJcbiAgICAgICAgY2FuUGFuLFxyXG4gICAgICAgIGlzWm9vbWFibGU7XHJcblxyXG4gICAgICBpZiAoIWN1cnJlbnQgfHwgc2VsZi5pc0Nsb3NpbmcgfHwgIXNlbGYuR3Vlc3R1cmVzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkY29udGFpbmVyLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtaXMtem9vbWFibGUgZmFuY3lib3gtY2FuLXpvb21JbiBmYW5jeWJveC1jYW4tem9vbU91dCBmYW5jeWJveC1jYW4tc3dpcGUgZmFuY3lib3gtY2FuLXBhblwiKTtcclxuXHJcbiAgICAgIGNhblBhbiA9IHNlbGYuY2FuUGFuKG5leHRXaWR0aCwgbmV4dEhlaWdodCk7XHJcblxyXG4gICAgICBpc1pvb21hYmxlID0gY2FuUGFuID8gdHJ1ZSA6IHNlbGYuaXNab29tYWJsZSgpO1xyXG5cclxuICAgICAgJGNvbnRhaW5lci50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWlzLXpvb21hYmxlXCIsIGlzWm9vbWFibGUpO1xyXG5cclxuICAgICAgJChcIltkYXRhLWZhbmN5Ym94LXpvb21dXCIpLnByb3AoXCJkaXNhYmxlZFwiLCAhaXNab29tYWJsZSk7XHJcblxyXG4gICAgICBpZiAoY2FuUGFuKSB7XHJcbiAgICAgICAgJGNvbnRhaW5lci5hZGRDbGFzcyhcImZhbmN5Ym94LWNhbi1wYW5cIik7XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgaXNab29tYWJsZSAmJlxyXG4gICAgICAgIChjdXJyZW50Lm9wdHMuY2xpY2tDb250ZW50ID09PSBcInpvb21cIiB8fCAoJC5pc0Z1bmN0aW9uKGN1cnJlbnQub3B0cy5jbGlja0NvbnRlbnQpICYmIGN1cnJlbnQub3B0cy5jbGlja0NvbnRlbnQoY3VycmVudCkgPT0gXCJ6b29tXCIpKVxyXG4gICAgICApIHtcclxuICAgICAgICAkY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtY2FuLXpvb21JblwiKTtcclxuICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm9wdHMudG91Y2ggJiYgKGN1cnJlbnQub3B0cy50b3VjaC52ZXJ0aWNhbCB8fCBzZWxmLmdyb3VwLmxlbmd0aCA+IDEpICYmIGN1cnJlbnQuY29udGVudFR5cGUgIT09IFwidmlkZW9cIikge1xyXG4gICAgICAgICRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1jYW4tc3dpcGVcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgY3VycmVudCBzbGlkZSBpcyB6b29tYWJsZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGlzWm9vbWFibGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICBmaXRQb3M7XHJcblxyXG4gICAgICAvLyBBc3N1bWUgdGhhdCBzbGlkZSBpcyB6b29tYWJsZSBpZjpcclxuICAgICAgLy8gICAtIGltYWdlIGlzIHN0aWxsIGxvYWRpbmdcclxuICAgICAgLy8gICAtIGFjdHVhbCBzaXplIG9mIHRoZSBpbWFnZSBpcyBzbWFsbGVyIHRoYW4gYXZhaWxhYmxlIGFyZWFcclxuICAgICAgaWYgKGN1cnJlbnQgJiYgIXNlbGYuaXNDbG9zaW5nICYmIGN1cnJlbnQudHlwZSA9PT0gXCJpbWFnZVwiICYmICFjdXJyZW50Lmhhc0Vycm9yKSB7XHJcbiAgICAgICAgaWYgKCFjdXJyZW50LmlzTG9hZGVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpdFBvcyA9IHNlbGYuZ2V0Rml0UG9zKGN1cnJlbnQpO1xyXG5cclxuICAgICAgICBpZiAoZml0UG9zICYmIChjdXJyZW50LndpZHRoID4gZml0UG9zLndpZHRoIHx8IGN1cnJlbnQuaGVpZ2h0ID4gZml0UG9zLmhlaWdodCkpIHtcclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGVjayBpZiBjdXJyZW50IGltYWdlIGRpbWVuc2lvbnMgYXJlIHNtYWxsZXIgdGhhbiBhY3R1YWxcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGlzU2NhbGVkRG93bjogZnVuY3Rpb24obmV4dFdpZHRoLCBuZXh0SGVpZ2h0KSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICByZXogPSBmYWxzZSxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgICRjb250ZW50ID0gY3VycmVudC4kY29udGVudDtcclxuXHJcbiAgICAgIGlmIChuZXh0V2lkdGggIT09IHVuZGVmaW5lZCAmJiBuZXh0SGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXogPSBuZXh0V2lkdGggPCBjdXJyZW50LndpZHRoICYmIG5leHRIZWlnaHQgPCBjdXJyZW50LmhlaWdodDtcclxuICAgICAgfSBlbHNlIGlmICgkY29udGVudCkge1xyXG4gICAgICAgIHJleiA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCRjb250ZW50KTtcclxuICAgICAgICByZXogPSByZXoud2lkdGggPCBjdXJyZW50LndpZHRoICYmIHJlei5oZWlnaHQgPCBjdXJyZW50LmhlaWdodDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlejtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgaW1hZ2UgZGltZW5zaW9ucyBleGNlZWQgcGFyZW50IGVsZW1lbnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY2FuUGFuOiBmdW5jdGlvbihuZXh0V2lkdGgsIG5leHRIZWlnaHQpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgcG9zID0gbnVsbCxcclxuICAgICAgICByZXogPSBmYWxzZTtcclxuXHJcbiAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiAmJiAoY3VycmVudC5pc0NvbXBsZXRlIHx8IChuZXh0V2lkdGggJiYgbmV4dEhlaWdodCkpICYmICFjdXJyZW50Lmhhc0Vycm9yKSB7XHJcbiAgICAgICAgcmV6ID0gc2VsZi5nZXRGaXRQb3MoY3VycmVudCk7XHJcblxyXG4gICAgICAgIGlmIChuZXh0V2lkdGggIT09IHVuZGVmaW5lZCAmJiBuZXh0SGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHBvcyA9IHt3aWR0aDogbmV4dFdpZHRoLCBoZWlnaHQ6IG5leHRIZWlnaHR9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5pc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgICBwb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShjdXJyZW50LiRjb250ZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwb3MgJiYgcmV6KSB7XHJcbiAgICAgICAgICByZXogPSBNYXRoLmFicyhwb3Mud2lkdGggLSByZXoud2lkdGgpID4gMS41IHx8IE1hdGguYWJzKHBvcy5oZWlnaHQgLSByZXouaGVpZ2h0KSA+IDEuNTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXo7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIExvYWQgY29udGVudCBpbnRvIHRoZSBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgbG9hZFNsaWRlOiBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICAkc2xpZGUsXHJcbiAgICAgICAgYWpheExvYWQ7XHJcblxyXG4gICAgICBpZiAoc2xpZGUuaXNMb2FkaW5nIHx8IHNsaWRlLmlzTG9hZGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZS5pc0xvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgaWYgKHNlbGYudHJpZ2dlcihcImJlZm9yZUxvYWRcIiwgc2xpZGUpID09PSBmYWxzZSkge1xyXG4gICAgICAgIHNsaWRlLmlzTG9hZGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHR5cGUgPSBzbGlkZS50eXBlO1xyXG4gICAgICAkc2xpZGUgPSBzbGlkZS4kc2xpZGU7XHJcblxyXG4gICAgICAkc2xpZGVcclxuICAgICAgICAub2ZmKFwicmVmcmVzaFwiKVxyXG4gICAgICAgIC50cmlnZ2VyKFwib25SZXNldFwiKVxyXG4gICAgICAgIC5hZGRDbGFzcyhzbGlkZS5vcHRzLnNsaWRlQ2xhc3MpO1xyXG5cclxuICAgICAgLy8gQ3JlYXRlIGNvbnRlbnQgZGVwZW5kaW5nIG9uIHRoZSB0eXBlXHJcbiAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJpbWFnZVwiOlxyXG4gICAgICAgICAgc2VsZi5zZXRJbWFnZShzbGlkZSk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJpZnJhbWVcIjpcclxuICAgICAgICAgIHNlbGYuc2V0SWZyYW1lKHNsaWRlKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcImh0bWxcIjpcclxuICAgICAgICAgIHNlbGYuc2V0Q29udGVudChzbGlkZSwgc2xpZGUuc3JjIHx8IHNsaWRlLmNvbnRlbnQpO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwidmlkZW9cIjpcclxuICAgICAgICAgIHNlbGYuc2V0Q29udGVudChcclxuICAgICAgICAgICAgc2xpZGUsXHJcbiAgICAgICAgICAgIHNsaWRlLm9wdHMudmlkZW8udHBsXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoL1xce1xce3NyY1xcfVxcfS9naSwgc2xpZGUuc3JjKVxyXG4gICAgICAgICAgICAgIC5yZXBsYWNlKFwie3tmb3JtYXR9fVwiLCBzbGlkZS5vcHRzLnZpZGVvRm9ybWF0IHx8IHNsaWRlLm9wdHMudmlkZW8uZm9ybWF0IHx8IFwiXCIpXHJcbiAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ7e3Bvc3Rlcn19XCIsIHNsaWRlLnRodW1iIHx8IFwiXCIpXHJcbiAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwiaW5saW5lXCI6XHJcbiAgICAgICAgICBpZiAoJChzbGlkZS5zcmMpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBzZWxmLnNldENvbnRlbnQoc2xpZGUsICQoc2xpZGUuc3JjKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZWxmLnNldEVycm9yKHNsaWRlKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcImFqYXhcIjpcclxuICAgICAgICAgIHNlbGYuc2hvd0xvYWRpbmcoc2xpZGUpO1xyXG5cclxuICAgICAgICAgIGFqYXhMb2FkID0gJC5hamF4KFxyXG4gICAgICAgICAgICAkLmV4dGVuZCh7fSwgc2xpZGUub3B0cy5hamF4LnNldHRpbmdzLCB7XHJcbiAgICAgICAgICAgICAgdXJsOiBzbGlkZS5zcmMsXHJcbiAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRleHRTdGF0dXMgPT09IFwic3VjY2Vzc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNlbGYuc2V0Q29udGVudChzbGlkZSwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oanFYSFIsIHRleHRTdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChqcVhIUiAmJiB0ZXh0U3RhdHVzICE9PSBcImFib3J0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgc2VsZi5zZXRFcnJvcihzbGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAkc2xpZGUub25lKFwib25SZXNldFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgYWpheExvYWQuYWJvcnQoKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgc2VsZi5zZXRFcnJvcihzbGlkZSk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBVc2UgdGh1bWJuYWlsIGltYWdlLCBpZiBwb3NzaWJsZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzZXRJbWFnZTogZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGdob3N0O1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgbmVlZCB0byBzaG93IGxvYWRpbmcgaWNvblxyXG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciAkaW1nID0gc2xpZGUuJGltYWdlO1xyXG5cclxuICAgICAgICBpZiAoIXNlbGYuaXNDbG9zaW5nICYmIHNsaWRlLmlzTG9hZGluZyAmJiAoISRpbWcgfHwgISRpbWcubGVuZ3RoIHx8ICEkaW1nWzBdLmNvbXBsZXRlKSAmJiAhc2xpZGUuaGFzRXJyb3IpIHtcclxuICAgICAgICAgIHNlbGYuc2hvd0xvYWRpbmcoc2xpZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgNTApO1xyXG5cclxuICAgICAgLy9DaGVjayBpZiBpbWFnZSBoYXMgc3Jjc2V0XHJcbiAgICAgIHNlbGYuY2hlY2tTcmNzZXQoc2xpZGUpO1xyXG5cclxuICAgICAgLy8gVGhpcyB3aWxsIGJlIHdyYXBwZXIgY29udGFpbmluZyBib3RoIGdob3N0IGFuZCBhY3R1YWwgaW1hZ2VcclxuICAgICAgc2xpZGUuJGNvbnRlbnQgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY29udGVudFwiPjwvZGl2PicpXHJcbiAgICAgICAgLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtaGlkZGVuXCIpXHJcbiAgICAgICAgLmFwcGVuZFRvKHNsaWRlLiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1pbWFnZVwiKSk7XHJcblxyXG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgdGh1bWJuYWlsLCB3ZSBjYW4gZGlzcGxheSBpdCB3aGlsZSBhY3R1YWwgaW1hZ2UgaXMgbG9hZGluZ1xyXG4gICAgICAvLyBVc2VycyB3aWxsIG5vdCBzdGFyZSBhdCBibGFjayBzY3JlZW4gYW5kIGFjdHVhbCBpbWFnZSB3aWxsIGFwcGVhciBncmFkdWFsbHlcclxuICAgICAgaWYgKHNsaWRlLm9wdHMucHJlbG9hZCAhPT0gZmFsc2UgJiYgc2xpZGUub3B0cy53aWR0aCAmJiBzbGlkZS5vcHRzLmhlaWdodCAmJiBzbGlkZS50aHVtYikge1xyXG4gICAgICAgIHNsaWRlLndpZHRoID0gc2xpZGUub3B0cy53aWR0aDtcclxuICAgICAgICBzbGlkZS5oZWlnaHQgPSBzbGlkZS5vcHRzLmhlaWdodDtcclxuXHJcbiAgICAgICAgZ2hvc3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG5cclxuICAgICAgICBnaG9zdC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkKHRoaXMpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgIHNsaWRlLiRnaG9zdCA9IG51bGw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZ2hvc3Qub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzZWxmLmFmdGVyTG9hZChzbGlkZSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2xpZGUuJGdob3N0ID0gJChnaG9zdClcclxuICAgICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWltYWdlXCIpXHJcbiAgICAgICAgICAuYXBwZW5kVG8oc2xpZGUuJGNvbnRlbnQpXHJcbiAgICAgICAgICAuYXR0cihcInNyY1wiLCBzbGlkZS50aHVtYik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFN0YXJ0IGxvYWRpbmcgYWN0dWFsIGltYWdlXHJcbiAgICAgIHNlbGYuc2V0QmlnSW1hZ2Uoc2xpZGUpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDaGVjayBpZiBpbWFnZSBoYXMgc3Jjc2V0IGFuZCBnZXQgdGhlIHNvdXJjZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIGNoZWNrU3Jjc2V0OiBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICB2YXIgc3Jjc2V0ID0gc2xpZGUub3B0cy5zcmNzZXQgfHwgc2xpZGUub3B0cy5pbWFnZS5zcmNzZXQsXHJcbiAgICAgICAgZm91bmQsXHJcbiAgICAgICAgdGVtcCxcclxuICAgICAgICBweFJhdGlvLFxyXG4gICAgICAgIHdpbmRvd1dpZHRoO1xyXG5cclxuICAgICAgLy8gSWYgd2UgaGF2ZSBcInNyY3NldFwiLCB0aGVuIHdlIG5lZWQgdG8gZmluZCBmaXJzdCBtYXRjaGluZyBcInNyY1wiIHZhbHVlLlxyXG4gICAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSwgYmVjYXVzZSB3aGVuIHlvdSBzZXQgYW4gc3JjIGF0dHJpYnV0ZSwgdGhlIGJyb3dzZXIgd2lsbCBwcmVsb2FkIHRoZSBpbWFnZVxyXG4gICAgICAvLyBiZWZvcmUgYW55IGphdmFzY3JpcHQgb3IgZXZlbiBDU1MgaXMgYXBwbGllZC5cclxuICAgICAgaWYgKHNyY3NldCkge1xyXG4gICAgICAgIHB4UmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xyXG4gICAgICAgIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggKiBweFJhdGlvO1xyXG5cclxuICAgICAgICB0ZW1wID0gc3Jjc2V0LnNwbGl0KFwiLFwiKS5tYXAoZnVuY3Rpb24oZWwpIHtcclxuICAgICAgICAgIHZhciByZXQgPSB7fTtcclxuXHJcbiAgICAgICAgICBlbC50cmltKClcclxuICAgICAgICAgICAgLnNwbGl0KC9cXHMrLylcclxuICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oZWwsIGkpIHtcclxuICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZUludChlbC5zdWJzdHJpbmcoMCwgZWwubGVuZ3RoIC0gMSksIDEwKTtcclxuXHJcbiAgICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAocmV0LnVybCA9IGVsKTtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0LnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICByZXQucG9zdGZpeCA9IGVsW2VsLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHJldDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gU29ydCBieSB2YWx1ZVxyXG4gICAgICAgIHRlbXAuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgICAgICByZXR1cm4gYS52YWx1ZSAtIGIudmFsdWU7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE9rLCBub3cgd2UgaGF2ZSBhbiBhcnJheSBvZiBhbGwgc3Jjc2V0IHZhbHVlc1xyXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGVtcC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgdmFyIGVsID0gdGVtcFtqXTtcclxuXHJcbiAgICAgICAgICBpZiAoKGVsLnBvc3RmaXggPT09IFwid1wiICYmIGVsLnZhbHVlID49IHdpbmRvd1dpZHRoKSB8fCAoZWwucG9zdGZpeCA9PT0gXCJ4XCIgJiYgZWwudmFsdWUgPj0gcHhSYXRpbykpIHtcclxuICAgICAgICAgICAgZm91bmQgPSBlbDtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZiBub3QgZm91bmQsIHRha2UgdGhlIGxhc3Qgb25lXHJcbiAgICAgICAgaWYgKCFmb3VuZCAmJiB0ZW1wLmxlbmd0aCkge1xyXG4gICAgICAgICAgZm91bmQgPSB0ZW1wW3RlbXAubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZm91bmQpIHtcclxuICAgICAgICAgIHNsaWRlLnNyYyA9IGZvdW5kLnVybDtcclxuXHJcbiAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGRlZmF1bHQgd2lkdGgvaGVpZ2h0IHZhbHVlcywgd2UgY2FuIGNhbGN1bGF0ZSBoZWlnaHQgZm9yIG1hdGNoaW5nIHNvdXJjZVxyXG4gICAgICAgICAgaWYgKHNsaWRlLndpZHRoICYmIHNsaWRlLmhlaWdodCAmJiBmb3VuZC5wb3N0Zml4ID09IFwid1wiKSB7XHJcbiAgICAgICAgICAgIHNsaWRlLmhlaWdodCA9IChzbGlkZS53aWR0aCAvIHNsaWRlLmhlaWdodCkgKiBmb3VuZC52YWx1ZTtcclxuICAgICAgICAgICAgc2xpZGUud2lkdGggPSBmb3VuZC52YWx1ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzbGlkZS5vcHRzLnNyY3NldCA9IHNyY3NldDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ3JlYXRlIGZ1bGwtc2l6ZSBpbWFnZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNldEJpZ0ltYWdlOiBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKSxcclxuICAgICAgICAkaW1nID0gJChpbWcpO1xyXG5cclxuICAgICAgc2xpZGUuJGltYWdlID0gJGltZ1xyXG4gICAgICAgIC5vbmUoXCJlcnJvclwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHNlbGYuc2V0RXJyb3Ioc2xpZGUpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uZShcImxvYWRcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgc2l6ZXM7XHJcblxyXG4gICAgICAgICAgaWYgKCFzbGlkZS4kZ2hvc3QpIHtcclxuICAgICAgICAgICAgc2VsZi5yZXNvbHZlSW1hZ2VTbGlkZVNpemUoc2xpZGUsIHRoaXMubmF0dXJhbFdpZHRoLCB0aGlzLm5hdHVyYWxIZWlnaHQpO1xyXG5cclxuICAgICAgICAgICAgc2VsZi5hZnRlckxvYWQoc2xpZGUpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChzZWxmLmlzQ2xvc2luZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKHNsaWRlLm9wdHMuc3Jjc2V0KSB7XHJcbiAgICAgICAgICAgIHNpemVzID0gc2xpZGUub3B0cy5zaXplcztcclxuXHJcbiAgICAgICAgICAgIGlmICghc2l6ZXMgfHwgc2l6ZXMgPT09IFwiYXV0b1wiKSB7XHJcbiAgICAgICAgICAgICAgc2l6ZXMgPVxyXG4gICAgICAgICAgICAgICAgKHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0ID4gMSAmJiAkVy53aWR0aCgpIC8gJFcuaGVpZ2h0KCkgPiAxID8gXCIxMDBcIiA6IE1hdGgucm91bmQoKHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0KSAqIDEwMCkpICtcclxuICAgICAgICAgICAgICAgIFwidndcIjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGltZy5hdHRyKFwic2l6ZXNcIiwgc2l6ZXMpLmF0dHIoXCJzcmNzZXRcIiwgc2xpZGUub3B0cy5zcmNzZXQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIEhpZGUgdGVtcG9yYXJ5IGltYWdlIGFmdGVyIHNvbWUgZGVsYXlcclxuICAgICAgICAgIGlmIChzbGlkZS4kZ2hvc3QpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICBpZiAoc2xpZGUuJGdob3N0ICYmICFzZWxmLmlzQ2xvc2luZykge1xyXG4gICAgICAgICAgICAgICAgc2xpZGUuJGdob3N0LmhpZGUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIE1hdGgubWluKDMwMCwgTWF0aC5tYXgoMTAwMCwgc2xpZGUuaGVpZ2h0IC8gMTYwMCkpKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZWxmLmhpZGVMb2FkaW5nKHNsaWRlKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWltYWdlXCIpXHJcbiAgICAgICAgLmF0dHIoXCJzcmNcIiwgc2xpZGUuc3JjKVxyXG4gICAgICAgIC5hcHBlbmRUbyhzbGlkZS4kY29udGVudCk7XHJcblxyXG4gICAgICBpZiAoKGltZy5jb21wbGV0ZSB8fCBpbWcucmVhZHlTdGF0ZSA9PSBcImNvbXBsZXRlXCIpICYmICRpbWcubmF0dXJhbFdpZHRoICYmICRpbWcubmF0dXJhbEhlaWdodCkge1xyXG4gICAgICAgICRpbWcudHJpZ2dlcihcImxvYWRcIik7XHJcbiAgICAgIH0gZWxzZSBpZiAoaW1nLmVycm9yKSB7XHJcbiAgICAgICAgJGltZy50cmlnZ2VyKFwiZXJyb3JcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ29tcHV0ZXMgdGhlIHNsaWRlIHNpemUgZnJvbSBpbWFnZSBzaXplIGFuZCBtYXhXaWR0aC9tYXhIZWlnaHRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgcmVzb2x2ZUltYWdlU2xpZGVTaXplOiBmdW5jdGlvbihzbGlkZSwgaW1nV2lkdGgsIGltZ0hlaWdodCkge1xyXG4gICAgICB2YXIgbWF4V2lkdGggPSBwYXJzZUludChzbGlkZS5vcHRzLndpZHRoLCAxMCksXHJcbiAgICAgICAgbWF4SGVpZ2h0ID0gcGFyc2VJbnQoc2xpZGUub3B0cy5oZWlnaHQsIDEwKTtcclxuXHJcbiAgICAgIC8vIFNldHMgdGhlIGRlZmF1bHQgdmFsdWVzIGZyb20gdGhlIGltYWdlXHJcbiAgICAgIHNsaWRlLndpZHRoID0gaW1nV2lkdGg7XHJcbiAgICAgIHNsaWRlLmhlaWdodCA9IGltZ0hlaWdodDtcclxuXHJcbiAgICAgIGlmIChtYXhXaWR0aCA+IDApIHtcclxuICAgICAgICBzbGlkZS53aWR0aCA9IG1heFdpZHRoO1xyXG4gICAgICAgIHNsaWRlLmhlaWdodCA9IE1hdGguZmxvb3IoKG1heFdpZHRoICogaW1nSGVpZ2h0KSAvIGltZ1dpZHRoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG1heEhlaWdodCA+IDApIHtcclxuICAgICAgICBzbGlkZS53aWR0aCA9IE1hdGguZmxvb3IoKG1heEhlaWdodCAqIGltZ1dpZHRoKSAvIGltZ0hlaWdodCk7XHJcbiAgICAgICAgc2xpZGUuaGVpZ2h0ID0gbWF4SGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENyZWF0ZSBpZnJhbWUgd3JhcHBlciwgaWZyYW1lIGFuZCBiaW5kaW5nc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2V0SWZyYW1lOiBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgb3B0cyA9IHNsaWRlLm9wdHMuaWZyYW1lLFxyXG4gICAgICAgICRzbGlkZSA9IHNsaWRlLiRzbGlkZSxcclxuICAgICAgICAkaWZyYW1lO1xyXG5cclxuICAgICAgLy8gRml4IHJlc3BvbnNpdmUgaWZyYW1lcyBvbiBpT1MgKGFsb25nIHdpdGggYHBvc2l0aW9uOmFic29sdXRlO2AgZm9yIGlmcmFtZSBlbGVtZW50KVxyXG4gICAgICBpZiAoJC5mYW5jeWJveC5pc01vYmlsZSkge1xyXG4gICAgICAgIG9wdHMuY3NzLm92ZXJmbG93ID0gXCJzY3JvbGxcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2xpZGUuJGNvbnRlbnQgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtY29udGVudCcgKyAob3B0cy5wcmVsb2FkID8gXCIgZmFuY3lib3gtaXMtaGlkZGVuXCIgOiBcIlwiKSArICdcIj48L2Rpdj4nKVxyXG4gICAgICAgIC5jc3Mob3B0cy5jc3MpXHJcbiAgICAgICAgLmFwcGVuZFRvKCRzbGlkZSk7XHJcblxyXG4gICAgICAkc2xpZGUuYWRkQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tXCIgKyBzbGlkZS5jb250ZW50VHlwZSk7XHJcblxyXG4gICAgICBzbGlkZS4kaWZyYW1lID0gJGlmcmFtZSA9ICQob3B0cy50cGwucmVwbGFjZSgvXFx7cm5kXFx9L2csIG5ldyBEYXRlKCkuZ2V0VGltZSgpKSlcclxuICAgICAgICAuYXR0cihvcHRzLmF0dHIpXHJcbiAgICAgICAgLmFwcGVuZFRvKHNsaWRlLiRjb250ZW50KTtcclxuXHJcbiAgICAgIGlmIChvcHRzLnByZWxvYWQpIHtcclxuICAgICAgICBzZWxmLnNob3dMb2FkaW5nKHNsaWRlKTtcclxuXHJcbiAgICAgICAgLy8gVW5mb3J0dW5hdGVseSwgaXQgaXMgbm90IGFsd2F5cyBwb3NzaWJsZSB0byBkZXRlcm1pbmUgaWYgaWZyYW1lIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWRcclxuICAgICAgICAvLyAoZHVlIHRvIGJyb3dzZXIgc2VjdXJpdHkgcG9saWN5KVxyXG5cclxuICAgICAgICAkaWZyYW1lLm9uKFwibG9hZC5mYiBlcnJvci5mYlwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICB0aGlzLmlzUmVhZHkgPSAxO1xyXG5cclxuICAgICAgICAgIHNsaWRlLiRzbGlkZS50cmlnZ2VyKFwicmVmcmVzaFwiKTtcclxuXHJcbiAgICAgICAgICBzZWxmLmFmdGVyTG9hZChzbGlkZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlY2FsY3VsYXRlIGlmcmFtZSBjb250ZW50IHNpemVcclxuICAgICAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICRzbGlkZS5vbihcInJlZnJlc2guZmJcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgJGNvbnRlbnQgPSBzbGlkZS4kY29udGVudCxcclxuICAgICAgICAgICAgZnJhbWVXaWR0aCA9IG9wdHMuY3NzLndpZHRoLFxyXG4gICAgICAgICAgICBmcmFtZUhlaWdodCA9IG9wdHMuY3NzLmhlaWdodCxcclxuICAgICAgICAgICAgJGNvbnRlbnRzLFxyXG4gICAgICAgICAgICAkYm9keTtcclxuXHJcbiAgICAgICAgICBpZiAoJGlmcmFtZVswXS5pc1JlYWR5ICE9PSAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAkY29udGVudHMgPSAkaWZyYW1lLmNvbnRlbnRzKCk7XHJcbiAgICAgICAgICAgICRib2R5ID0gJGNvbnRlbnRzLmZpbmQoXCJib2R5XCIpO1xyXG4gICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxyXG5cclxuICAgICAgICAgIC8vIENhbGN1bGF0ZSBjb250bmV0IGRpbWVuc2lvbnMgaWYgaXQgaXMgYWNjZXNzaWJsZVxyXG4gICAgICAgICAgaWYgKCRib2R5ICYmICRib2R5Lmxlbmd0aCAmJiAkYm9keS5jaGlsZHJlbigpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyBBdm9pZCBzY3JvbGxpbmcgdG8gdG9wIChpZiBtdWx0aXBsZSBpbnN0YW5jZXMpXHJcbiAgICAgICAgICAgICRzbGlkZS5jc3MoXCJvdmVyZmxvd1wiLCBcInZpc2libGVcIik7XHJcblxyXG4gICAgICAgICAgICAkY29udGVudC5jc3Moe1xyXG4gICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgICAgICAgICBcIm1heC13aWR0aFwiOiBcIjEwMCVcIixcclxuICAgICAgICAgICAgICBoZWlnaHQ6IFwiOTk5OXB4XCJcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZnJhbWVXaWR0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgZnJhbWVXaWR0aCA9IE1hdGguY2VpbChNYXRoLm1heCgkYm9keVswXS5jbGllbnRXaWR0aCwgJGJvZHkub3V0ZXJXaWR0aCh0cnVlKSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkY29udGVudC5jc3MoXCJ3aWR0aFwiLCBmcmFtZVdpZHRoID8gZnJhbWVXaWR0aCA6IFwiXCIpLmNzcyhcIm1heC13aWR0aFwiLCBcIlwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmcmFtZUhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgZnJhbWVIZWlnaHQgPSBNYXRoLmNlaWwoTWF0aC5tYXgoJGJvZHlbMF0uY2xpZW50SGVpZ2h0LCAkYm9keS5vdXRlckhlaWdodCh0cnVlKSkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkY29udGVudC5jc3MoXCJoZWlnaHRcIiwgZnJhbWVIZWlnaHQgPyBmcmFtZUhlaWdodCA6IFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgJHNsaWRlLmNzcyhcIm92ZXJmbG93XCIsIFwiYXV0b1wiKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAkY29udGVudC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLWhpZGRlblwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLmFmdGVyTG9hZChzbGlkZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRpZnJhbWUuYXR0cihcInNyY1wiLCBzbGlkZS5zcmMpO1xyXG5cclxuICAgICAgLy8gUmVtb3ZlIGlmcmFtZSBpZiBjbG9zaW5nIG9yIGNoYW5naW5nIGdhbGxlcnkgaXRlbVxyXG4gICAgICAkc2xpZGUub25lKFwib25SZXNldFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAvLyBUaGlzIGhlbHBzIElFIG5vdCB0byB0aHJvdyBlcnJvcnMgd2hlbiBjbG9zaW5nXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICQodGhpcylcclxuICAgICAgICAgICAgLmZpbmQoXCJpZnJhbWVcIilcclxuICAgICAgICAgICAgLmhpZGUoKVxyXG4gICAgICAgICAgICAudW5iaW5kKClcclxuICAgICAgICAgICAgLmF0dHIoXCJzcmNcIiwgXCIvL2Fib3V0OmJsYW5rXCIpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cclxuXHJcbiAgICAgICAgJCh0aGlzKVxyXG4gICAgICAgICAgLm9mZihcInJlZnJlc2guZmJcIilcclxuICAgICAgICAgIC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBzbGlkZS5pc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHNsaWRlLmlzUmV2ZWFsZWQgPSBmYWxzZTtcclxuICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFdyYXAgYW5kIGFwcGVuZCBjb250ZW50IHRvIHRoZSBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzZXRDb250ZW50OiBmdW5jdGlvbihzbGlkZSwgY29udGVudCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuaGlkZUxvYWRpbmcoc2xpZGUpO1xyXG5cclxuICAgICAgaWYgKHNsaWRlLiRjb250ZW50KSB7XHJcbiAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRjb250ZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2xpZGUuJHNsaWRlLmVtcHR5KCk7XHJcblxyXG4gICAgICAvLyBJZiBjb250ZW50IGlzIGEgalF1ZXJ5IG9iamVjdCwgdGhlbiBpdCB3aWxsIGJlIG1vdmVkIHRvIHRoZSBzbGlkZS5cclxuICAgICAgLy8gVGhlIHBsYWNlaG9sZGVyIGlzIGNyZWF0ZWQgc28gd2Ugd2lsbCBrbm93IHdoZXJlIHRvIHB1dCBpdCBiYWNrLlxyXG4gICAgICBpZiAoaXNRdWVyeShjb250ZW50KSAmJiBjb250ZW50LnBhcmVudCgpLmxlbmd0aCkge1xyXG4gICAgICAgIC8vIE1ha2Ugc3VyZSBjb250ZW50IGlzIG5vdCBhbHJlYWR5IG1vdmVkIHRvIGZhbmN5Qm94XHJcbiAgICAgICAgaWYgKGNvbnRlbnQuaGFzQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpIHx8IGNvbnRlbnQucGFyZW50KCkuaGFzQ2xhc3MoXCJmYW5jeWJveC1jb250ZW50XCIpKSB7XHJcbiAgICAgICAgICBjb250ZW50LnBhcmVudHMoXCIuZmFuY3lib3gtc2xpZGVcIikudHJpZ2dlcihcIm9uUmVzZXRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDcmVhdGUgdGVtcG9yYXJ5IGVsZW1lbnQgbWFya2luZyBvcmlnaW5hbCBwbGFjZSBvZiB0aGUgY29udGVudFxyXG4gICAgICAgIHNsaWRlLiRwbGFjZWhvbGRlciA9ICQoXCI8ZGl2PlwiKVxyXG4gICAgICAgICAgLmhpZGUoKVxyXG4gICAgICAgICAgLmluc2VydEFmdGVyKGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAvLyBNYWtlIHN1cmUgY29udGVudCBpcyB2aXNpYmxlXHJcbiAgICAgICAgY29udGVudC5jc3MoXCJkaXNwbGF5XCIsIFwiaW5saW5lLWJsb2NrXCIpO1xyXG4gICAgICB9IGVsc2UgaWYgKCFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgIC8vIElmIGNvbnRlbnQgaXMganVzdCBhIHBsYWluIHRleHQsIHRyeSB0byBjb252ZXJ0IGl0IHRvIGh0bWxcclxuICAgICAgICBpZiAoJC50eXBlKGNvbnRlbnQpID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICBjb250ZW50ID0gJChcIjxkaXY+XCIpXHJcbiAgICAgICAgICAgIC5hcHBlbmQoJC50cmltKGNvbnRlbnQpKVxyXG4gICAgICAgICAgICAuY29udGVudHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIElmIFwiZmlsdGVyXCIgb3B0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGZpbHRlciBjb250ZW50XHJcbiAgICAgICAgaWYgKHNsaWRlLm9wdHMuZmlsdGVyKSB7XHJcbiAgICAgICAgICBjb250ZW50ID0gJChcIjxkaXY+XCIpXHJcbiAgICAgICAgICAgIC5odG1sKGNvbnRlbnQpXHJcbiAgICAgICAgICAgIC5maW5kKHNsaWRlLm9wdHMuZmlsdGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNsaWRlLiRzbGlkZS5vbmUoXCJvblJlc2V0XCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIC8vIFBhdXNlIGFsbCBodG1sNSB2aWRlby9hdWRpb1xyXG4gICAgICAgICQodGhpcylcclxuICAgICAgICAgIC5maW5kKFwidmlkZW8sYXVkaW9cIilcclxuICAgICAgICAgIC50cmlnZ2VyKFwicGF1c2VcIik7XHJcblxyXG4gICAgICAgIC8vIFB1dCBjb250ZW50IGJhY2tcclxuICAgICAgICBpZiAoc2xpZGUuJHBsYWNlaG9sZGVyKSB7XHJcbiAgICAgICAgICBzbGlkZS4kcGxhY2Vob2xkZXIuYWZ0ZXIoY29udGVudC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWNvbnRlbnRcIikuaGlkZSgpKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICBzbGlkZS4kcGxhY2Vob2xkZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIGN1c3RvbSBjbG9zZSBidXR0b25cclxuICAgICAgICBpZiAoc2xpZGUuJHNtYWxsQnRuKSB7XHJcbiAgICAgICAgICBzbGlkZS4kc21hbGxCdG4ucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgICAgc2xpZGUuJHNtYWxsQnRuID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBjb250ZW50IGFuZCBtYXJrIHNsaWRlIGFzIG5vdCBsb2FkZWRcclxuICAgICAgICBpZiAoIXNsaWRlLmhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAkKHRoaXMpLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgc2xpZGUuaXNMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICAgIHNsaWRlLmlzUmV2ZWFsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgJChjb250ZW50KS5hcHBlbmRUbyhzbGlkZS4kc2xpZGUpO1xyXG5cclxuICAgICAgaWYgKCQoY29udGVudCkuaXMoXCJ2aWRlbyxhdWRpb1wiKSkge1xyXG4gICAgICAgICQoY29udGVudCkuYWRkQ2xhc3MoXCJmYW5jeWJveC12aWRlb1wiKTtcclxuXHJcbiAgICAgICAgJChjb250ZW50KS53cmFwKFwiPGRpdj48L2Rpdj5cIik7XHJcblxyXG4gICAgICAgIHNsaWRlLmNvbnRlbnRUeXBlID0gXCJ2aWRlb1wiO1xyXG5cclxuICAgICAgICBzbGlkZS5vcHRzLndpZHRoID0gc2xpZGUub3B0cy53aWR0aCB8fCAkKGNvbnRlbnQpLmF0dHIoXCJ3aWR0aFwiKTtcclxuICAgICAgICBzbGlkZS5vcHRzLmhlaWdodCA9IHNsaWRlLm9wdHMuaGVpZ2h0IHx8ICQoY29udGVudCkuYXR0cihcImhlaWdodFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2xpZGUuJGNvbnRlbnQgPSBzbGlkZS4kc2xpZGVcclxuICAgICAgICAuY2hpbGRyZW4oKVxyXG4gICAgICAgIC5maWx0ZXIoXCJkaXYsZm9ybSxtYWluLHZpZGVvLGF1ZGlvLGFydGljbGUsLmZhbmN5Ym94LWNvbnRlbnRcIilcclxuICAgICAgICAuZmlyc3QoKTtcclxuXHJcbiAgICAgIHNsaWRlLiRjb250ZW50LnNpYmxpbmdzKCkuaGlkZSgpO1xyXG5cclxuICAgICAgLy8gUmUtY2hlY2sgaWYgdGhlcmUgaXMgYSB2YWxpZCBjb250ZW50XHJcbiAgICAgIC8vIChpbiBzb21lIGNhc2VzLCBhamF4IHJlc3BvbnNlIGNhbiBjb250YWluIHZhcmlvdXMgZWxlbWVudHMgb3IgcGxhaW4gdGV4dClcclxuICAgICAgaWYgKCFzbGlkZS4kY29udGVudC5sZW5ndGgpIHtcclxuICAgICAgICBzbGlkZS4kY29udGVudCA9IHNsaWRlLiRzbGlkZVxyXG4gICAgICAgICAgLndyYXBJbm5lcihcIjxkaXY+PC9kaXY+XCIpXHJcbiAgICAgICAgICAuY2hpbGRyZW4oKVxyXG4gICAgICAgICAgLmZpcnN0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNsaWRlLiRjb250ZW50LmFkZENsYXNzKFwiZmFuY3lib3gtY29udGVudFwiKTtcclxuXHJcbiAgICAgIHNsaWRlLiRzbGlkZS5hZGRDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1cIiArIHNsaWRlLmNvbnRlbnRUeXBlKTtcclxuXHJcbiAgICAgIHNlbGYuYWZ0ZXJMb2FkKHNsaWRlKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gRGlzcGxheSBlcnJvciBtZXNzYWdlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBzZXRFcnJvcjogZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgICAgc2xpZGUuaGFzRXJyb3IgPSB0cnVlO1xyXG5cclxuICAgICAgc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgLnRyaWdnZXIoXCJvblJlc2V0XCIpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLVwiICsgc2xpZGUuY29udGVudFR5cGUpXHJcbiAgICAgICAgLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWVycm9yXCIpO1xyXG5cclxuICAgICAgc2xpZGUuY29udGVudFR5cGUgPSBcImh0bWxcIjtcclxuXHJcbiAgICAgIHRoaXMuc2V0Q29udGVudChzbGlkZSwgdGhpcy50cmFuc2xhdGUoc2xpZGUsIHNsaWRlLm9wdHMuZXJyb3JUcGwpKTtcclxuXHJcbiAgICAgIGlmIChzbGlkZS5wb3MgPT09IHRoaXMuY3VyclBvcykge1xyXG4gICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTaG93IGxvYWRpbmcgaWNvbiBpbnNpZGUgdGhlIHNsaWRlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgc2hvd0xvYWRpbmc6IGZ1bmN0aW9uKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIHNsaWRlID0gc2xpZGUgfHwgc2VsZi5jdXJyZW50O1xyXG5cclxuICAgICAgaWYgKHNsaWRlICYmICFzbGlkZS4kc3Bpbm5lcikge1xyXG4gICAgICAgIHNsaWRlLiRzcGlubmVyID0gJChzZWxmLnRyYW5zbGF0ZShzZWxmLCBzZWxmLm9wdHMuc3Bpbm5lclRwbCkpXHJcbiAgICAgICAgICAuYXBwZW5kVG8oc2xpZGUuJHNsaWRlKVxyXG4gICAgICAgICAgLmhpZGUoKVxyXG4gICAgICAgICAgLmZhZGVJbihcImZhc3RcIik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gUmVtb3ZlIGxvYWRpbmcgaWNvbiBmcm9tIHRoZSBzbGlkZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGhpZGVMb2FkaW5nOiBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBzbGlkZSA9IHNsaWRlIHx8IHNlbGYuY3VycmVudDtcclxuXHJcbiAgICAgIGlmIChzbGlkZSAmJiBzbGlkZS4kc3Bpbm5lcikge1xyXG4gICAgICAgIHNsaWRlLiRzcGlubmVyLnN0b3AoKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgZGVsZXRlIHNsaWRlLiRzcGlubmVyO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEFkanVzdG1lbnRzIGFmdGVyIHNsaWRlIGNvbnRlbnQgaGFzIGJlZW4gbG9hZGVkXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFmdGVyTG9hZDogZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgaWYgKHNlbGYuaXNDbG9zaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzbGlkZS5pc0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgc2xpZGUuaXNMb2FkZWQgPSB0cnVlO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKFwiYWZ0ZXJMb2FkXCIsIHNsaWRlKTtcclxuXHJcbiAgICAgIHNlbGYuaGlkZUxvYWRpbmcoc2xpZGUpO1xyXG5cclxuICAgICAgLy8gQWRkIHNtYWxsIGNsb3NlIGJ1dHRvblxyXG4gICAgICBpZiAoc2xpZGUub3B0cy5zbWFsbEJ0biAmJiAoIXNsaWRlLiRzbWFsbEJ0biB8fCAhc2xpZGUuJHNtYWxsQnRuLmxlbmd0aCkpIHtcclxuICAgICAgICBzbGlkZS4kc21hbGxCdG4gPSAkKHNlbGYudHJhbnNsYXRlKHNsaWRlLCBzbGlkZS5vcHRzLmJ0blRwbC5zbWFsbEJ0bikpLmFwcGVuZFRvKHNsaWRlLiRjb250ZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gRGlzYWJsZSByaWdodCBjbGlja1xyXG4gICAgICBpZiAoc2xpZGUub3B0cy5wcm90ZWN0ICYmIHNsaWRlLiRjb250ZW50ICYmICFzbGlkZS5oYXNFcnJvcikge1xyXG4gICAgICAgIHNsaWRlLiRjb250ZW50Lm9uKFwiY29udGV4dG1lbnUuZmJcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgICAgaWYgKGUuYnV0dG9uID09IDIpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBBZGQgZmFrZSBlbGVtZW50IG9uIHRvcCBvZiB0aGUgaW1hZ2VcclxuICAgICAgICAvLyBUaGlzIG1ha2VzIGEgYml0IGhhcmRlciBmb3IgdXNlciB0byBzZWxlY3QgaW1hZ2VcclxuICAgICAgICBpZiAoc2xpZGUudHlwZSA9PT0gXCJpbWFnZVwiKSB7XHJcbiAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtc3BhY2ViYWxsXCI+PC9kaXY+JykuYXBwZW5kVG8oc2xpZGUuJGNvbnRlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi5hZGp1c3RDYXB0aW9uKHNsaWRlKTtcclxuXHJcbiAgICAgIHNlbGYuYWRqdXN0TGF5b3V0KHNsaWRlKTtcclxuXHJcbiAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgIHNlbGYudXBkYXRlQ3Vyc29yKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYucmV2ZWFsQ29udGVudChzbGlkZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIFByZXZlbnQgY2FwdGlvbiBvdmVybGFwLFxyXG4gICAgLy8gZml4IGNzcyBpbmNvbnNpc3RlbmN5IGFjcm9zcyBicm93c2Vyc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFkanVzdENhcHRpb246IGZ1bmN0aW9uKHNsaWRlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2xpZGUgfHwgc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIGNhcHRpb24gPSBjdXJyZW50Lm9wdHMuY2FwdGlvbixcclxuICAgICAgICAkY2FwdGlvbiA9IHNlbGYuJHJlZnMuY2FwdGlvbixcclxuICAgICAgICBjYXB0aW9uSCA9IGZhbHNlO1xyXG5cclxuICAgICAgaWYgKGN1cnJlbnQub3B0cy5wcmV2ZW50Q2FwdGlvbk92ZXJsYXAgJiYgY2FwdGlvbiAmJiBjYXB0aW9uLmxlbmd0aCkge1xyXG4gICAgICAgIGlmIChjdXJyZW50LnBvcyAhPT0gc2VsZi5jdXJyUG9zKSB7XHJcbiAgICAgICAgICAkY2FwdGlvbiA9ICRjYXB0aW9uXHJcbiAgICAgICAgICAgIC5jbG9uZSgpXHJcbiAgICAgICAgICAgIC5lbXB0eSgpXHJcbiAgICAgICAgICAgIC5hcHBlbmRUbygkY2FwdGlvbi5wYXJlbnQoKSk7XHJcblxyXG4gICAgICAgICAgJGNhcHRpb24uaHRtbChjYXB0aW9uKTtcclxuXHJcbiAgICAgICAgICBjYXB0aW9uSCA9ICRjYXB0aW9uLm91dGVySGVpZ2h0KHRydWUpO1xyXG5cclxuICAgICAgICAgICRjYXB0aW9uLmVtcHR5KCkucmVtb3ZlKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLiRjYXB0aW9uKSB7XHJcbiAgICAgICAgICBjYXB0aW9uSCA9IHNlbGYuJGNhcHRpb24ub3V0ZXJIZWlnaHQodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjdXJyZW50LiRzbGlkZS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiLCBjYXB0aW9uSCB8fCBcIlwiKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTaW1wbGUgaGFjayB0byBmaXggaW5jb25zaXN0ZW5jeSBhY3Jvc3MgYnJvd3NlcnMsIGRlc2NyaWJlZCBoZXJlIChhZmZlY3RzIEVkZ2UsIHRvbyk6XHJcbiAgICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NDg1MThcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGFkanVzdExheW91dDogZnVuY3Rpb24oc2xpZGUpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzbGlkZSB8fCBzZWxmLmN1cnJlbnQsXHJcbiAgICAgICAgc2Nyb2xsSGVpZ2h0LFxyXG4gICAgICAgIG1hcmdpbkJvdHRvbSxcclxuICAgICAgICBpbmxpbmVQYWRkaW5nLFxyXG4gICAgICAgIGFjdHVhbFBhZGRpbmc7XHJcblxyXG4gICAgICBpZiAoY3VycmVudC5pc0xvYWRlZCAmJiBjdXJyZW50Lm9wdHMuZGlzYWJsZUxheW91dEZpeCAhPT0gdHJ1ZSkge1xyXG4gICAgICAgIGN1cnJlbnQuJGNvbnRlbnQuY3NzKFwibWFyZ2luLWJvdHRvbVwiLCBcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gSWYgd2Ugd291bGQgYWx3YXlzIHNldCBtYXJnaW4tYm90dG9tIGZvciB0aGUgY29udGVudCxcclxuICAgICAgICAvLyB0aGVuIGl0IHdvdWxkIHBvdGVudGlhbGx5IGJyZWFrIHZlcnRpY2FsIGFsaWduXHJcbiAgICAgICAgaWYgKGN1cnJlbnQuJGNvbnRlbnQub3V0ZXJIZWlnaHQoKSA+IGN1cnJlbnQuJHNsaWRlLmhlaWdodCgpICsgMC41KSB7XHJcbiAgICAgICAgICBpbmxpbmVQYWRkaW5nID0gY3VycmVudC4kc2xpZGVbMF0uc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXTtcclxuICAgICAgICAgIGFjdHVhbFBhZGRpbmcgPSBjdXJyZW50LiRzbGlkZS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiKTtcclxuXHJcbiAgICAgICAgICBpZiAocGFyc2VGbG9hdChhY3R1YWxQYWRkaW5nKSA+IDApIHtcclxuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gY3VycmVudC4kc2xpZGVbMF0uc2Nyb2xsSGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgY3VycmVudC4kc2xpZGUuY3NzKFwicGFkZGluZy1ib3R0b21cIiwgMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMoc2Nyb2xsSGVpZ2h0IC0gY3VycmVudC4kc2xpZGVbMF0uc2Nyb2xsSGVpZ2h0KSA8IDEpIHtcclxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBhY3R1YWxQYWRkaW5nO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdXJyZW50LiRzbGlkZS5jc3MoXCJwYWRkaW5nLWJvdHRvbVwiLCBpbmxpbmVQYWRkaW5nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGN1cnJlbnQuJGNvbnRlbnQuY3NzKFwibWFyZ2luLWJvdHRvbVwiLCBtYXJnaW5Cb3R0b20pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIE1ha2UgY29udGVudCB2aXNpYmxlXHJcbiAgICAvLyBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgcmlnaHQgYWZ0ZXIgY29udGVudCBoYXMgYmVlbiBsb2FkZWQgb3JcclxuICAgIC8vIHVzZXIgbmF2aWdhdGVzIGdhbGxlcnkgYW5kIHRyYW5zaXRpb24gc2hvdWxkIHN0YXJ0XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICByZXZlYWxDb250ZW50OiBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgJHNsaWRlID0gc2xpZGUuJHNsaWRlLFxyXG4gICAgICAgIGVuZCA9IGZhbHNlLFxyXG4gICAgICAgIHN0YXJ0ID0gZmFsc2UsXHJcbiAgICAgICAgaXNNb3ZlZCA9IHNlbGYuaXNNb3ZlZChzbGlkZSksXHJcbiAgICAgICAgaXNSZXZlYWxlZCA9IHNsaWRlLmlzUmV2ZWFsZWQsXHJcbiAgICAgICAgZWZmZWN0LFxyXG4gICAgICAgIGVmZmVjdENsYXNzTmFtZSxcclxuICAgICAgICBkdXJhdGlvbixcclxuICAgICAgICBvcGFjaXR5O1xyXG5cclxuICAgICAgc2xpZGUuaXNSZXZlYWxlZCA9IHRydWU7XHJcblxyXG4gICAgICBlZmZlY3QgPSBzbGlkZS5vcHRzW3NlbGYuZmlyc3RSdW4gPyBcImFuaW1hdGlvbkVmZmVjdFwiIDogXCJ0cmFuc2l0aW9uRWZmZWN0XCJdO1xyXG4gICAgICBkdXJhdGlvbiA9IHNsaWRlLm9wdHNbc2VsZi5maXJzdFJ1biA/IFwiYW5pbWF0aW9uRHVyYXRpb25cIiA6IFwidHJhbnNpdGlvbkR1cmF0aW9uXCJdO1xyXG5cclxuICAgICAgZHVyYXRpb24gPSBwYXJzZUludChzbGlkZS5mb3JjZWREdXJhdGlvbiA9PT0gdW5kZWZpbmVkID8gZHVyYXRpb24gOiBzbGlkZS5mb3JjZWREdXJhdGlvbiwgMTApO1xyXG5cclxuICAgICAgaWYgKGlzTW92ZWQgfHwgc2xpZGUucG9zICE9PSBzZWxmLmN1cnJQb3MgfHwgIWR1cmF0aW9uKSB7XHJcbiAgICAgICAgZWZmZWN0ID0gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIGNhbiB6b29tXHJcbiAgICAgIGlmIChlZmZlY3QgPT09IFwiem9vbVwiKSB7XHJcbiAgICAgICAgaWYgKHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zICYmIGR1cmF0aW9uICYmIHNsaWRlLnR5cGUgPT09IFwiaW1hZ2VcIiAmJiAhc2xpZGUuaGFzRXJyb3IgJiYgKHN0YXJ0ID0gc2VsZi5nZXRUaHVtYlBvcyhzbGlkZSkpKSB7XHJcbiAgICAgICAgICBlbmQgPSBzZWxmLmdldEZpdFBvcyhzbGlkZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVmZmVjdCA9IFwiZmFkZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gWm9vbSBhbmltYXRpb25cclxuICAgICAgLy8gPT09PT09PT09PT09PT1cclxuICAgICAgaWYgKGVmZmVjdCA9PT0gXCJ6b29tXCIpIHtcclxuICAgICAgICBzZWxmLmlzQW5pbWF0aW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgZW5kLnNjYWxlWCA9IGVuZC53aWR0aCAvIHN0YXJ0LndpZHRoO1xyXG4gICAgICAgIGVuZC5zY2FsZVkgPSBlbmQuaGVpZ2h0IC8gc3RhcnQuaGVpZ2h0O1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGFuaW1hdGUgb3BhY2l0eVxyXG4gICAgICAgIG9wYWNpdHkgPSBzbGlkZS5vcHRzLnpvb21PcGFjaXR5O1xyXG5cclxuICAgICAgICBpZiAob3BhY2l0eSA9PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgb3BhY2l0eSA9IE1hdGguYWJzKHNsaWRlLndpZHRoIC8gc2xpZGUuaGVpZ2h0IC0gc3RhcnQud2lkdGggLyBzdGFydC5oZWlnaHQpID4gMC4xO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG9wYWNpdHkpIHtcclxuICAgICAgICAgIHN0YXJ0Lm9wYWNpdHkgPSAwLjE7XHJcbiAgICAgICAgICBlbmQub3BhY2l0eSA9IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBEcmF3IGltYWdlIGF0IHN0YXJ0IHBvc2l0aW9uXHJcbiAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2xpZGUuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIiksIHN0YXJ0KTtcclxuXHJcbiAgICAgICAgZm9yY2VSZWRyYXcoc2xpZGUuJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAvLyBTdGFydCBhbmltYXRpb25cclxuICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoc2xpZGUuJGNvbnRlbnQsIGVuZCwgZHVyYXRpb24sIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2VsZi5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIHNlbGYuY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLnVwZGF0ZVNsaWRlKHNsaWRlKTtcclxuXHJcbiAgICAgIC8vIFNpbXBseSBzaG93IGNvbnRlbnQgaWYgbm8gZWZmZWN0XHJcbiAgICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgIGlmICghZWZmZWN0KSB7XHJcbiAgICAgICAgc2xpZGUuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIik7XHJcblxyXG4gICAgICAgIGlmICghaXNSZXZlYWxlZCAmJiBpc01vdmVkICYmIHNsaWRlLnR5cGUgPT09IFwiaW1hZ2VcIiAmJiAhc2xpZGUuaGFzRXJyb3IpIHtcclxuICAgICAgICAgIHNsaWRlLiRjb250ZW50LmhpZGUoKS5mYWRlSW4oXCJmYXN0XCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNsaWRlLnBvcyA9PT0gc2VsZi5jdXJyUG9zKSB7XHJcbiAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFByZXBhcmUgZm9yIENTUyB0cmFuc2l0b25cclxuICAgICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgICAkLmZhbmN5Ym94LnN0b3AoJHNsaWRlKTtcclxuXHJcbiAgICAgIC8vZWZmZWN0Q2xhc3NOYW1lID0gXCJmYW5jeWJveC1hbmltYXRlZCBmYW5jeWJveC1zbGlkZS0tXCIgKyAoc2xpZGUucG9zID49IHNlbGYucHJldlBvcyA/IFwibmV4dFwiIDogXCJwcmV2aW91c1wiKSArIFwiIGZhbmN5Ym94LWZ4LVwiICsgZWZmZWN0O1xyXG4gICAgICBlZmZlY3RDbGFzc05hbWUgPSBcImZhbmN5Ym94LXNsaWRlLS1cIiArIChzbGlkZS5wb3MgPj0gc2VsZi5wcmV2UG9zID8gXCJuZXh0XCIgOiBcInByZXZpb3VzXCIpICsgXCIgZmFuY3lib3gtYW5pbWF0ZWQgZmFuY3lib3gtZngtXCIgKyBlZmZlY3Q7XHJcblxyXG4gICAgICAkc2xpZGUuYWRkQ2xhc3MoZWZmZWN0Q2xhc3NOYW1lKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIpOyAvLy5hZGRDbGFzcyhlZmZlY3RDbGFzc05hbWUpO1xyXG5cclxuICAgICAgc2xpZGUuJGNvbnRlbnQucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1oaWRkZW5cIik7XHJcblxyXG4gICAgICAvLyBGb3JjZSByZWZsb3dcclxuICAgICAgZm9yY2VSZWRyYXcoJHNsaWRlKTtcclxuXHJcbiAgICAgIGlmIChzbGlkZS50eXBlICE9PSBcImltYWdlXCIpIHtcclxuICAgICAgICBzbGlkZS4kY29udGVudC5oaWRlKCkuc2hvdygwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgICRzbGlkZSxcclxuICAgICAgICBcImZhbmN5Ym94LXNsaWRlLS1jdXJyZW50XCIsXHJcbiAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAkc2xpZGUucmVtb3ZlQ2xhc3MoZWZmZWN0Q2xhc3NOYW1lKS5jc3Moe1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IFwiXCIsXHJcbiAgICAgICAgICAgIG9wYWNpdHk6IFwiXCJcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIGlmIChzbGlkZS5wb3MgPT09IHNlbGYuY3VyclBvcykge1xyXG4gICAgICAgICAgICBzZWxmLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cnVlXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENoZWNrIGlmIHdlIGNhbiBhbmQgaGF2ZSB0byB6b29tIGZyb20gdGh1bWJuYWlsXHJcbiAgICAvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGdldFRodW1iUG9zOiBmdW5jdGlvbihzbGlkZSkge1xyXG4gICAgICB2YXIgcmV6ID0gZmFsc2UsXHJcbiAgICAgICAgJHRodW1iID0gc2xpZGUuJHRodW1iLFxyXG4gICAgICAgIHRodW1iUG9zLFxyXG4gICAgICAgIGJ0dyxcclxuICAgICAgICBicncsXHJcbiAgICAgICAgYmJ3LFxyXG4gICAgICAgIGJsdztcclxuXHJcbiAgICAgIGlmICghJHRodW1iIHx8ICFpblZpZXdwb3J0KCR0aHVtYlswXSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRodW1iUG9zID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoJHRodW1iKTtcclxuXHJcbiAgICAgIGJ0dyA9IHBhcnNlRmxvYXQoJHRodW1iLmNzcyhcImJvcmRlci10b3Atd2lkdGhcIikgfHwgMCk7XHJcbiAgICAgIGJydyA9IHBhcnNlRmxvYXQoJHRodW1iLmNzcyhcImJvcmRlci1yaWdodC13aWR0aFwiKSB8fCAwKTtcclxuICAgICAgYmJ3ID0gcGFyc2VGbG9hdCgkdGh1bWIuY3NzKFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiKSB8fCAwKTtcclxuICAgICAgYmx3ID0gcGFyc2VGbG9hdCgkdGh1bWIuY3NzKFwiYm9yZGVyLWxlZnQtd2lkdGhcIikgfHwgMCk7XHJcblxyXG4gICAgICByZXogPSB7XHJcbiAgICAgICAgdG9wOiB0aHVtYlBvcy50b3AgKyBidHcsXHJcbiAgICAgICAgbGVmdDogdGh1bWJQb3MubGVmdCArIGJsdyxcclxuICAgICAgICB3aWR0aDogdGh1bWJQb3Mud2lkdGggLSBicncgLSBibHcsXHJcbiAgICAgICAgaGVpZ2h0OiB0aHVtYlBvcy5oZWlnaHQgLSBidHcgLSBiYncsXHJcbiAgICAgICAgc2NhbGVYOiAxLFxyXG4gICAgICAgIHNjYWxlWTogMVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIHRodW1iUG9zLndpZHRoID4gMCAmJiB0aHVtYlBvcy5oZWlnaHQgPiAwID8gcmV6IDogZmFsc2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEZpbmFsIGFkanVzdG1lbnRzIGFmdGVyIGN1cnJlbnQgZ2FsbGVyeSBpdGVtIGlzIG1vdmVkIHRvIHBvc2l0aW9uXHJcbiAgICAvLyBhbmQgaXRgcyBjb250ZW50IGlzIGxvYWRlZFxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuY3VycmVudCxcclxuICAgICAgICBzbGlkZXMgPSB7fSxcclxuICAgICAgICAkZWw7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc01vdmVkKCkgfHwgIWN1cnJlbnQuaXNMb2FkZWQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghY3VycmVudC5pc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgY3VycmVudC5pc0NvbXBsZXRlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgY3VycmVudC4kc2xpZGUuc2libGluZ3MoKS50cmlnZ2VyKFwib25SZXNldFwiKTtcclxuXHJcbiAgICAgICAgc2VsZi5wcmVsb2FkKFwiaW5saW5lXCIpO1xyXG5cclxuICAgICAgICAvLyBUcmlnZ2VyIGFueSBDU1MgdHJhbnNpdG9uIGluc2lkZSB0aGUgc2xpZGVcclxuICAgICAgICBmb3JjZVJlZHJhdyhjdXJyZW50LiRzbGlkZSk7XHJcblxyXG4gICAgICAgIGN1cnJlbnQuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWNvbXBsZXRlXCIpO1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgdW5uZWNlc3Nhcnkgc2xpZGVzXHJcbiAgICAgICAgJC5lYWNoKHNlbGYuc2xpZGVzLCBmdW5jdGlvbihrZXksIHNsaWRlKSB7XHJcbiAgICAgICAgICBpZiAoc2xpZGUucG9zID49IHNlbGYuY3VyclBvcyAtIDEgJiYgc2xpZGUucG9zIDw9IHNlbGYuY3VyclBvcyArIDEpIHtcclxuICAgICAgICAgICAgc2xpZGVzW3NsaWRlLnBvc10gPSBzbGlkZTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoc2xpZGUpIHtcclxuICAgICAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRzbGlkZSk7XHJcblxyXG4gICAgICAgICAgICBzbGlkZS4kc2xpZGUub2ZmKCkucmVtb3ZlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNlbGYuc2xpZGVzID0gc2xpZGVzO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLmlzQW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICBzZWxmLnVwZGF0ZUN1cnNvcigpO1xyXG5cclxuICAgICAgc2VsZi50cmlnZ2VyKFwiYWZ0ZXJTaG93XCIpO1xyXG5cclxuICAgICAgLy8gQXV0b3BsYXkgZmlyc3QgaHRtbDUgdmlkZW8vYXVkaW9cclxuICAgICAgaWYgKCEhY3VycmVudC5vcHRzLnZpZGVvLmF1dG9TdGFydCkge1xyXG4gICAgICAgIGN1cnJlbnQuJHNsaWRlXHJcbiAgICAgICAgICAuZmluZChcInZpZGVvLGF1ZGlvXCIpXHJcbiAgICAgICAgICAuZmlsdGVyKFwiOnZpc2libGU6Zmlyc3RcIilcclxuICAgICAgICAgIC50cmlnZ2VyKFwicGxheVwiKVxyXG4gICAgICAgICAgLm9uZShcImVuZGVkXCIsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy53ZWJraXRFeGl0RnVsbHNjcmVlbikge1xyXG4gICAgICAgICAgICAgIHRoaXMud2Via2l0RXhpdEZ1bGxzY3JlZW4oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2VsZi5uZXh0KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVHJ5IHRvIGZvY3VzIG9uIHRoZSBmaXJzdCBmb2N1c2FibGUgZWxlbWVudFxyXG4gICAgICBpZiAoY3VycmVudC5vcHRzLmF1dG9Gb2N1cyAmJiBjdXJyZW50LmNvbnRlbnRUeXBlID09PSBcImh0bWxcIikge1xyXG4gICAgICAgIC8vIExvb2sgZm9yIHRoZSBmaXJzdCBpbnB1dCB3aXRoIGF1dG9mb2N1cyBhdHRyaWJ1dGVcclxuICAgICAgICAkZWwgPSBjdXJyZW50LiRjb250ZW50LmZpbmQoXCJpbnB1dFthdXRvZm9jdXNdOmVuYWJsZWQ6dmlzaWJsZTpmaXJzdFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCRlbC5sZW5ndGgpIHtcclxuICAgICAgICAgICRlbC50cmlnZ2VyKFwiZm9jdXNcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHNlbGYuZm9jdXMobnVsbCwgdHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBdm9pZCBqdW1waW5nXHJcbiAgICAgIGN1cnJlbnQuJHNsaWRlLnNjcm9sbFRvcCgwKS5zY3JvbGxMZWZ0KDApO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBQcmVsb2FkIG5leHQgYW5kIHByZXZpb3VzIHNsaWRlc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBwcmVsb2FkOiBmdW5jdGlvbih0eXBlKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBwcmV2LFxyXG4gICAgICAgIG5leHQ7XHJcblxyXG4gICAgICBpZiAoc2VsZi5ncm91cC5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBuZXh0ID0gc2VsZi5zbGlkZXNbc2VsZi5jdXJyUG9zICsgMV07XHJcbiAgICAgIHByZXYgPSBzZWxmLnNsaWRlc1tzZWxmLmN1cnJQb3MgLSAxXTtcclxuXHJcbiAgICAgIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gdHlwZSkge1xyXG4gICAgICAgIHNlbGYubG9hZFNsaWRlKHByZXYpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAobmV4dCAmJiBuZXh0LnR5cGUgPT09IHR5cGUpIHtcclxuICAgICAgICBzZWxmLmxvYWRTbGlkZShuZXh0KTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBUcnkgdG8gZmluZCBhbmQgZm9jdXMgb24gdGhlIGZpcnN0IGZvY3VzYWJsZSBlbGVtZW50XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZm9jdXM6IGZ1bmN0aW9uKGUsIGZpcnN0UnVuKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBmb2N1c2FibGVTdHIgPSBbXHJcbiAgICAgICAgICBcImFbaHJlZl1cIixcclxuICAgICAgICAgIFwiYXJlYVtocmVmXVwiLFxyXG4gICAgICAgICAgJ2lucHV0Om5vdChbZGlzYWJsZWRdKTpub3QoW3R5cGU9XCJoaWRkZW5cIl0pOm5vdChbYXJpYS1oaWRkZW5dKScsXHJcbiAgICAgICAgICBcInNlbGVjdDpub3QoW2Rpc2FibGVkXSk6bm90KFthcmlhLWhpZGRlbl0pXCIsXHJcbiAgICAgICAgICBcInRleHRhcmVhOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSlcIixcclxuICAgICAgICAgIFwiYnV0dG9uOm5vdChbZGlzYWJsZWRdKTpub3QoW2FyaWEtaGlkZGVuXSlcIixcclxuICAgICAgICAgIFwiaWZyYW1lXCIsXHJcbiAgICAgICAgICBcIm9iamVjdFwiLFxyXG4gICAgICAgICAgXCJlbWJlZFwiLFxyXG4gICAgICAgICAgXCJbY29udGVudGVkaXRhYmxlXVwiLFxyXG4gICAgICAgICAgJ1t0YWJpbmRleF06bm90KFt0YWJpbmRleF49XCItXCJdKSdcclxuICAgICAgICBdLmpvaW4oXCIsXCIpLFxyXG4gICAgICAgIGZvY3VzYWJsZUl0ZW1zLFxyXG4gICAgICAgIGZvY3VzZWRJdGVtSW5kZXg7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChlIHx8ICFzZWxmLmN1cnJlbnQgfHwgIXNlbGYuY3VycmVudC5pc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgLy8gRm9jdXMgb24gYW55IGVsZW1lbnQgaW5zaWRlIGZhbmN5Ym94XHJcbiAgICAgICAgZm9jdXNhYmxlSXRlbXMgPSBzZWxmLiRyZWZzLmNvbnRhaW5lci5maW5kKFwiKjp2aXNpYmxlXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEZvY3VzIGluc2lkZSBjdXJyZW50IHNsaWRlXHJcbiAgICAgICAgZm9jdXNhYmxlSXRlbXMgPSBzZWxmLmN1cnJlbnQuJHNsaWRlLmZpbmQoXCIqOnZpc2libGVcIiArIChmaXJzdFJ1biA/IFwiOm5vdCguZmFuY3lib3gtY2xvc2Utc21hbGwpXCIgOiBcIlwiKSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvY3VzYWJsZUl0ZW1zID0gZm9jdXNhYmxlSXRlbXMuZmlsdGVyKGZvY3VzYWJsZVN0cikuZmlsdGVyKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiAkKHRoaXMpLmNzcyhcInZpc2liaWxpdHlcIikgIT09IFwiaGlkZGVuXCIgJiYgISQodGhpcykuaGFzQ2xhc3MoXCJkaXNhYmxlZFwiKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoZm9jdXNhYmxlSXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgZm9jdXNlZEl0ZW1JbmRleCA9IGZvY3VzYWJsZUl0ZW1zLmluZGV4KGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpO1xyXG5cclxuICAgICAgICBpZiAoZSAmJiBlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAvLyBCYWNrIHRhYlxyXG4gICAgICAgICAgaWYgKGZvY3VzZWRJdGVtSW5kZXggPCAwIHx8IGZvY3VzZWRJdGVtSW5kZXggPT0gMCkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgICAgICBmb2N1c2FibGVJdGVtcy5lcShmb2N1c2FibGVJdGVtcy5sZW5ndGggLSAxKS50cmlnZ2VyKFwiZm9jdXNcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIE91dHNpZGUgb3IgRm9yd2FyZCB0YWJcclxuICAgICAgICAgIGlmIChmb2N1c2VkSXRlbUluZGV4IDwgMCB8fCBmb2N1c2VkSXRlbUluZGV4ID09IGZvY3VzYWJsZUl0ZW1zLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzYWJsZUl0ZW1zLmVxKDApLnRyaWdnZXIoXCJmb2N1c1wiKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIudHJpZ2dlcihcImZvY3VzXCIpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEFjdGl2YXRlcyBjdXJyZW50IGluc3RhbmNlIC0gYnJpbmdzIGNvbnRhaW5lciB0byB0aGUgZnJvbnQgYW5kIGVuYWJsZXMga2V5Ym9hcmQsXHJcbiAgICAvLyBub3RpZmllcyBvdGhlciBpbnN0YW5jZXMgYWJvdXQgZGVhY3RpdmF0aW5nXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhY3RpdmF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgIC8vIERlYWN0aXZhdGUgYWxsIGluc3RhbmNlc1xyXG4gICAgICAkKFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBpbnN0YW5jZSA9ICQodGhpcykuZGF0YShcIkZhbmN5Qm94XCIpO1xyXG5cclxuICAgICAgICAvLyBTa2lwIHNlbGYgYW5kIGNsb3NpbmcgaW5zdGFuY2VzXHJcbiAgICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmlkICE9PSBzZWxmLmlkICYmICFpbnN0YW5jZS5pc0Nsb3NpbmcpIHtcclxuICAgICAgICAgIGluc3RhbmNlLnRyaWdnZXIoXCJvbkRlYWN0aXZhdGVcIik7XHJcblxyXG4gICAgICAgICAgaW5zdGFuY2UucmVtb3ZlRXZlbnRzKCk7XHJcblxyXG4gICAgICAgICAgaW5zdGFuY2UuaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHNlbGYuaXNWaXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgIGlmIChzZWxmLmN1cnJlbnQgfHwgc2VsZi5pc0lkbGUpIHtcclxuICAgICAgICBzZWxmLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICBzZWxmLnVwZGF0ZUNvbnRyb2xzKCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYudHJpZ2dlcihcIm9uQWN0aXZhdGVcIik7XHJcblxyXG4gICAgICBzZWxmLmFkZEV2ZW50cygpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTdGFydCBjbG9zaW5nIHByb2NlZHVyZVxyXG4gICAgLy8gVGhpcyB3aWxsIHN0YXJ0IFwiem9vbS1vdXRcIiBhbmltYXRpb24gaWYgbmVlZGVkIGFuZCBjbGVhbiBldmVyeXRoaW5nIHVwIGFmdGVyd2FyZHNcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGNsb3NlOiBmdW5jdGlvbihlLCBkKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIGVmZmVjdCxcclxuICAgICAgICBkdXJhdGlvbixcclxuICAgICAgICAkY29udGVudCxcclxuICAgICAgICBkb21SZWN0LFxyXG4gICAgICAgIG9wYWNpdHksXHJcbiAgICAgICAgc3RhcnQsXHJcbiAgICAgICAgZW5kO1xyXG5cclxuICAgICAgdmFyIGRvbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICBzZWxmLmNsZWFuVXAoZSk7XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0Nsb3NpbmcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuaXNDbG9zaW5nID0gdHJ1ZTtcclxuXHJcbiAgICAgIC8vIElmIGJlZm9yZUNsb3NlIGNhbGxiYWNrIHByZXZlbnRzIGNsb3NpbmcsIG1ha2Ugc3VyZSBjb250ZW50IGlzIGNlbnRlcmVkXHJcbiAgICAgIGlmIChzZWxmLnRyaWdnZXIoXCJiZWZvcmVDbG9zZVwiLCBlKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICBzZWxmLmlzQ2xvc2luZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgc2VsZi51cGRhdGUoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZW1vdmUgYWxsIGV2ZW50c1xyXG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbXVsdGlwbGUgaW5zdGFuY2VzLCB0aGV5IHdpbGwgYmUgc2V0IGFnYWluIGJ5IFwiYWN0aXZhdGVcIiBtZXRob2RcclxuICAgICAgc2VsZi5yZW1vdmVFdmVudHMoKTtcclxuXHJcbiAgICAgICRjb250ZW50ID0gY3VycmVudC4kY29udGVudDtcclxuICAgICAgZWZmZWN0ID0gY3VycmVudC5vcHRzLmFuaW1hdGlvbkVmZmVjdDtcclxuICAgICAgZHVyYXRpb24gPSAkLmlzTnVtZXJpYyhkKSA/IGQgOiBlZmZlY3QgPyBjdXJyZW50Lm9wdHMuYW5pbWF0aW9uRHVyYXRpb24gOiAwO1xyXG5cclxuICAgICAgY3VycmVudC4kc2xpZGUucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1zbGlkZS0tY29tcGxldGUgZmFuY3lib3gtc2xpZGUtLW5leHQgZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzIGZhbmN5Ym94LWFuaW1hdGVkXCIpO1xyXG5cclxuICAgICAgaWYgKGUgIT09IHRydWUpIHtcclxuICAgICAgICAkLmZhbmN5Ym94LnN0b3AoY3VycmVudC4kc2xpZGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVmZmVjdCA9IGZhbHNlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBSZW1vdmUgb3RoZXIgc2xpZGVzXHJcbiAgICAgIGN1cnJlbnQuJHNsaWRlXHJcbiAgICAgICAgLnNpYmxpbmdzKClcclxuICAgICAgICAudHJpZ2dlcihcIm9uUmVzZXRcIilcclxuICAgICAgICAucmVtb3ZlKCk7XHJcblxyXG4gICAgICAvLyBUcmlnZ2VyIGFuaW1hdGlvbnNcclxuICAgICAgaWYgKGR1cmF0aW9uKSB7XHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXJcclxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLW9wZW5cIilcclxuICAgICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLWNsb3NpbmdcIilcclxuICAgICAgICAgIC5jc3MoXCJ0cmFuc2l0aW9uLWR1cmF0aW9uXCIsIGR1cmF0aW9uICsgXCJtc1wiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2xlYW4gdXBcclxuICAgICAgc2VsZi5oaWRlTG9hZGluZyhjdXJyZW50KTtcclxuXHJcbiAgICAgIHNlbGYuaGlkZUNvbnRyb2xzKHRydWUpO1xyXG5cclxuICAgICAgc2VsZi51cGRhdGVDdXJzb3IoKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIHBvc3NpYmxlIHRvIHpvb20tb3V0XHJcbiAgICAgIGlmIChcclxuICAgICAgICBlZmZlY3QgPT09IFwiem9vbVwiICYmXHJcbiAgICAgICAgISgkY29udGVudCAmJiBkdXJhdGlvbiAmJiBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiAmJiAhc2VsZi5pc01vdmVkKCkgJiYgIWN1cnJlbnQuaGFzRXJyb3IgJiYgKGVuZCA9IHNlbGYuZ2V0VGh1bWJQb3MoY3VycmVudCkpKVxyXG4gICAgICApIHtcclxuICAgICAgICBlZmZlY3QgPSBcImZhZGVcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVmZmVjdCA9PT0gXCJ6b29tXCIpIHtcclxuICAgICAgICAkLmZhbmN5Ym94LnN0b3AoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBkb21SZWN0ID0gJC5mYW5jeWJveC5nZXRUcmFuc2xhdGUoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICBzdGFydCA9IHtcclxuICAgICAgICAgIHRvcDogZG9tUmVjdC50b3AsXHJcbiAgICAgICAgICBsZWZ0OiBkb21SZWN0LmxlZnQsXHJcbiAgICAgICAgICBzY2FsZVg6IGRvbVJlY3Qud2lkdGggLyBlbmQud2lkdGgsXHJcbiAgICAgICAgICBzY2FsZVk6IGRvbVJlY3QuaGVpZ2h0IC8gZW5kLmhlaWdodCxcclxuICAgICAgICAgIHdpZHRoOiBlbmQud2lkdGgsXHJcbiAgICAgICAgICBoZWlnaHQ6IGVuZC5oZWlnaHRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGFuaW1hdGUgb3BhY2l0eVxyXG4gICAgICAgIG9wYWNpdHkgPSBjdXJyZW50Lm9wdHMuem9vbU9wYWNpdHk7XHJcblxyXG4gICAgICAgIGlmIChvcGFjaXR5ID09IFwiYXV0b1wiKSB7XHJcbiAgICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMoY3VycmVudC53aWR0aCAvIGN1cnJlbnQuaGVpZ2h0IC0gZW5kLndpZHRoIC8gZW5kLmhlaWdodCkgPiAwLjE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAob3BhY2l0eSkge1xyXG4gICAgICAgICAgZW5kLm9wYWNpdHkgPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoJGNvbnRlbnQsIHN0YXJ0KTtcclxuXHJcbiAgICAgICAgZm9yY2VSZWRyYXcoJGNvbnRlbnQpO1xyXG5cclxuICAgICAgICAkLmZhbmN5Ym94LmFuaW1hdGUoJGNvbnRlbnQsIGVuZCwgZHVyYXRpb24sIGRvbmUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGVmZmVjdCAmJiBkdXJhdGlvbikge1xyXG4gICAgICAgICQuZmFuY3lib3guYW5pbWF0ZShcclxuICAgICAgICAgIGN1cnJlbnQuJHNsaWRlLmFkZENsYXNzKFwiZmFuY3lib3gtc2xpZGUtLXByZXZpb3VzXCIpLnJlbW92ZUNsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWN1cnJlbnRcIiksXHJcbiAgICAgICAgICBcImZhbmN5Ym94LWFuaW1hdGVkIGZhbmN5Ym94LWZ4LVwiICsgZWZmZWN0LFxyXG4gICAgICAgICAgZHVyYXRpb24sXHJcbiAgICAgICAgICBkb25lXHJcbiAgICAgICAgKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBJZiBza2lwIGFuaW1hdGlvblxyXG4gICAgICAgIGlmIChlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICBzZXRUaW1lb3V0KGRvbmUsIGR1cmF0aW9uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZG9uZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEZpbmFsIGFkanVzdG1lbnRzIGFmdGVyIHJlbW92aW5nIHRoZSBpbnN0YW5jZVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgY2xlYW5VcDogZnVuY3Rpb24oZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgaW5zdGFuY2UsXHJcbiAgICAgICAgJGZvY3VzID0gc2VsZi5jdXJyZW50Lm9wdHMuJG9yaWcsXHJcbiAgICAgICAgeCxcclxuICAgICAgICB5O1xyXG5cclxuICAgICAgc2VsZi5jdXJyZW50LiRzbGlkZS50cmlnZ2VyKFwib25SZXNldFwiKTtcclxuXHJcbiAgICAgIHNlbGYuJHJlZnMuY29udGFpbmVyLmVtcHR5KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgICBzZWxmLnRyaWdnZXIoXCJhZnRlckNsb3NlXCIsIGUpO1xyXG5cclxuICAgICAgLy8gUGxhY2UgYmFjayBmb2N1c1xyXG4gICAgICBpZiAoISFzZWxmLmN1cnJlbnQub3B0cy5iYWNrRm9jdXMpIHtcclxuICAgICAgICBpZiAoISRmb2N1cyB8fCAhJGZvY3VzLmxlbmd0aCB8fCAhJGZvY3VzLmlzKFwiOnZpc2libGVcIikpIHtcclxuICAgICAgICAgICRmb2N1cyA9IHNlbGYuJHRyaWdnZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJGZvY3VzICYmICRmb2N1cy5sZW5ndGgpIHtcclxuICAgICAgICAgIHggPSB3aW5kb3cuc2Nyb2xsWDtcclxuICAgICAgICAgIHkgPSB3aW5kb3cuc2Nyb2xsWTtcclxuXHJcbiAgICAgICAgICAkZm9jdXMudHJpZ2dlcihcImZvY3VzXCIpO1xyXG5cclxuICAgICAgICAgICQoXCJodG1sLCBib2R5XCIpXHJcbiAgICAgICAgICAgIC5zY3JvbGxUb3AoeSlcclxuICAgICAgICAgICAgLnNjcm9sbExlZnQoeCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzZWxmLmN1cnJlbnQgPSBudWxsO1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgYXJlIG90aGVyIGluc3RhbmNlc1xyXG4gICAgICBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmFjdGl2YXRlKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgJChcImJvZHlcIikucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1hY3RpdmUgY29tcGVuc2F0ZS1mb3Itc2Nyb2xsYmFyXCIpO1xyXG5cclxuICAgICAgICAkKFwiI2ZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCIpLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIENhbGwgY2FsbGJhY2sgYW5kIHRyaWdnZXIgYW4gZXZlbnRcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lLCBzbGlkZSkge1xyXG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgb2JqID0gc2xpZGUgJiYgc2xpZGUub3B0cyA/IHNsaWRlIDogc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIHJlejtcclxuXHJcbiAgICAgIGlmIChvYmopIHtcclxuICAgICAgICBhcmdzLnVuc2hpZnQob2JqKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBvYmogPSBzZWxmO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhcmdzLnVuc2hpZnQoc2VsZik7XHJcblxyXG4gICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9iai5vcHRzW25hbWVdKSkge1xyXG4gICAgICAgIHJleiA9IG9iai5vcHRzW25hbWVdLmFwcGx5KG9iaiwgYXJncyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZXogPT09IGZhbHNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlejtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKG5hbWUgPT09IFwiYWZ0ZXJDbG9zZVwiIHx8ICFzZWxmLiRyZWZzKSB7XHJcbiAgICAgICAgJEQudHJpZ2dlcihuYW1lICsgXCIuZmJcIiwgYXJncyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIudHJpZ2dlcihuYW1lICsgXCIuZmJcIiwgYXJncyk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLy8gVXBkYXRlIGluZm9iYXIgdmFsdWVzLCBuYXZpZ2F0aW9uIGJ1dHRvbiBzdGF0ZXMgYW5kIHJldmVhbCBjYXB0aW9uXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICB1cGRhdGVDb250cm9sczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBjdXJyZW50ID0gc2VsZi5jdXJyZW50LFxyXG4gICAgICAgIGluZGV4ID0gY3VycmVudC5pbmRleCxcclxuICAgICAgICAkY29udGFpbmVyID0gc2VsZi4kcmVmcy5jb250YWluZXIsXHJcbiAgICAgICAgJGNhcHRpb24gPSBzZWxmLiRyZWZzLmNhcHRpb24sXHJcbiAgICAgICAgY2FwdGlvbiA9IGN1cnJlbnQub3B0cy5jYXB0aW9uO1xyXG5cclxuICAgICAgLy8gUmVjYWxjdWxhdGUgY29udGVudCBkaW1lbnNpb25zXHJcbiAgICAgIGN1cnJlbnQuJHNsaWRlLnRyaWdnZXIoXCJyZWZyZXNoXCIpO1xyXG5cclxuICAgICAgc2VsZi4kY2FwdGlvbiA9IGNhcHRpb24gJiYgY2FwdGlvbi5sZW5ndGggPyAkY2FwdGlvbi5odG1sKGNhcHRpb24pIDogbnVsbDtcclxuXHJcbiAgICAgIGlmICghc2VsZi5oYXNIaWRkZW5Db250cm9scyAmJiAhc2VsZi5pc0lkbGUpIHtcclxuICAgICAgICBzZWxmLnNob3dDb250cm9scygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgaW5mbyBhbmQgbmF2aWdhdGlvbiBlbGVtZW50c1xyXG4gICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1jb3VudF1cIikuaHRtbChzZWxmLmdyb3VwLmxlbmd0aCk7XHJcbiAgICAgICRjb250YWluZXIuZmluZChcIltkYXRhLWZhbmN5Ym94LWluZGV4XVwiKS5odG1sKGluZGV4ICsgMSk7XHJcblxyXG4gICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1wcmV2XVwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgIWN1cnJlbnQub3B0cy5sb29wICYmIGluZGV4IDw9IDApO1xyXG4gICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1uZXh0XVwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgIWN1cnJlbnQub3B0cy5sb29wICYmIGluZGV4ID49IHNlbGYuZ3JvdXAubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICBpZiAoY3VycmVudC50eXBlID09PSBcImltYWdlXCIpIHtcclxuICAgICAgICAvLyBSZS1lbmFibGUgYnV0dG9uczsgdXBkYXRlIGRvd25sb2FkIGJ1dHRvbiBzb3VyY2VcclxuICAgICAgICAkY29udGFpbmVyXHJcbiAgICAgICAgICAuZmluZChcIltkYXRhLWZhbmN5Ym94LXpvb21dXCIpXHJcbiAgICAgICAgICAuc2hvdygpXHJcbiAgICAgICAgICAuZW5kKClcclxuICAgICAgICAgIC5maW5kKFwiW2RhdGEtZmFuY3lib3gtZG93bmxvYWRdXCIpXHJcbiAgICAgICAgICAuYXR0cihcImhyZWZcIiwgY3VycmVudC5vcHRzLmltYWdlLnNyYyB8fCBjdXJyZW50LnNyYylcclxuICAgICAgICAgIC5zaG93KCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudC5vcHRzLnRvb2xiYXIpIHtcclxuICAgICAgICAkY29udGFpbmVyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1kb3dubG9hZF0sW2RhdGEtZmFuY3lib3gtem9vbV1cIikuaGlkZSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBNYWtlIHN1cmUgZm9jdXMgaXMgbm90IG9uIGRpc2FibGVkIGJ1dHRvbi9lbGVtZW50XHJcbiAgICAgIGlmICgkKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKFwiOmhpZGRlbixbZGlzYWJsZWRdXCIpKSB7XHJcbiAgICAgICAgc2VsZi4kcmVmcy5jb250YWluZXIudHJpZ2dlcihcImZvY3VzXCIpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEhpZGUgdG9vbGJhciBhbmQgY2FwdGlvblxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgaGlkZUNvbnRyb2xzOiBmdW5jdGlvbihhbmRDYXB0aW9uKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBhcnIgPSBbXCJpbmZvYmFyXCIsIFwidG9vbGJhclwiLCBcIm5hdlwiXTtcclxuXHJcbiAgICAgIGlmIChhbmRDYXB0aW9uIHx8ICFzZWxmLmN1cnJlbnQub3B0cy5wcmV2ZW50Q2FwdGlvbk92ZXJsYXApIHtcclxuICAgICAgICBhcnIucHVzaChcImNhcHRpb25cIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuJHJlZnMuY29udGFpbmVyLnJlbW92ZUNsYXNzKFxyXG4gICAgICAgIGFyclxyXG4gICAgICAgICAgLm1hcChmdW5jdGlvbihpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcImZhbmN5Ym94LXNob3ctXCIgKyBpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5qb2luKFwiIFwiKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5oYXNIaWRkZW5Db250cm9scyA9IHRydWU7XHJcbiAgICB9LFxyXG5cclxuICAgIHNob3dDb250cm9sczogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBvcHRzID0gc2VsZi5jdXJyZW50ID8gc2VsZi5jdXJyZW50Lm9wdHMgOiBzZWxmLm9wdHMsXHJcbiAgICAgICAgJGNvbnRhaW5lciA9IHNlbGYuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgICAgc2VsZi5oYXNIaWRkZW5Db250cm9scyA9IGZhbHNlO1xyXG4gICAgICBzZWxmLmlkbGVTZWNvbmRzQ291bnRlciA9IDA7XHJcblxyXG4gICAgICAkY29udGFpbmVyXHJcbiAgICAgICAgLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy10b29sYmFyXCIsICEhKG9wdHMudG9vbGJhciAmJiBvcHRzLmJ1dHRvbnMpKVxyXG4gICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctaW5mb2JhclwiLCAhIShvcHRzLmluZm9iYXIgJiYgc2VsZi5ncm91cC5sZW5ndGggPiAxKSlcclxuICAgICAgICAudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1zaG93LWNhcHRpb25cIiwgISFzZWxmLiRjYXB0aW9uKVxyXG4gICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LXNob3ctbmF2XCIsICEhKG9wdHMuYXJyb3dzICYmIHNlbGYuZ3JvdXAubGVuZ3RoID4gMSkpXHJcbiAgICAgICAgLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtaXMtbW9kYWxcIiwgISFvcHRzLm1vZGFsKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVG9nZ2xlIHRvb2xiYXIgYW5kIGNhcHRpb25cclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdG9nZ2xlQ29udHJvbHM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAodGhpcy5oYXNIaWRkZW5Db250cm9scykge1xyXG4gICAgICAgIHRoaXMuc2hvd0NvbnRyb2xzKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5oaWRlQ29udHJvbHMoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkLmZhbmN5Ym94ID0ge1xyXG4gICAgdmVyc2lvbjogXCIzLjUuMlwiLFxyXG4gICAgZGVmYXVsdHM6IGRlZmF1bHRzLFxyXG5cclxuICAgIC8vIEdldCBjdXJyZW50IGluc3RhbmNlIGFuZCBleGVjdXRlIGEgY29tbWFuZC5cclxuICAgIC8vXHJcbiAgICAvLyBFeGFtcGxlcyBvZiB1c2FnZTpcclxuICAgIC8vXHJcbiAgICAvLyAgICRpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuICAgIC8vICAgJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpLmp1bXBUbyggMSApO1xyXG4gICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCAnanVtcFRvJywgMSApO1xyXG4gICAgLy8gICAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCBmdW5jdGlvbigpIHtcclxuICAgIC8vICAgICAgIGNvbnNvbGUuaW5mbyggdGhpcy5jdXJySW5kZXggKTtcclxuICAgIC8vICAgfSk7XHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBnZXRJbnN0YW5jZTogZnVuY3Rpb24oY29tbWFuZCkge1xyXG4gICAgICB2YXIgaW5zdGFuY2UgPSAkKCcuZmFuY3lib3gtY29udGFpbmVyOm5vdChcIi5mYW5jeWJveC1pcy1jbG9zaW5nXCIpOmxhc3QnKS5kYXRhKFwiRmFuY3lCb3hcIiksXHJcbiAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBGYW5jeUJveCkge1xyXG4gICAgICAgIGlmICgkLnR5cGUoY29tbWFuZCkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgIGluc3RhbmNlW2NvbW1hbmRdLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCQudHlwZShjb21tYW5kKSA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICBjb21tYW5kLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDcmVhdGUgbmV3IGluc3RhbmNlXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgb3BlbjogZnVuY3Rpb24oaXRlbXMsIG9wdHMsIGluZGV4KSB7XHJcbiAgICAgIHJldHVybiBuZXcgRmFuY3lCb3goaXRlbXMsIG9wdHMsIGluZGV4KTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQ2xvc2UgY3VycmVudCBvciBhbGwgaW5zdGFuY2VzXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBjbG9zZTogZnVuY3Rpb24oYWxsKSB7XHJcbiAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgIGluc3RhbmNlLmNsb3NlKCk7XHJcblxyXG4gICAgICAgIC8vIFRyeSB0byBmaW5kIGFuZCBjbG9zZSBuZXh0IGluc3RhbmNlXHJcbiAgICAgICAgaWYgKGFsbCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgdGhpcy5jbG9zZShhbGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBDbG9zZSBhbGwgaW5zdGFuY2VzIGFuZCB1bmJpbmQgYWxsIGV2ZW50c1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5jbG9zZSh0cnVlKTtcclxuXHJcbiAgICAgICRELmFkZChcImJvZHlcIikub2ZmKFwiY2xpY2suZmItc3RhcnRcIiwgXCIqKlwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gVHJ5IHRvIGRldGVjdCBtb2JpbGUgZGV2aWNlc1xyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIGlzTW9iaWxlOiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCksXHJcblxyXG4gICAgLy8gRGV0ZWN0IGlmICd0cmFuc2xhdGUzZCcgc3VwcG9ydCBpcyBhdmFpbGFibGVcclxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgdXNlM2Q6IChmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlICYmXHJcbiAgICAgICAgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZGl2KSAmJlxyXG4gICAgICAgIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRpdikuZ2V0UHJvcGVydHlWYWx1ZShcInRyYW5zZm9ybVwiKSAmJlxyXG4gICAgICAgICEoZG9jdW1lbnQuZG9jdW1lbnRNb2RlICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8IDExKVxyXG4gICAgICApO1xyXG4gICAgfSkoKSxcclxuXHJcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGN1cnJlbnQgdmlzdWFsIHN0YXRlIG9mIGFuIGVsZW1lbnRcclxuICAgIC8vIHJldHVybnMgYXJyYXlbIHRvcCwgbGVmdCwgaG9yaXpvbnRhbC1zY2FsZSwgdmVydGljYWwtc2NhbGUsIG9wYWNpdHkgXVxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgZ2V0VHJhbnNsYXRlOiBmdW5jdGlvbigkZWwpIHtcclxuICAgICAgdmFyIGRvbVJlY3Q7XHJcblxyXG4gICAgICBpZiAoISRlbCB8fCAhJGVsLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZG9tUmVjdCA9ICRlbFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9wOiBkb21SZWN0LnRvcCB8fCAwLFxyXG4gICAgICAgIGxlZnQ6IGRvbVJlY3QubGVmdCB8fCAwLFxyXG4gICAgICAgIHdpZHRoOiBkb21SZWN0LndpZHRoLFxyXG4gICAgICAgIGhlaWdodDogZG9tUmVjdC5oZWlnaHQsXHJcbiAgICAgICAgb3BhY2l0eTogcGFyc2VGbG9hdCgkZWwuY3NzKFwib3BhY2l0eVwiKSlcclxuICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gU2hvcnRjdXQgZm9yIHNldHRpbmcgXCJ0cmFuc2xhdGUzZFwiIHByb3BlcnRpZXMgZm9yIGVsZW1lbnRcclxuICAgIC8vIENhbiBzZXQgYmUgdXNlZCB0byBzZXQgb3BhY2l0eSwgdG9vXHJcbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgIHNldFRyYW5zbGF0ZTogZnVuY3Rpb24oJGVsLCBwcm9wcykge1xyXG4gICAgICB2YXIgc3RyID0gXCJcIixcclxuICAgICAgICBjc3MgPSB7fTtcclxuXHJcbiAgICAgIGlmICghJGVsIHx8ICFwcm9wcykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHByb3BzLmxlZnQgIT09IHVuZGVmaW5lZCB8fCBwcm9wcy50b3AgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN0ciA9XHJcbiAgICAgICAgICAocHJvcHMubGVmdCA9PT0gdW5kZWZpbmVkID8gJGVsLnBvc2l0aW9uKCkubGVmdCA6IHByb3BzLmxlZnQpICtcclxuICAgICAgICAgIFwicHgsIFwiICtcclxuICAgICAgICAgIChwcm9wcy50b3AgPT09IHVuZGVmaW5lZCA/ICRlbC5wb3NpdGlvbigpLnRvcCA6IHByb3BzLnRvcCkgK1xyXG4gICAgICAgICAgXCJweFwiO1xyXG5cclxuICAgICAgICBpZiAodGhpcy51c2UzZCkge1xyXG4gICAgICAgICAgc3RyID0gXCJ0cmFuc2xhdGUzZChcIiArIHN0ciArIFwiLCAwcHgpXCI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHN0ciA9IFwidHJhbnNsYXRlKFwiICsgc3RyICsgXCIpXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMuc2NhbGVYICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuc2NhbGVZICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBzdHIgKz0gXCIgc2NhbGUoXCIgKyBwcm9wcy5zY2FsZVggKyBcIiwgXCIgKyBwcm9wcy5zY2FsZVkgKyBcIilcIjtcclxuICAgICAgfSBlbHNlIGlmIChwcm9wcy5zY2FsZVggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHN0ciArPSBcIiBzY2FsZVgoXCIgKyBwcm9wcy5zY2FsZVggKyBcIilcIjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHN0ci5sZW5ndGgpIHtcclxuICAgICAgICBjc3MudHJhbnNmb3JtID0gc3RyO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMub3BhY2l0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgY3NzLm9wYWNpdHkgPSBwcm9wcy5vcGFjaXR5O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMud2lkdGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGNzcy53aWR0aCA9IHByb3BzLndpZHRoO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocHJvcHMuaGVpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBjc3MuaGVpZ2h0ID0gcHJvcHMuaGVpZ2h0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gJGVsLmNzcyhjc3MpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBTaW1wbGUgQ1NTIHRyYW5zaXRpb24gaGFuZGxlclxyXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICBhbmltYXRlOiBmdW5jdGlvbigkZWwsIHRvLCBkdXJhdGlvbiwgY2FsbGJhY2ssIGxlYXZlQW5pbWF0aW9uTmFtZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgZnJvbTtcclxuXHJcbiAgICAgIGlmICgkLmlzRnVuY3Rpb24oZHVyYXRpb24pKSB7XHJcbiAgICAgICAgY2FsbGJhY2sgPSBkdXJhdGlvbjtcclxuICAgICAgICBkdXJhdGlvbiA9IG51bGw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHNlbGYuc3RvcCgkZWwpO1xyXG5cclxuICAgICAgZnJvbSA9IHNlbGYuZ2V0VHJhbnNsYXRlKCRlbCk7XHJcblxyXG4gICAgICAkZWwub24odHJhbnNpdGlvbkVuZCwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIC8vIFNraXAgZXZlbnRzIGZyb20gY2hpbGQgZWxlbWVudHMgYW5kIHotaW5kZXggY2hhbmdlXHJcbiAgICAgICAgaWYgKGUgJiYgZS5vcmlnaW5hbEV2ZW50ICYmICghJGVsLmlzKGUub3JpZ2luYWxFdmVudC50YXJnZXQpIHx8IGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWUgPT0gXCJ6LWluZGV4XCIpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxmLnN0b3AoJGVsKTtcclxuXHJcbiAgICAgICAgaWYgKCQuaXNOdW1lcmljKGR1cmF0aW9uKSkge1xyXG4gICAgICAgICAgJGVsLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHRvKSkge1xyXG4gICAgICAgICAgaWYgKHRvLnNjYWxlWCAhPT0gdW5kZWZpbmVkICYmIHRvLnNjYWxlWSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHNlbGYuc2V0VHJhbnNsYXRlKCRlbCwge1xyXG4gICAgICAgICAgICAgIHRvcDogdG8udG9wLFxyXG4gICAgICAgICAgICAgIGxlZnQ6IHRvLmxlZnQsXHJcbiAgICAgICAgICAgICAgd2lkdGg6IGZyb20ud2lkdGggKiB0by5zY2FsZVgsXHJcbiAgICAgICAgICAgICAgaGVpZ2h0OiBmcm9tLmhlaWdodCAqIHRvLnNjYWxlWSxcclxuICAgICAgICAgICAgICBzY2FsZVg6IDEsXHJcbiAgICAgICAgICAgICAgc2NhbGVZOiAxXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAobGVhdmVBbmltYXRpb25OYW1lICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAkZWwucmVtb3ZlQ2xhc3ModG8pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgIGNhbGxiYWNrKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoJC5pc051bWVyaWMoZHVyYXRpb24pKSB7XHJcbiAgICAgICAgJGVsLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgZHVyYXRpb24gKyBcIm1zXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBTdGFydCBhbmltYXRpb24gYnkgY2hhbmdpbmcgQ1NTIHByb3BlcnRpZXMgb3IgY2xhc3MgbmFtZVxyXG4gICAgICBpZiAoJC5pc1BsYWluT2JqZWN0KHRvKSkge1xyXG4gICAgICAgIGlmICh0by5zY2FsZVggIT09IHVuZGVmaW5lZCAmJiB0by5zY2FsZVkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgZGVsZXRlIHRvLndpZHRoO1xyXG4gICAgICAgICAgZGVsZXRlIHRvLmhlaWdodDtcclxuXHJcbiAgICAgICAgICBpZiAoJGVsLnBhcmVudCgpLmhhc0NsYXNzKFwiZmFuY3lib3gtc2xpZGUtLWltYWdlXCIpKSB7XHJcbiAgICAgICAgICAgICRlbC5wYXJlbnQoKS5hZGRDbGFzcyhcImZhbmN5Ym94LWlzLXNjYWxpbmdcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZSgkZWwsIHRvKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAkZWwuYWRkQ2xhc3ModG8pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBNYWtlIHN1cmUgdGhhdCBgdHJhbnNpdGlvbmVuZGAgY2FsbGJhY2sgZ2V0cyBmaXJlZFxyXG4gICAgICAkZWwuZGF0YShcclxuICAgICAgICBcInRpbWVyXCIsXHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICRlbC50cmlnZ2VyKHRyYW5zaXRpb25FbmQpO1xyXG4gICAgICAgIH0sIGR1cmF0aW9uICsgMzMpXHJcbiAgICAgICk7XHJcbiAgICB9LFxyXG5cclxuICAgIHN0b3A6IGZ1bmN0aW9uKCRlbCwgY2FsbENhbGxiYWNrKSB7XHJcbiAgICAgIGlmICgkZWwgJiYgJGVsLmxlbmd0aCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCgkZWwuZGF0YShcInRpbWVyXCIpKTtcclxuXHJcbiAgICAgICAgaWYgKGNhbGxDYWxsYmFjaykge1xyXG4gICAgICAgICAgJGVsLnRyaWdnZXIodHJhbnNpdGlvbkVuZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkZWwub2ZmKHRyYW5zaXRpb25FbmQpLmNzcyhcInRyYW5zaXRpb24tZHVyYXRpb25cIiwgXCJcIik7XHJcblxyXG4gICAgICAgICRlbC5wYXJlbnQoKS5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWlzLXNjYWxpbmdcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBEZWZhdWx0IGNsaWNrIGhhbmRsZXIgZm9yIFwiZmFuY3lib3hlZFwiIGxpbmtzXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gX3J1bihlLCBvcHRzKSB7XHJcbiAgICB2YXIgaXRlbXMgPSBbXSxcclxuICAgICAgaW5kZXggPSAwLFxyXG4gICAgICAkdGFyZ2V0LFxyXG4gICAgICB2YWx1ZSxcclxuICAgICAgaW5zdGFuY2U7XHJcblxyXG4gICAgLy8gQXZvaWQgb3BlbmluZyBtdWx0aXBsZSB0aW1lc1xyXG4gICAgaWYgKGUgJiYgZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xyXG5cclxuICAgIGlmIChlICYmIGUuZGF0YSkge1xyXG4gICAgICBvcHRzID0gbWVyZ2VPcHRzKGUuZGF0YS5vcHRpb25zLCBvcHRzKTtcclxuICAgIH1cclxuXHJcbiAgICAkdGFyZ2V0ID0gb3B0cy4kdGFyZ2V0IHx8ICQoZS5jdXJyZW50VGFyZ2V0KS50cmlnZ2VyKFwiYmx1clwiKTtcclxuICAgIGluc3RhbmNlID0gJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS4kdHJpZ2dlciAmJiBpbnN0YW5jZS4kdHJpZ2dlci5pcygkdGFyZ2V0KSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG9wdHMuc2VsZWN0b3IpIHtcclxuICAgICAgaXRlbXMgPSAkKG9wdHMuc2VsZWN0b3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gR2V0IGFsbCByZWxhdGVkIGl0ZW1zIGFuZCBmaW5kIGluZGV4IGZvciBjbGlja2VkIG9uZVxyXG4gICAgICB2YWx1ZSA9ICR0YXJnZXQuYXR0cihcImRhdGEtZmFuY3lib3hcIikgfHwgXCJcIjtcclxuXHJcbiAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgIGl0ZW1zID0gZS5kYXRhID8gZS5kYXRhLml0ZW1zIDogW107XHJcbiAgICAgICAgaXRlbXMgPSBpdGVtcy5sZW5ndGggPyBpdGVtcy5maWx0ZXIoJ1tkYXRhLWZhbmN5Ym94PVwiJyArIHZhbHVlICsgJ1wiXScpIDogJCgnW2RhdGEtZmFuY3lib3g9XCInICsgdmFsdWUgKyAnXCJdJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaXRlbXMgPSBbJHRhcmdldF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbmRleCA9ICQoaXRlbXMpLmluZGV4KCR0YXJnZXQpO1xyXG5cclxuICAgIC8vIFNvbWV0aW1lcyBjdXJyZW50IGl0ZW0gY2FuIG5vdCBiZSBmb3VuZFxyXG4gICAgaWYgKGluZGV4IDwgMCkge1xyXG4gICAgICBpbmRleCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaW5zdGFuY2UgPSAkLmZhbmN5Ym94Lm9wZW4oaXRlbXMsIG9wdHMsIGluZGV4KTtcclxuXHJcbiAgICAvLyBTYXZlIGxhc3QgYWN0aXZlIGVsZW1lbnRcclxuICAgIGluc3RhbmNlLiR0cmlnZ2VyID0gJHRhcmdldDtcclxuICB9XHJcblxyXG4gIC8vIENyZWF0ZSBhIGpRdWVyeSBwbHVnaW5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICQuZm4uZmFuY3lib3ggPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICB2YXIgc2VsZWN0b3I7XHJcblxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3IgfHwgZmFsc2U7XHJcblxyXG4gICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgIC8vIFVzZSBib2R5IGVsZW1lbnQgaW5zdGVhZCBvZiBkb2N1bWVudCBzbyBpdCBleGVjdXRlcyBmaXJzdFxyXG4gICAgICAkKFwiYm9keVwiKVxyXG4gICAgICAgIC5vZmYoXCJjbGljay5mYi1zdGFydFwiLCBzZWxlY3RvcilcclxuICAgICAgICAub24oXCJjbGljay5mYi1zdGFydFwiLCBzZWxlY3Rvciwge29wdGlvbnM6IG9wdGlvbnN9LCBfcnVuKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub2ZmKFwiY2xpY2suZmItc3RhcnRcIikub24oXHJcbiAgICAgICAgXCJjbGljay5mYi1zdGFydFwiLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGl0ZW1zOiB0aGlzLFxyXG4gICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3J1blxyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIC8vIFNlbGYgaW5pdGlhbGl6aW5nIHBsdWdpbiBmb3IgYWxsIGVsZW1lbnRzIGhhdmluZyBgZGF0YS1mYW5jeWJveGAgYXR0cmlidXRlXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgJEQub24oXCJjbGljay5mYi1zdGFydFwiLCBcIltkYXRhLWZhbmN5Ym94XVwiLCBfcnVuKTtcclxuXHJcbiAgLy8gRW5hYmxlIFwidHJpZ2dlciBlbGVtZW50c1wiXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAkRC5vbihcImNsaWNrLmZiLXN0YXJ0XCIsIFwiW2RhdGEtZmFuY3lib3gtdHJpZ2dlcl1cIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgJCgnW2RhdGEtZmFuY3lib3g9XCInICsgJCh0aGlzKS5hdHRyKFwiZGF0YS1mYW5jeWJveC10cmlnZ2VyXCIpICsgJ1wiXScpXHJcbiAgICAgIC5lcSgkKHRoaXMpLmF0dHIoXCJkYXRhLWZhbmN5Ym94LWluZGV4XCIpIHx8IDApXHJcbiAgICAgIC50cmlnZ2VyKFwiY2xpY2suZmItc3RhcnRcIiwge1xyXG4gICAgICAgICR0cmlnZ2VyOiAkKHRoaXMpXHJcbiAgICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICAvLyBUcmFjayBmb2N1cyBldmVudCBmb3IgYmV0dGVyIGFjY2Vzc2liaWxpdHkgc3R5bGluZ1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgKGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIGJ1dHRvblN0ciA9IFwiLmZhbmN5Ym94LWJ1dHRvblwiLFxyXG4gICAgICBmb2N1c1N0ciA9IFwiZmFuY3lib3gtZm9jdXNcIixcclxuICAgICAgJHByZXNzZWQgPSBudWxsO1xyXG5cclxuICAgICRELm9uKFwibW91c2Vkb3duIG1vdXNldXAgZm9jdXMgYmx1clwiLCBidXR0b25TdHIsIGZ1bmN0aW9uKGUpIHtcclxuICAgICAgc3dpdGNoIChlLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwibW91c2Vkb3duXCI6XHJcbiAgICAgICAgICAkcHJlc3NlZCA9ICQodGhpcyk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwibW91c2V1cFwiOlxyXG4gICAgICAgICAgJHByZXNzZWQgPSBudWxsO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcclxuICAgICAgICAgICQoYnV0dG9uU3RyKS5yZW1vdmVDbGFzcyhmb2N1c1N0cik7XHJcblxyXG4gICAgICAgICAgaWYgKCEkKHRoaXMpLmlzKCRwcmVzc2VkKSAmJiAhJCh0aGlzKS5pcyhcIltkaXNhYmxlZF1cIikpIHtcclxuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhmb2N1c1N0cik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwiZm9jdXNvdXRcIjpcclxuICAgICAgICAgICQoYnV0dG9uU3RyKS5yZW1vdmVDbGFzcyhmb2N1c1N0cik7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSkoKTtcclxufSkod2luZG93LCBkb2N1bWVudCwgalF1ZXJ5KTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBNZWRpYVxyXG4vLyBBZGRzIGFkZGl0aW9uYWwgbWVkaWEgdHlwZSBzdXBwb3J0XHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbigkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIC8vIE9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgZm9yIGVhY2ggbWVkaWEgdHlwZVxyXG4gIHZhciBkZWZhdWx0cyA9IHtcclxuICAgIHlvdXR1YmU6IHtcclxuICAgICAgbWF0Y2hlcjogLyh5b3V0dWJlXFwuY29tfHlvdXR1XFwuYmV8eW91dHViZVxcLW5vY29va2llXFwuY29tKVxcLyh3YXRjaFxcPyguKiYpP3Y9fHZcXC98dVxcL3xlbWJlZFxcLz8pPyh2aWRlb3Nlcmllc1xcP2xpc3Q9KC4qKXxbXFx3LV17MTF9fFxcP2xpc3RUeXBlPSguKikmbGlzdD0oLiopKSguKikvaSxcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgYXV0b3BsYXk6IDEsXHJcbiAgICAgICAgYXV0b2hpZGU6IDEsXHJcbiAgICAgICAgZnM6IDEsXHJcbiAgICAgICAgcmVsOiAwLFxyXG4gICAgICAgIGhkOiAxLFxyXG4gICAgICAgIHdtb2RlOiBcInRyYW5zcGFyZW50XCIsXHJcbiAgICAgICAgZW5hYmxlanNhcGk6IDEsXHJcbiAgICAgICAgaHRtbDU6IDFcclxuICAgICAgfSxcclxuICAgICAgcGFyYW1QbGFjZTogOCxcclxuICAgICAgdHlwZTogXCJpZnJhbWVcIixcclxuICAgICAgdXJsOiBcIi8vd3d3LnlvdXR1YmUtbm9jb29raWUuY29tL2VtYmVkLyQ0XCIsXHJcbiAgICAgIHRodW1iOiBcIi8vaW1nLnlvdXR1YmUuY29tL3ZpLyQ0L2hxZGVmYXVsdC5qcGdcIlxyXG4gICAgfSxcclxuXHJcbiAgICB2aW1lbzoge1xyXG4gICAgICBtYXRjaGVyOiAvXi4rdmltZW8uY29tXFwvKC4qXFwvKT8oW1xcZF0rKSguKik/LyxcclxuICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgYXV0b3BsYXk6IDEsXHJcbiAgICAgICAgaGQ6IDEsXHJcbiAgICAgICAgc2hvd190aXRsZTogMSxcclxuICAgICAgICBzaG93X2J5bGluZTogMSxcclxuICAgICAgICBzaG93X3BvcnRyYWl0OiAwLFxyXG4gICAgICAgIGZ1bGxzY3JlZW46IDFcclxuICAgICAgfSxcclxuICAgICAgcGFyYW1QbGFjZTogMyxcclxuICAgICAgdHlwZTogXCJpZnJhbWVcIixcclxuICAgICAgdXJsOiBcIi8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8kMlwiXHJcbiAgICB9LFxyXG5cclxuICAgIGluc3RhZ3JhbToge1xyXG4gICAgICBtYXRjaGVyOiAvKGluc3RhZ3JcXC5hbXxpbnN0YWdyYW1cXC5jb20pXFwvcFxcLyhbYS16QS1aMC05X1xcLV0rKVxcLz8vaSxcclxuICAgICAgdHlwZTogXCJpbWFnZVwiLFxyXG4gICAgICB1cmw6IFwiLy8kMS9wLyQyL21lZGlhLz9zaXplPWxcIlxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBFeGFtcGxlczpcclxuICAgIC8vIGh0dHA6Ly9tYXBzLmdvb2dsZS5jb20vP2xsPTQ4Ljg1Nzk5NSwyLjI5NDI5NyZzcG49MC4wMDc2NjYsMC4wMjExMzYmdD1tJno9MTZcclxuICAgIC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9AMzcuNzg1MjAwNiwtMTIyLjQxNDYzNTUsMTQuNjV6XHJcbiAgICAvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvQDUyLjIxMTExMjMsMi45MjM3NTQyLDYuNjF6P2hsPWVuXHJcbiAgICAvLyBodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvcGxhY2UvR29vZ2xlcGxleC9AMzcuNDIyMDA0MSwtMTIyLjA4MzM0OTQsMTd6L2RhdGE9ITRtNSEzbTQhMXMweDA6MHg2YzI5NmM2NjYxOTM2N2UwIThtMiEzZDM3LjQyMTk5OTghNGQtMTIyLjA4NDA1NzJcclxuICAgIGdtYXBfcGxhY2U6IHtcclxuICAgICAgbWF0Y2hlcjogLyhtYXBzXFwuKT9nb29nbGVcXC4oW2Etel17MiwzfShcXC5bYS16XXsyfSk/KVxcLygoKG1hcHNcXC8ocGxhY2VcXC8oLiopXFwvKT9cXEAoLiopLChcXGQrLj9cXGQrPyl6KSl8KFxcP2xsPSkpKC4qKT8vaSxcclxuICAgICAgdHlwZTogXCJpZnJhbWVcIixcclxuICAgICAgdXJsOiBmdW5jdGlvbihyZXopIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgXCIvL21hcHMuZ29vZ2xlLlwiICtcclxuICAgICAgICAgIHJlelsyXSArXHJcbiAgICAgICAgICBcIi8/bGw9XCIgK1xyXG4gICAgICAgICAgKHJlels5XSA/IHJlels5XSArIFwiJno9XCIgKyBNYXRoLmZsb29yKHJlelsxMF0pICsgKHJlelsxMl0gPyByZXpbMTJdLnJlcGxhY2UoL15cXC8vLCBcIiZcIikgOiBcIlwiKSA6IHJlelsxMl0gKyBcIlwiKS5yZXBsYWNlKC9cXD8vLCBcIiZcIikgK1xyXG4gICAgICAgICAgXCImb3V0cHV0PVwiICtcclxuICAgICAgICAgIChyZXpbMTJdICYmIHJlelsxMl0uaW5kZXhPZihcImxheWVyPWNcIikgPiAwID8gXCJzdmVtYmVkXCIgOiBcImVtYmVkXCIpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBFeGFtcGxlczpcclxuICAgIC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9zZWFyY2gvRW1waXJlK1N0YXRlK0J1aWxkaW5nL1xyXG4gICAgLy8gaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3NlYXJjaC8/YXBpPTEmcXVlcnk9Y2VudHVyeWxpbmsrZmllbGRcclxuICAgIC8vIGh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vbWFwcy9zZWFyY2gvP2FwaT0xJnF1ZXJ5PTQ3LjU5NTE1MTgsLTEyMi4zMzE2MzkzXHJcbiAgICBnbWFwX3NlYXJjaDoge1xyXG4gICAgICBtYXRjaGVyOiAvKG1hcHNcXC4pP2dvb2dsZVxcLihbYS16XXsyLDN9KFxcLlthLXpdezJ9KT8pXFwvKG1hcHNcXC9zZWFyY2hcXC8pKC4qKS9pLFxyXG4gICAgICB0eXBlOiBcImlmcmFtZVwiLFxyXG4gICAgICB1cmw6IGZ1bmN0aW9uKHJleikge1xyXG4gICAgICAgIHJldHVybiBcIi8vbWFwcy5nb29nbGUuXCIgKyByZXpbMl0gKyBcIi9tYXBzP3E9XCIgKyByZXpbNV0ucmVwbGFjZShcInF1ZXJ5PVwiLCBcInE9XCIpLnJlcGxhY2UoXCJhcGk9MVwiLCBcIlwiKSArIFwiJm91dHB1dD1lbWJlZFwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgLy8gRm9ybWF0cyBtYXRjaGluZyB1cmwgdG8gZmluYWwgZm9ybVxyXG4gIHZhciBmb3JtYXQgPSBmdW5jdGlvbih1cmwsIHJleiwgcGFyYW1zKSB7XHJcbiAgICBpZiAoIXVybCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcGFyYW1zID0gcGFyYW1zIHx8IFwiXCI7XHJcblxyXG4gICAgaWYgKCQudHlwZShwYXJhbXMpID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgIHBhcmFtcyA9ICQucGFyYW0ocGFyYW1zLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICAkLmVhY2gocmV6LCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKFwiJFwiICsga2V5LCB2YWx1ZSB8fCBcIlwiKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChwYXJhbXMubGVuZ3RoKSB7XHJcbiAgICAgIHVybCArPSAodXJsLmluZGV4T2YoXCI/XCIpID4gMCA/IFwiJlwiIDogXCI/XCIpICsgcGFyYW1zO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB1cmw7XHJcbiAgfTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oXCJvYmplY3ROZWVkc1R5cGUuZmJcIiwgZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGl0ZW0pIHtcclxuICAgIHZhciB1cmwgPSBpdGVtLnNyYyB8fCBcIlwiLFxyXG4gICAgICB0eXBlID0gZmFsc2UsXHJcbiAgICAgIG1lZGlhLFxyXG4gICAgICB0aHVtYixcclxuICAgICAgcmV6LFxyXG4gICAgICBwYXJhbXMsXHJcbiAgICAgIHVybFBhcmFtcyxcclxuICAgICAgcGFyYW1PYmosXHJcbiAgICAgIHByb3ZpZGVyO1xyXG5cclxuICAgIG1lZGlhID0gJC5leHRlbmQodHJ1ZSwge30sIGRlZmF1bHRzLCBpdGVtLm9wdHMubWVkaWEpO1xyXG5cclxuICAgIC8vIExvb2sgZm9yIGFueSBtYXRjaGluZyBtZWRpYSB0eXBlXHJcbiAgICAkLmVhY2gobWVkaWEsIGZ1bmN0aW9uKHByb3ZpZGVyTmFtZSwgcHJvdmlkZXJPcHRzKSB7XHJcbiAgICAgIHJleiA9IHVybC5tYXRjaChwcm92aWRlck9wdHMubWF0Y2hlcik7XHJcblxyXG4gICAgICBpZiAoIXJleikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdHlwZSA9IHByb3ZpZGVyT3B0cy50eXBlO1xyXG4gICAgICBwcm92aWRlciA9IHByb3ZpZGVyTmFtZTtcclxuICAgICAgcGFyYW1PYmogPSB7fTtcclxuXHJcbiAgICAgIGlmIChwcm92aWRlck9wdHMucGFyYW1QbGFjZSAmJiByZXpbcHJvdmlkZXJPcHRzLnBhcmFtUGxhY2VdKSB7XHJcbiAgICAgICAgdXJsUGFyYW1zID0gcmV6W3Byb3ZpZGVyT3B0cy5wYXJhbVBsYWNlXTtcclxuXHJcbiAgICAgICAgaWYgKHVybFBhcmFtc1swXSA9PSBcIj9cIikge1xyXG4gICAgICAgICAgdXJsUGFyYW1zID0gdXJsUGFyYW1zLnN1YnN0cmluZygxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVybFBhcmFtcyA9IHVybFBhcmFtcy5zcGxpdChcIiZcIik7XHJcblxyXG4gICAgICAgIGZvciAodmFyIG0gPSAwOyBtIDwgdXJsUGFyYW1zLmxlbmd0aDsgKyttKSB7XHJcbiAgICAgICAgICB2YXIgcCA9IHVybFBhcmFtc1ttXS5zcGxpdChcIj1cIiwgMik7XHJcblxyXG4gICAgICAgICAgaWYgKHAubGVuZ3RoID09IDIpIHtcclxuICAgICAgICAgICAgcGFyYW1PYmpbcFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQocFsxXS5yZXBsYWNlKC9cXCsvZywgXCIgXCIpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBhcmFtcyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBwcm92aWRlck9wdHMucGFyYW1zLCBpdGVtLm9wdHNbcHJvdmlkZXJOYW1lXSwgcGFyYW1PYmopO1xyXG5cclxuICAgICAgdXJsID1cclxuICAgICAgICAkLnR5cGUocHJvdmlkZXJPcHRzLnVybCkgPT09IFwiZnVuY3Rpb25cIiA/IHByb3ZpZGVyT3B0cy51cmwuY2FsbCh0aGlzLCByZXosIHBhcmFtcywgaXRlbSkgOiBmb3JtYXQocHJvdmlkZXJPcHRzLnVybCwgcmV6LCBwYXJhbXMpO1xyXG5cclxuICAgICAgdGh1bWIgPVxyXG4gICAgICAgICQudHlwZShwcm92aWRlck9wdHMudGh1bWIpID09PSBcImZ1bmN0aW9uXCIgPyBwcm92aWRlck9wdHMudGh1bWIuY2FsbCh0aGlzLCByZXosIHBhcmFtcywgaXRlbSkgOiBmb3JtYXQocHJvdmlkZXJPcHRzLnRodW1iLCByZXopO1xyXG5cclxuICAgICAgaWYgKHByb3ZpZGVyTmFtZSA9PT0gXCJ5b3V0dWJlXCIpIHtcclxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvJnQ9KChcXGQrKW0pPyhcXGQrKXMvLCBmdW5jdGlvbihtYXRjaCwgcDEsIG0sIHMpIHtcclxuICAgICAgICAgIHJldHVybiBcIiZzdGFydD1cIiArICgobSA/IHBhcnNlSW50KG0sIDEwKSAqIDYwIDogMCkgKyBwYXJzZUludChzLCAxMCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHByb3ZpZGVyTmFtZSA9PT0gXCJ2aW1lb1wiKSB7XHJcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoXCImJTIzXCIsIFwiI1wiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSWYgaXQgaXMgZm91bmQsIHRoZW4gY2hhbmdlIGNvbnRlbnQgdHlwZSBhbmQgdXBkYXRlIHRoZSB1cmxcclxuXHJcbiAgICBpZiAodHlwZSkge1xyXG4gICAgICBpZiAoIWl0ZW0ub3B0cy50aHVtYiAmJiAhKGl0ZW0ub3B0cy4kdGh1bWIgJiYgaXRlbS5vcHRzLiR0aHVtYi5sZW5ndGgpKSB7XHJcbiAgICAgICAgaXRlbS5vcHRzLnRodW1iID0gdGh1bWI7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlID09PSBcImlmcmFtZVwiKSB7XHJcbiAgICAgICAgaXRlbS5vcHRzID0gJC5leHRlbmQodHJ1ZSwgaXRlbS5vcHRzLCB7XHJcbiAgICAgICAgICBpZnJhbWU6IHtcclxuICAgICAgICAgICAgcHJlbG9hZDogZmFsc2UsXHJcbiAgICAgICAgICAgIGF0dHI6IHtcclxuICAgICAgICAgICAgICBzY3JvbGxpbmc6IFwibm9cIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICQuZXh0ZW5kKGl0ZW0sIHtcclxuICAgICAgICB0eXBlOiB0eXBlLFxyXG4gICAgICAgIHNyYzogdXJsLFxyXG4gICAgICAgIG9yaWdTcmM6IGl0ZW0uc3JjLFxyXG4gICAgICAgIGNvbnRlbnRTb3VyY2U6IHByb3ZpZGVyLFxyXG4gICAgICAgIGNvbnRlbnRUeXBlOiB0eXBlID09PSBcImltYWdlXCIgPyBcImltYWdlXCIgOiBwcm92aWRlciA9PSBcImdtYXBfcGxhY2VcIiB8fCBwcm92aWRlciA9PSBcImdtYXBfc2VhcmNoXCIgPyBcIm1hcFwiIDogXCJ2aWRlb1wiXHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIGlmICh1cmwpIHtcclxuICAgICAgaXRlbS50eXBlID0gaXRlbS5vcHRzLmRlZmF1bHRUeXBlO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBMb2FkIFlvdVR1YmUvVmlkZW8gQVBJIG9uIHJlcXVlc3QgdG8gZGV0ZWN0IHdoZW4gdmlkZW8gZmluaXNoZWQgcGxheWluZ1xyXG4gIHZhciBWaWRlb0FQSUxvYWRlciA9IHtcclxuICAgIHlvdXR1YmU6IHtcclxuICAgICAgc3JjOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2lmcmFtZV9hcGlcIixcclxuICAgICAgY2xhc3M6IFwiWVRcIixcclxuICAgICAgbG9hZGluZzogZmFsc2UsXHJcbiAgICAgIGxvYWRlZDogZmFsc2VcclxuICAgIH0sXHJcblxyXG4gICAgdmltZW86IHtcclxuICAgICAgc3JjOiBcImh0dHBzOi8vcGxheWVyLnZpbWVvLmNvbS9hcGkvcGxheWVyLmpzXCIsXHJcbiAgICAgIGNsYXNzOiBcIlZpbWVvXCIsXHJcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICBsb2FkZWQ6IGZhbHNlXHJcbiAgICB9LFxyXG5cclxuICAgIGxvYWQ6IGZ1bmN0aW9uKHZlbmRvcikge1xyXG4gICAgICB2YXIgX3RoaXMgPSB0aGlzLFxyXG4gICAgICAgIHNjcmlwdDtcclxuXHJcbiAgICAgIGlmICh0aGlzW3ZlbmRvcl0ubG9hZGVkKSB7XHJcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIF90aGlzLmRvbmUodmVuZG9yKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzW3ZlbmRvcl0ubG9hZGluZykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpc1t2ZW5kb3JdLmxvYWRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuICAgICAgc2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xyXG4gICAgICBzY3JpcHQuc3JjID0gdGhpc1t2ZW5kb3JdLnNyYztcclxuXHJcbiAgICAgIGlmICh2ZW5kb3IgPT09IFwieW91dHViZVwiKSB7XHJcbiAgICAgICAgd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBfdGhpc1t2ZW5kb3JdLmxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICBfdGhpcy5kb25lKHZlbmRvcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBfdGhpc1t2ZW5kb3JdLmxvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICBfdGhpcy5kb25lKHZlbmRvcik7XHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgfSxcclxuICAgIGRvbmU6IGZ1bmN0aW9uKHZlbmRvcikge1xyXG4gICAgICB2YXIgaW5zdGFuY2UsICRlbCwgcGxheWVyO1xyXG5cclxuICAgICAgaWYgKHZlbmRvciA9PT0gXCJ5b3V0dWJlXCIpIHtcclxuICAgICAgICBkZWxldGUgd2luZG93Lm9uWW91VHViZUlmcmFtZUFQSVJlYWR5O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICRlbCA9IGluc3RhbmNlLmN1cnJlbnQuJGNvbnRlbnQuZmluZChcImlmcmFtZVwiKTtcclxuXHJcbiAgICAgICAgaWYgKHZlbmRvciA9PT0gXCJ5b3V0dWJlXCIgJiYgWVQgIT09IHVuZGVmaW5lZCAmJiBZVCkge1xyXG4gICAgICAgICAgcGxheWVyID0gbmV3IFlULlBsYXllcigkZWwuYXR0cihcImlkXCIpLCB7XHJcbiAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgIG9uU3RhdGVDaGFuZ2U6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmRhdGEgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHZlbmRvciA9PT0gXCJ2aW1lb1wiICYmIFZpbWVvICE9PSB1bmRlZmluZWQgJiYgVmltZW8pIHtcclxuICAgICAgICAgIHBsYXllciA9IG5ldyBWaW1lby5QbGF5ZXIoJGVsKTtcclxuXHJcbiAgICAgICAgICBwbGF5ZXIub24oXCJlbmRlZFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UubmV4dCgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJhZnRlclNob3cuZmJcIjogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQpIHtcclxuICAgICAgaWYgKGluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEgJiYgKGN1cnJlbnQuY29udGVudFNvdXJjZSA9PT0gXCJ5b3V0dWJlXCIgfHwgY3VycmVudC5jb250ZW50U291cmNlID09PSBcInZpbWVvXCIpKSB7XHJcbiAgICAgICAgVmlkZW9BUElMb2FkZXIubG9hZChjdXJyZW50LmNvbnRlbnRTb3VyY2UpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pKGpRdWVyeSk7XHJcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gR3Vlc3R1cmVzXHJcbi8vIEFkZHMgdG91Y2ggZ3Vlc3R1cmVzLCBoYW5kbGVzIGNsaWNrIGFuZCB0YXAgZXZlbnRzXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIHZhciByZXF1ZXN0QUZyYW1lID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgLy8gaWYgYWxsIGVsc2UgZmFpbHMsIHVzZSBzZXRUaW1lb3V0XHJcbiAgICAgIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIH0pKCk7XHJcblxyXG4gIHZhciBjYW5jZWxBRnJhbWUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIHdpbmRvdy5tb3pDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICB3aW5kb3cub0NhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgIGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFyVGltZW91dChpZCk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfSkoKTtcclxuXHJcbiAgdmFyIGdldFBvaW50ZXJYWSA9IGZ1bmN0aW9uKGUpIHtcclxuICAgIHZhciByZXN1bHQgPSBbXTtcclxuXHJcbiAgICBlID0gZS5vcmlnaW5hbEV2ZW50IHx8IGUgfHwgd2luZG93LmU7XHJcbiAgICBlID0gZS50b3VjaGVzICYmIGUudG91Y2hlcy5sZW5ndGggPyBlLnRvdWNoZXMgOiBlLmNoYW5nZWRUb3VjaGVzICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoID8gZS5jaGFuZ2VkVG91Y2hlcyA6IFtlXTtcclxuXHJcbiAgICBmb3IgKHZhciBrZXkgaW4gZSkge1xyXG4gICAgICBpZiAoZVtrZXldLnBhZ2VYKSB7XHJcbiAgICAgICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICAgICAgeDogZVtrZXldLnBhZ2VYLFxyXG4gICAgICAgICAgeTogZVtrZXldLnBhZ2VZXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZVtrZXldLmNsaWVudFgpIHtcclxuICAgICAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgICAgICB4OiBlW2tleV0uY2xpZW50WCxcclxuICAgICAgICAgIHk6IGVba2V5XS5jbGllbnRZXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcblxyXG4gIHZhciBkaXN0YW5jZSA9IGZ1bmN0aW9uKHBvaW50MiwgcG9pbnQxLCB3aGF0KSB7XHJcbiAgICBpZiAoIXBvaW50MSB8fCAhcG9pbnQyKSB7XHJcbiAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh3aGF0ID09PSBcInhcIikge1xyXG4gICAgICByZXR1cm4gcG9pbnQyLnggLSBwb2ludDEueDtcclxuICAgIH0gZWxzZSBpZiAod2hhdCA9PT0gXCJ5XCIpIHtcclxuICAgICAgcmV0dXJuIHBvaW50Mi55IC0gcG9pbnQxLnk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwb2ludDIueCAtIHBvaW50MS54LCAyKSArIE1hdGgucG93KHBvaW50Mi55IC0gcG9pbnQxLnksIDIpKTtcclxuICB9O1xyXG5cclxuICB2YXIgaXNDbGlja2FibGUgPSBmdW5jdGlvbigkZWwpIHtcclxuICAgIGlmIChcclxuICAgICAgJGVsLmlzKCdhLGFyZWEsYnV0dG9uLFtyb2xlPVwiYnV0dG9uXCJdLGlucHV0LGxhYmVsLHNlbGVjdCxzdW1tYXJ5LHRleHRhcmVhLHZpZGVvLGF1ZGlvLGlmcmFtZScpIHx8XHJcbiAgICAgICQuaXNGdW5jdGlvbigkZWwuZ2V0KDApLm9uY2xpY2spIHx8XHJcbiAgICAgICRlbC5kYXRhKFwic2VsZWN0YWJsZVwiKVxyXG4gICAgKSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNrIGZvciBhdHRyaWJ1dGVzIGxpa2UgZGF0YS1mYW5jeWJveC1uZXh0IG9yIGRhdGEtZmFuY3lib3gtY2xvc2VcclxuICAgIGZvciAodmFyIGkgPSAwLCBhdHRzID0gJGVsWzBdLmF0dHJpYnV0ZXMsIG4gPSBhdHRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICBpZiAoYXR0c1tpXS5ub2RlTmFtZS5zdWJzdHIoMCwgMTQpID09PSBcImRhdGEtZmFuY3lib3gtXCIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9O1xyXG5cclxuICB2YXIgaGFzU2Nyb2xsYmFycyA9IGZ1bmN0aW9uKGVsKSB7XHJcbiAgICB2YXIgb3ZlcmZsb3dZID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpW1wib3ZlcmZsb3cteVwiXSxcclxuICAgICAgb3ZlcmZsb3dYID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpW1wib3ZlcmZsb3cteFwiXSxcclxuICAgICAgdmVydGljYWwgPSAob3ZlcmZsb3dZID09PSBcInNjcm9sbFwiIHx8IG92ZXJmbG93WSA9PT0gXCJhdXRvXCIpICYmIGVsLnNjcm9sbEhlaWdodCA+IGVsLmNsaWVudEhlaWdodCxcclxuICAgICAgaG9yaXpvbnRhbCA9IChvdmVyZmxvd1ggPT09IFwic2Nyb2xsXCIgfHwgb3ZlcmZsb3dYID09PSBcImF1dG9cIikgJiYgZWwuc2Nyb2xsV2lkdGggPiBlbC5jbGllbnRXaWR0aDtcclxuXHJcbiAgICByZXR1cm4gdmVydGljYWwgfHwgaG9yaXpvbnRhbDtcclxuICB9O1xyXG5cclxuICB2YXIgaXNTY3JvbGxhYmxlID0gZnVuY3Rpb24oJGVsKSB7XHJcbiAgICB2YXIgcmV6ID0gZmFsc2U7XHJcblxyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgcmV6ID0gaGFzU2Nyb2xsYmFycygkZWwuZ2V0KDApKTtcclxuXHJcbiAgICAgIGlmIChyZXopIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG5cclxuICAgICAgJGVsID0gJGVsLnBhcmVudCgpO1xyXG5cclxuICAgICAgaWYgKCEkZWwubGVuZ3RoIHx8ICRlbC5oYXNDbGFzcyhcImZhbmN5Ym94LXN0YWdlXCIpIHx8ICRlbC5pcyhcImJvZHlcIikpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXo7XHJcbiAgfTtcclxuXHJcbiAgdmFyIEd1ZXN0dXJlcyA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgc2VsZi5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG5cclxuICAgIHNlbGYuJGJnID0gaW5zdGFuY2UuJHJlZnMuYmc7XHJcbiAgICBzZWxmLiRzdGFnZSA9IGluc3RhbmNlLiRyZWZzLnN0YWdlO1xyXG4gICAgc2VsZi4kY29udGFpbmVyID0gaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyO1xyXG5cclxuICAgIHNlbGYuZGVzdHJveSgpO1xyXG5cclxuICAgIHNlbGYuJGNvbnRhaW5lci5vbihcInRvdWNoc3RhcnQuZmIudG91Y2ggbW91c2Vkb3duLmZiLnRvdWNoXCIsICQucHJveHkoc2VsZiwgXCJvbnRvdWNoc3RhcnRcIikpO1xyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHNlbGYuJGNvbnRhaW5lci5vZmYoXCIuZmIudG91Y2hcIik7XHJcblxyXG4gICAgJChkb2N1bWVudCkub2ZmKFwiLmZiLnRvdWNoXCIpO1xyXG5cclxuICAgIGlmIChzZWxmLnJlcXVlc3RJZCkge1xyXG4gICAgICBjYW5jZWxBRnJhbWUoc2VsZi5yZXF1ZXN0SWQpO1xyXG4gICAgICBzZWxmLnJlcXVlc3RJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNlbGYudGFwcGVkKSB7XHJcbiAgICAgIGNsZWFyVGltZW91dChzZWxmLnRhcHBlZCk7XHJcbiAgICAgIHNlbGYudGFwcGVkID0gbnVsbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9udG91Y2hzdGFydCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgJHRhcmdldCA9ICQoZS50YXJnZXQpLFxyXG4gICAgICBpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2UsXHJcbiAgICAgIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50LFxyXG4gICAgICAkc2xpZGUgPSBjdXJyZW50LiRzbGlkZSxcclxuICAgICAgJGNvbnRlbnQgPSBjdXJyZW50LiRjb250ZW50LFxyXG4gICAgICBpc1RvdWNoRGV2aWNlID0gZS50eXBlID09IFwidG91Y2hzdGFydFwiO1xyXG5cclxuICAgIC8vIERvIG5vdCByZXNwb25kIHRvIGJvdGggKHRvdWNoIGFuZCBtb3VzZSkgZXZlbnRzXHJcbiAgICBpZiAoaXNUb3VjaERldmljZSkge1xyXG4gICAgICBzZWxmLiRjb250YWluZXIub2ZmKFwibW91c2Vkb3duLmZiLnRvdWNoXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElnbm9yZSByaWdodCBjbGlja1xyXG4gICAgaWYgKGUub3JpZ2luYWxFdmVudCAmJiBlLm9yaWdpbmFsRXZlbnQuYnV0dG9uID09IDIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIElnbm9yZSB0YXBpbmcgb24gbGlua3MsIGJ1dHRvbnMsIGlucHV0IGVsZW1lbnRzXHJcbiAgICBpZiAoISRzbGlkZS5sZW5ndGggfHwgISR0YXJnZXQubGVuZ3RoIHx8IGlzQ2xpY2thYmxlKCR0YXJnZXQpIHx8IGlzQ2xpY2thYmxlKCR0YXJnZXQucGFyZW50KCkpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIElnbm9yZSBjbGlja3Mgb24gdGhlIHNjcm9sbGJhclxyXG4gICAgaWYgKCEkdGFyZ2V0LmlzKFwiaW1nXCIpICYmIGUub3JpZ2luYWxFdmVudC5jbGllbnRYID4gJHRhcmdldFswXS5jbGllbnRXaWR0aCArICR0YXJnZXQub2Zmc2V0KCkubGVmdCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSWdub3JlIGNsaWNrcyB3aGlsZSB6b29taW5nIG9yIGNsb3NpbmdcclxuICAgIGlmICghY3VycmVudCB8fCBpbnN0YW5jZS5pc0FuaW1hdGluZyB8fCBjdXJyZW50LiRzbGlkZS5oYXNDbGFzcyhcImZhbmN5Ym94LWFuaW1hdGVkXCIpKSB7XHJcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnJlYWxQb2ludHMgPSBzZWxmLnN0YXJ0UG9pbnRzID0gZ2V0UG9pbnRlclhZKGUpO1xyXG5cclxuICAgIGlmICghc2VsZi5zdGFydFBvaW50cy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEFsbG93IG90aGVyIHNjcmlwdHMgdG8gY2F0Y2ggdG91Y2ggZXZlbnQgaWYgXCJ0b3VjaFwiIGlzIHNldCB0byBmYWxzZVxyXG4gICAgaWYgKGN1cnJlbnQudG91Y2gpIHtcclxuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnN0YXJ0RXZlbnQgPSBlO1xyXG5cclxuICAgIHNlbGYuY2FuVGFwID0gdHJ1ZTtcclxuICAgIHNlbGYuJHRhcmdldCA9ICR0YXJnZXQ7XHJcbiAgICBzZWxmLiRjb250ZW50ID0gJGNvbnRlbnQ7XHJcbiAgICBzZWxmLm9wdHMgPSBjdXJyZW50Lm9wdHMudG91Y2g7XHJcblxyXG4gICAgc2VsZi5pc1Bhbm5pbmcgPSBmYWxzZTtcclxuICAgIHNlbGYuaXNTd2lwaW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLmlzWm9vbWluZyA9IGZhbHNlO1xyXG4gICAgc2VsZi5pc1Njcm9sbGluZyA9IGZhbHNlO1xyXG4gICAgc2VsZi5jYW5QYW4gPSBpbnN0YW5jZS5jYW5QYW4oKTtcclxuXHJcbiAgICBzZWxmLnN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgc2VsZi5kaXN0YW5jZVggPSBzZWxmLmRpc3RhbmNlWSA9IHNlbGYuZGlzdGFuY2UgPSAwO1xyXG5cclxuICAgIHNlbGYuY2FudmFzV2lkdGggPSBNYXRoLnJvdW5kKCRzbGlkZVswXS5jbGllbnRXaWR0aCk7XHJcbiAgICBzZWxmLmNhbnZhc0hlaWdodCA9IE1hdGgucm91bmQoJHNsaWRlWzBdLmNsaWVudEhlaWdodCk7XHJcblxyXG4gICAgc2VsZi5jb250ZW50TGFzdFBvcyA9IG51bGw7XHJcbiAgICBzZWxmLmNvbnRlbnRTdGFydFBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKHNlbGYuJGNvbnRlbnQpIHx8IHt0b3A6IDAsIGxlZnQ6IDB9O1xyXG4gICAgc2VsZi5zbGlkZXJTdGFydFBvcyA9ICQuZmFuY3lib3guZ2V0VHJhbnNsYXRlKCRzbGlkZSk7XHJcblxyXG4gICAgLy8gU2luY2UgcG9zaXRpb24gd2lsbCBiZSBhYnNvbHV0ZSwgYnV0IHdlIG5lZWQgdG8gbWFrZSBpdCByZWxhdGl2ZSB0byB0aGUgc3RhZ2VcclxuICAgIHNlbGYuc3RhZ2VQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShpbnN0YW5jZS4kcmVmcy5zdGFnZSk7XHJcblxyXG4gICAgc2VsZi5zbGlkZXJTdGFydFBvcy50b3AgLT0gc2VsZi5zdGFnZVBvcy50b3A7XHJcbiAgICBzZWxmLnNsaWRlclN0YXJ0UG9zLmxlZnQgLT0gc2VsZi5zdGFnZVBvcy5sZWZ0O1xyXG5cclxuICAgIHNlbGYuY29udGVudFN0YXJ0UG9zLnRvcCAtPSBzZWxmLnN0YWdlUG9zLnRvcDtcclxuICAgIHNlbGYuY29udGVudFN0YXJ0UG9zLmxlZnQgLT0gc2VsZi5zdGFnZVBvcy5sZWZ0O1xyXG5cclxuICAgICQoZG9jdW1lbnQpXHJcbiAgICAgIC5vZmYoXCIuZmIudG91Y2hcIilcclxuICAgICAgLm9uKGlzVG91Y2hEZXZpY2UgPyBcInRvdWNoZW5kLmZiLnRvdWNoIHRvdWNoY2FuY2VsLmZiLnRvdWNoXCIgOiBcIm1vdXNldXAuZmIudG91Y2ggbW91c2VsZWF2ZS5mYi50b3VjaFwiLCAkLnByb3h5KHNlbGYsIFwib250b3VjaGVuZFwiKSlcclxuICAgICAgLm9uKGlzVG91Y2hEZXZpY2UgPyBcInRvdWNobW92ZS5mYi50b3VjaFwiIDogXCJtb3VzZW1vdmUuZmIudG91Y2hcIiwgJC5wcm94eShzZWxmLCBcIm9udG91Y2htb3ZlXCIpKTtcclxuXHJcbiAgICBpZiAoJC5mYW5jeWJveC5pc01vYmlsZSkge1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHNlbGYub25zY3JvbGwsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNraXAgaWYgY2xpY2tlZCBvdXRzaWRlIHRoZSBzbGlkaW5nIGFyZWFcclxuICAgIGlmICghKHNlbGYub3B0cyB8fCBzZWxmLmNhblBhbikgfHwgISgkdGFyZ2V0LmlzKHNlbGYuJHN0YWdlKSB8fCBzZWxmLiRzdGFnZS5maW5kKCR0YXJnZXQpLmxlbmd0aCkpIHtcclxuICAgICAgaWYgKCR0YXJnZXQuaXMoXCIuZmFuY3lib3gtaW1hZ2VcIikpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghKCQuZmFuY3lib3guaXNNb2JpbGUgJiYgJHRhcmdldC5oYXNDbGFzcyhcImZhbmN5Ym94LWNhcHRpb25cIikpKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5pc1Njcm9sbGFibGUgPSBpc1Njcm9sbGFibGUoJHRhcmdldCkgfHwgaXNTY3JvbGxhYmxlKCR0YXJnZXQucGFyZW50KCkpO1xyXG5cclxuICAgIC8vIENoZWNrIGlmIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZSBhbmQgdHJ5IHRvIHByZXZlbnQgZGVmYXVsdCBiZWhhdmlvciAoc2Nyb2xsaW5nKVxyXG4gICAgaWYgKCEoJC5mYW5jeWJveC5pc01vYmlsZSAmJiBzZWxmLmlzU2Nyb2xsYWJsZSkpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9uZSBmaW5nZXIgb3IgbW91c2UgY2xpY2sgLSBzd2lwZSBvciBwYW4gYW4gaW1hZ2VcclxuICAgIGlmIChzZWxmLnN0YXJ0UG9pbnRzLmxlbmd0aCA9PT0gMSB8fCBjdXJyZW50Lmhhc0Vycm9yKSB7XHJcbiAgICAgIGlmIChzZWxmLmNhblBhbikge1xyXG4gICAgICAgICQuZmFuY3lib3guc3RvcChzZWxmLiRjb250ZW50KTtcclxuXHJcbiAgICAgICAgc2VsZi5pc1Bhbm5pbmcgPSB0cnVlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuaXNTd2lwaW5nID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2VsZi4kY29udGFpbmVyLmFkZENsYXNzKFwiZmFuY3lib3gtaXMtZ3JhYmJpbmdcIik7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHdvIGZpbmdlcnMgLSB6b29tIGltYWdlXHJcbiAgICBpZiAoc2VsZi5zdGFydFBvaW50cy5sZW5ndGggPT09IDIgJiYgY3VycmVudC50eXBlID09PSBcImltYWdlXCIgJiYgKGN1cnJlbnQuaXNMb2FkZWQgfHwgY3VycmVudC4kZ2hvc3QpKSB7XHJcbiAgICAgIHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcbiAgICAgIHNlbGYuaXNTd2lwaW5nID0gZmFsc2U7XHJcbiAgICAgIHNlbGYuaXNQYW5uaW5nID0gZmFsc2U7XHJcblxyXG4gICAgICBzZWxmLmlzWm9vbWluZyA9IHRydWU7XHJcblxyXG4gICAgICAkLmZhbmN5Ym94LnN0b3Aoc2VsZi4kY29udGVudCk7XHJcblxyXG4gICAgICBzZWxmLmNlbnRlclBvaW50U3RhcnRYID0gKHNlbGYuc3RhcnRQb2ludHNbMF0ueCArIHNlbGYuc3RhcnRQb2ludHNbMV0ueCkgKiAwLjUgLSAkKHdpbmRvdykuc2Nyb2xsTGVmdCgpO1xyXG4gICAgICBzZWxmLmNlbnRlclBvaW50U3RhcnRZID0gKHNlbGYuc3RhcnRQb2ludHNbMF0ueSArIHNlbGYuc3RhcnRQb2ludHNbMV0ueSkgKiAwLjUgLSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XHJcblxyXG4gICAgICBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WCA9IChzZWxmLmNlbnRlclBvaW50U3RhcnRYIC0gc2VsZi5jb250ZW50U3RhcnRQb3MubGVmdCkgLyBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aDtcclxuICAgICAgc2VsZi5wZXJjZW50YWdlT2ZJbWFnZUF0UGluY2hQb2ludFkgPSAoc2VsZi5jZW50ZXJQb2ludFN0YXJ0WSAtIHNlbGYuY29udGVudFN0YXJ0UG9zLnRvcCkgLyBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG4gICAgICBzZWxmLnN0YXJ0RGlzdGFuY2VCZXR3ZWVuRmluZ2VycyA9IGRpc3RhbmNlKHNlbGYuc3RhcnRQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMV0pO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUub25zY3JvbGwgPSBmdW5jdGlvbihlKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgc2VsZi5pc1Njcm9sbGluZyA9IHRydWU7XHJcblxyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzZWxmLm9uc2Nyb2xsLCB0cnVlKTtcclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9udG91Y2htb3ZlID0gZnVuY3Rpb24oZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8vIE1ha2Ugc3VyZSB1c2VyIGhhcyBub3QgcmVsZWFzZWQgb3ZlciBpZnJhbWUgb3IgZGlzYWJsZWQgZWxlbWVudFxyXG4gICAgaWYgKGUub3JpZ2luYWxFdmVudC5idXR0b25zICE9PSB1bmRlZmluZWQgJiYgZS5vcmlnaW5hbEV2ZW50LmJ1dHRvbnMgPT09IDApIHtcclxuICAgICAgc2VsZi5vbnRvdWNoZW5kKGUpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNlbGYuaXNTY3JvbGxpbmcpIHtcclxuICAgICAgc2VsZi5jYW5UYXAgPSBmYWxzZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYubmV3UG9pbnRzID0gZ2V0UG9pbnRlclhZKGUpO1xyXG5cclxuICAgIGlmICghKHNlbGYub3B0cyB8fCBzZWxmLmNhblBhbikgfHwgIXNlbGYubmV3UG9pbnRzLmxlbmd0aCB8fCAhc2VsZi5uZXdQb2ludHMubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIShzZWxmLmlzU3dpcGluZyAmJiBzZWxmLmlzU3dpcGluZyA9PT0gdHJ1ZSkpIHtcclxuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYuZGlzdGFuY2VYID0gZGlzdGFuY2Uoc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMF0sIFwieFwiKTtcclxuICAgIHNlbGYuZGlzdGFuY2VZID0gZGlzdGFuY2Uoc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMF0sIFwieVwiKTtcclxuXHJcbiAgICBzZWxmLmRpc3RhbmNlID0gZGlzdGFuY2Uoc2VsZi5uZXdQb2ludHNbMF0sIHNlbGYuc3RhcnRQb2ludHNbMF0pO1xyXG5cclxuICAgIC8vIFNraXAgZmFsc2Ugb250b3VjaG1vdmUgZXZlbnRzIChDaHJvbWUpXHJcbiAgICBpZiAoc2VsZi5kaXN0YW5jZSA+IDApIHtcclxuICAgICAgaWYgKHNlbGYuaXNTd2lwaW5nKSB7XHJcbiAgICAgICAgc2VsZi5vblN3aXBlKGUpO1xyXG4gICAgICB9IGVsc2UgaWYgKHNlbGYuaXNQYW5uaW5nKSB7XHJcbiAgICAgICAgc2VsZi5vblBhbigpO1xyXG4gICAgICB9IGVsc2UgaWYgKHNlbGYuaXNab29taW5nKSB7XHJcbiAgICAgICAgc2VsZi5vblpvb20oKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUub25Td2lwZSA9IGZ1bmN0aW9uKGUpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG4gICAgICBzd2lwaW5nID0gc2VsZi5pc1N3aXBpbmcsXHJcbiAgICAgIGxlZnQgPSBzZWxmLnNsaWRlclN0YXJ0UG9zLmxlZnQgfHwgMCxcclxuICAgICAgYW5nbGU7XHJcblxyXG4gICAgLy8gSWYgZGlyZWN0aW9uIGlzIG5vdCB5ZXQgZGV0ZXJtaW5lZFxyXG4gICAgaWYgKHN3aXBpbmcgPT09IHRydWUpIHtcclxuICAgICAgLy8gV2UgbmVlZCBhdCBsZWFzdCAxMHB4IGRpc3RhbmNlIHRvIGNvcnJlY3RseSBjYWxjdWxhdGUgYW4gYW5nbGVcclxuICAgICAgaWYgKE1hdGguYWJzKHNlbGYuZGlzdGFuY2UpID4gMTApIHtcclxuICAgICAgICBzZWxmLmNhblRhcCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBpZiAoaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIDwgMiAmJiBzZWxmLm9wdHMudmVydGljYWwpIHtcclxuICAgICAgICAgIHNlbGYuaXNTd2lwaW5nID0gXCJ5XCI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZS5pc0RyYWdnaW5nIHx8IHNlbGYub3B0cy52ZXJ0aWNhbCA9PT0gZmFsc2UgfHwgKHNlbGYub3B0cy52ZXJ0aWNhbCA9PT0gXCJhdXRvXCIgJiYgJCh3aW5kb3cpLndpZHRoKCkgPiA4MDApKSB7XHJcbiAgICAgICAgICBzZWxmLmlzU3dpcGluZyA9IFwieFwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhbmdsZSA9IE1hdGguYWJzKChNYXRoLmF0YW4yKHNlbGYuZGlzdGFuY2VZLCBzZWxmLmRpc3RhbmNlWCkgKiAxODApIC8gTWF0aC5QSSk7XHJcblxyXG4gICAgICAgICAgc2VsZi5pc1N3aXBpbmcgPSBhbmdsZSA+IDQ1ICYmIGFuZ2xlIDwgMTM1ID8gXCJ5XCIgOiBcInhcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzZWxmLmlzU3dpcGluZyA9PT0gXCJ5XCIgJiYgJC5mYW5jeWJveC5pc01vYmlsZSAmJiBzZWxmLmlzU2Nyb2xsYWJsZSkge1xyXG4gICAgICAgICAgc2VsZi5pc1Njcm9sbGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zdGFuY2UuaXNEcmFnZ2luZyA9IHNlbGYuaXNTd2lwaW5nO1xyXG5cclxuICAgICAgICAvLyBSZXNldCBwb2ludHMgdG8gYXZvaWQganVtcGluZywgYmVjYXVzZSB3ZSBkcm9wcGVkIGZpcnN0IHN3aXBlcyB0byBjYWxjdWxhdGUgdGhlIGFuZ2xlXHJcbiAgICAgICAgc2VsZi5zdGFydFBvaW50cyA9IHNlbGYubmV3UG9pbnRzO1xyXG5cclxuICAgICAgICAkLmVhY2goaW5zdGFuY2Uuc2xpZGVzLCBmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcclxuICAgICAgICAgIHZhciBzbGlkZVBvcywgc3RhZ2VQb3M7XHJcblxyXG4gICAgICAgICAgJC5mYW5jeWJveC5zdG9wKHNsaWRlLiRzbGlkZSk7XHJcblxyXG4gICAgICAgICAgc2xpZGVQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShzbGlkZS4kc2xpZGUpO1xyXG4gICAgICAgICAgc3RhZ2VQb3MgPSAkLmZhbmN5Ym94LmdldFRyYW5zbGF0ZShpbnN0YW5jZS4kcmVmcy5zdGFnZSk7XHJcblxyXG4gICAgICAgICAgc2xpZGUuJHNsaWRlXHJcbiAgICAgICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogXCJcIixcclxuICAgICAgICAgICAgICBvcGFjaXR5OiBcIlwiLFxyXG4gICAgICAgICAgICAgIFwidHJhbnNpdGlvbi1kdXJhdGlvblwiOiBcIlwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhcImZhbmN5Ym94LWFuaW1hdGVkXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcyhmdW5jdGlvbihpbmRleCwgY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIChjbGFzc05hbWUubWF0Y2goLyhefFxccylmYW5jeWJveC1meC1cXFMrL2cpIHx8IFtdKS5qb2luKFwiIFwiKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgaWYgKHNsaWRlLnBvcyA9PT0gaW5zdGFuY2UuY3VycmVudC5wb3MpIHtcclxuICAgICAgICAgICAgc2VsZi5zbGlkZXJTdGFydFBvcy50b3AgPSBzbGlkZVBvcy50b3AgLSBzdGFnZVBvcy50b3A7XHJcbiAgICAgICAgICAgIHNlbGYuc2xpZGVyU3RhcnRQb3MubGVmdCA9IHNsaWRlUG9zLmxlZnQgLSBzdGFnZVBvcy5sZWZ0O1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKHNsaWRlLiRzbGlkZSwge1xyXG4gICAgICAgICAgICB0b3A6IHNsaWRlUG9zLnRvcCAtIHN0YWdlUG9zLnRvcCxcclxuICAgICAgICAgICAgbGVmdDogc2xpZGVQb3MubGVmdCAtIHN0YWdlUG9zLmxlZnRcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBTdG9wIHNsaWRlc2hvd1xyXG4gICAgICAgIGlmIChpbnN0YW5jZS5TbGlkZVNob3cgJiYgaW5zdGFuY2UuU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5TbGlkZVNob3cuc3RvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0aWNreSBlZGdlc1xyXG4gICAgaWYgKHN3aXBpbmcgPT0gXCJ4XCIpIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHNlbGYuZGlzdGFuY2VYID4gMCAmJlxyXG4gICAgICAgIChzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCA8IDIgfHwgKHNlbGYuaW5zdGFuY2UuY3VycmVudC5pbmRleCA9PT0gMCAmJiAhc2VsZi5pbnN0YW5jZS5jdXJyZW50Lm9wdHMubG9vcCkpXHJcbiAgICAgICkge1xyXG4gICAgICAgIGxlZnQgPSBsZWZ0ICsgTWF0aC5wb3coc2VsZi5kaXN0YW5jZVgsIDAuOCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgc2VsZi5kaXN0YW5jZVggPCAwICYmXHJcbiAgICAgICAgKHNlbGYuaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIDwgMiB8fFxyXG4gICAgICAgICAgKHNlbGYuaW5zdGFuY2UuY3VycmVudC5pbmRleCA9PT0gc2VsZi5pbnN0YW5jZS5ncm91cC5sZW5ndGggLSAxICYmICFzZWxmLmluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wKSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgbGVmdCA9IGxlZnQgLSBNYXRoLnBvdygtc2VsZi5kaXN0YW5jZVgsIDAuOCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGVmdCA9IGxlZnQgKyBzZWxmLmRpc3RhbmNlWDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNlbGYuc2xpZGVyTGFzdFBvcyA9IHtcclxuICAgICAgdG9wOiBzd2lwaW5nID09IFwieFwiID8gMCA6IHNlbGYuc2xpZGVyU3RhcnRQb3MudG9wICsgc2VsZi5kaXN0YW5jZVksXHJcbiAgICAgIGxlZnQ6IGxlZnRcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHNlbGYucmVxdWVzdElkKSB7XHJcbiAgICAgIGNhbmNlbEFGcmFtZShzZWxmLnJlcXVlc3RJZCk7XHJcblxyXG4gICAgICBzZWxmLnJlcXVlc3RJZCA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZi5yZXF1ZXN0SWQgPSByZXF1ZXN0QUZyYW1lKGZ1bmN0aW9uKCkge1xyXG4gICAgICBpZiAoc2VsZi5zbGlkZXJMYXN0UG9zKSB7XHJcbiAgICAgICAgJC5lYWNoKHNlbGYuaW5zdGFuY2Uuc2xpZGVzLCBmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcclxuICAgICAgICAgIHZhciBwb3MgPSBzbGlkZS5wb3MgLSBzZWxmLmluc3RhbmNlLmN1cnJQb3M7XHJcblxyXG4gICAgICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2xpZGUuJHNsaWRlLCB7XHJcbiAgICAgICAgICAgIHRvcDogc2VsZi5zbGlkZXJMYXN0UG9zLnRvcCxcclxuICAgICAgICAgICAgbGVmdDogc2VsZi5zbGlkZXJMYXN0UG9zLmxlZnQgKyBwb3MgKiBzZWxmLmNhbnZhc1dpZHRoICsgcG9zICogc2xpZGUub3B0cy5ndXR0ZXJcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLiRjb250YWluZXIuYWRkQ2xhc3MoXCJmYW5jeWJveC1pcy1zbGlkaW5nXCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9uUGFuID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgLy8gUHJldmVudCBhY2NpZGVudGFsIG1vdmVtZW50IChzb21ldGltZXMsIHdoZW4gdGFwcGluZyBjYXN1YWxseSwgZmluZ2VyIGNhbiBtb3ZlIGEgYml0KVxyXG4gICAgaWYgKGRpc3RhbmNlKHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLnJlYWxQb2ludHNbMF0pIDwgKCQuZmFuY3lib3guaXNNb2JpbGUgPyAxMCA6IDUpKSB7XHJcbiAgICAgIHNlbGYuc3RhcnRQb2ludHMgPSBzZWxmLm5ld1BvaW50cztcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG4gICAgc2VsZi5jb250ZW50TGFzdFBvcyA9IHNlbGYubGltaXRNb3ZlbWVudCgpO1xyXG5cclxuICAgIGlmIChzZWxmLnJlcXVlc3RJZCkge1xyXG4gICAgICBjYW5jZWxBRnJhbWUoc2VsZi5yZXF1ZXN0SWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYucmVxdWVzdElkID0gcmVxdWVzdEFGcmFtZShmdW5jdGlvbigpIHtcclxuICAgICAgJC5mYW5jeWJveC5zZXRUcmFuc2xhdGUoc2VsZi4kY29udGVudCwgc2VsZi5jb250ZW50TGFzdFBvcyk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAvLyBNYWtlIHBhbm5pbmcgc3RpY2t5IHRvIHRoZSBlZGdlc1xyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUubGltaXRNb3ZlbWVudCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBjYW52YXNXaWR0aCA9IHNlbGYuY2FudmFzV2lkdGg7XHJcbiAgICB2YXIgY2FudmFzSGVpZ2h0ID0gc2VsZi5jYW52YXNIZWlnaHQ7XHJcblxyXG4gICAgdmFyIGRpc3RhbmNlWCA9IHNlbGYuZGlzdGFuY2VYO1xyXG4gICAgdmFyIGRpc3RhbmNlWSA9IHNlbGYuZGlzdGFuY2VZO1xyXG5cclxuICAgIHZhciBjb250ZW50U3RhcnRQb3MgPSBzZWxmLmNvbnRlbnRTdGFydFBvcztcclxuXHJcbiAgICB2YXIgY3VycmVudE9mZnNldFggPSBjb250ZW50U3RhcnRQb3MubGVmdDtcclxuICAgIHZhciBjdXJyZW50T2Zmc2V0WSA9IGNvbnRlbnRTdGFydFBvcy50b3A7XHJcblxyXG4gICAgdmFyIGN1cnJlbnRXaWR0aCA9IGNvbnRlbnRTdGFydFBvcy53aWR0aDtcclxuICAgIHZhciBjdXJyZW50SGVpZ2h0ID0gY29udGVudFN0YXJ0UG9zLmhlaWdodDtcclxuXHJcbiAgICB2YXIgbWluVHJhbnNsYXRlWCwgbWluVHJhbnNsYXRlWSwgbWF4VHJhbnNsYXRlWCwgbWF4VHJhbnNsYXRlWSwgbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WTtcclxuXHJcbiAgICBpZiAoY3VycmVudFdpZHRoID4gY2FudmFzV2lkdGgpIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYICsgZGlzdGFuY2VYO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld09mZnNldFkgPSBjdXJyZW50T2Zmc2V0WSArIGRpc3RhbmNlWTtcclxuXHJcbiAgICAvLyBTbG93IGRvd24gcHJvcG9ydGlvbmFsbHkgdG8gdHJhdmVsZWQgZGlzdGFuY2VcclxuICAgIG1pblRyYW5zbGF0ZVggPSBNYXRoLm1heCgwLCBjYW52YXNXaWR0aCAqIDAuNSAtIGN1cnJlbnRXaWR0aCAqIDAuNSk7XHJcbiAgICBtaW5UcmFuc2xhdGVZID0gTWF0aC5tYXgoMCwgY2FudmFzSGVpZ2h0ICogMC41IC0gY3VycmVudEhlaWdodCAqIDAuNSk7XHJcblxyXG4gICAgbWF4VHJhbnNsYXRlWCA9IE1hdGgubWluKGNhbnZhc1dpZHRoIC0gY3VycmVudFdpZHRoLCBjYW52YXNXaWR0aCAqIDAuNSAtIGN1cnJlbnRXaWR0aCAqIDAuNSk7XHJcbiAgICBtYXhUcmFuc2xhdGVZID0gTWF0aC5taW4oY2FudmFzSGVpZ2h0IC0gY3VycmVudEhlaWdodCwgY2FudmFzSGVpZ2h0ICogMC41IC0gY3VycmVudEhlaWdodCAqIDAuNSk7XHJcblxyXG4gICAgLy8gICAtPlxyXG4gICAgaWYgKGRpc3RhbmNlWCA+IDAgJiYgbmV3T2Zmc2V0WCA+IG1pblRyYW5zbGF0ZVgpIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IG1pblRyYW5zbGF0ZVggLSAxICsgTWF0aC5wb3coLW1pblRyYW5zbGF0ZVggKyBjdXJyZW50T2Zmc2V0WCArIGRpc3RhbmNlWCwgMC44KSB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICAgIDwtXHJcbiAgICBpZiAoZGlzdGFuY2VYIDwgMCAmJiBuZXdPZmZzZXRYIDwgbWF4VHJhbnNsYXRlWCkge1xyXG4gICAgICBuZXdPZmZzZXRYID0gbWF4VHJhbnNsYXRlWCArIDEgLSBNYXRoLnBvdyhtYXhUcmFuc2xhdGVYIC0gY3VycmVudE9mZnNldFggLSBkaXN0YW5jZVgsIDAuOCkgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICAvLyAgIFxcL1xyXG4gICAgaWYgKGRpc3RhbmNlWSA+IDAgJiYgbmV3T2Zmc2V0WSA+IG1pblRyYW5zbGF0ZVkpIHtcclxuICAgICAgbmV3T2Zmc2V0WSA9IG1pblRyYW5zbGF0ZVkgLSAxICsgTWF0aC5wb3coLW1pblRyYW5zbGF0ZVkgKyBjdXJyZW50T2Zmc2V0WSArIGRpc3RhbmNlWSwgMC44KSB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIC8vICAgL1xcXHJcbiAgICBpZiAoZGlzdGFuY2VZIDwgMCAmJiBuZXdPZmZzZXRZIDwgbWF4VHJhbnNsYXRlWSkge1xyXG4gICAgICBuZXdPZmZzZXRZID0gbWF4VHJhbnNsYXRlWSArIDEgLSBNYXRoLnBvdyhtYXhUcmFuc2xhdGVZIC0gY3VycmVudE9mZnNldFkgLSBkaXN0YW5jZVksIDAuOCkgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0b3A6IG5ld09mZnNldFksXHJcbiAgICAgIGxlZnQ6IG5ld09mZnNldFhcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5saW1pdFBvc2l0aW9uID0gZnVuY3Rpb24obmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgbmV3V2lkdGgsIG5ld0hlaWdodCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBjYW52YXNXaWR0aCA9IHNlbGYuY2FudmFzV2lkdGg7XHJcbiAgICB2YXIgY2FudmFzSGVpZ2h0ID0gc2VsZi5jYW52YXNIZWlnaHQ7XHJcblxyXG4gICAgaWYgKG5ld1dpZHRoID4gY2FudmFzV2lkdGgpIHtcclxuICAgICAgbmV3T2Zmc2V0WCA9IG5ld09mZnNldFggPiAwID8gMCA6IG5ld09mZnNldFg7XHJcbiAgICAgIG5ld09mZnNldFggPSBuZXdPZmZzZXRYIDwgY2FudmFzV2lkdGggLSBuZXdXaWR0aCA/IGNhbnZhc1dpZHRoIC0gbmV3V2lkdGggOiBuZXdPZmZzZXRYO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ2VudGVyIGhvcml6b250YWxseVxyXG4gICAgICBuZXdPZmZzZXRYID0gTWF0aC5tYXgoMCwgY2FudmFzV2lkdGggLyAyIC0gbmV3V2lkdGggLyAyKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmV3SGVpZ2h0ID4gY2FudmFzSGVpZ2h0KSB7XHJcbiAgICAgIG5ld09mZnNldFkgPSBuZXdPZmZzZXRZID4gMCA/IDAgOiBuZXdPZmZzZXRZO1xyXG4gICAgICBuZXdPZmZzZXRZID0gbmV3T2Zmc2V0WSA8IGNhbnZhc0hlaWdodCAtIG5ld0hlaWdodCA/IGNhbnZhc0hlaWdodCAtIG5ld0hlaWdodCA6IG5ld09mZnNldFk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBDZW50ZXIgdmVydGljYWxseVxyXG4gICAgICBuZXdPZmZzZXRZID0gTWF0aC5tYXgoMCwgY2FudmFzSGVpZ2h0IC8gMiAtIG5ld0hlaWdodCAvIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRvcDogbmV3T2Zmc2V0WSxcclxuICAgICAgbGVmdDogbmV3T2Zmc2V0WFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9uWm9vbSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBjdXJyZW50IGRpc3RhbmNlIGJldHdlZW4gcG9pbnRzIHRvIGdldCBwaW5jaCByYXRpbyBhbmQgbmV3IHdpZHRoIGFuZCBoZWlnaHRcclxuICAgIHZhciBjb250ZW50U3RhcnRQb3MgPSBzZWxmLmNvbnRlbnRTdGFydFBvcztcclxuXHJcbiAgICB2YXIgY3VycmVudFdpZHRoID0gY29udGVudFN0YXJ0UG9zLndpZHRoO1xyXG4gICAgdmFyIGN1cnJlbnRIZWlnaHQgPSBjb250ZW50U3RhcnRQb3MuaGVpZ2h0O1xyXG5cclxuICAgIHZhciBjdXJyZW50T2Zmc2V0WCA9IGNvbnRlbnRTdGFydFBvcy5sZWZ0O1xyXG4gICAgdmFyIGN1cnJlbnRPZmZzZXRZID0gY29udGVudFN0YXJ0UG9zLnRvcDtcclxuXHJcbiAgICB2YXIgZW5kRGlzdGFuY2VCZXR3ZWVuRmluZ2VycyA9IGRpc3RhbmNlKHNlbGYubmV3UG9pbnRzWzBdLCBzZWxmLm5ld1BvaW50c1sxXSk7XHJcblxyXG4gICAgdmFyIHBpbmNoUmF0aW8gPSBlbmREaXN0YW5jZUJldHdlZW5GaW5nZXJzIC8gc2VsZi5zdGFydERpc3RhbmNlQmV0d2VlbkZpbmdlcnM7XHJcblxyXG4gICAgdmFyIG5ld1dpZHRoID0gTWF0aC5mbG9vcihjdXJyZW50V2lkdGggKiBwaW5jaFJhdGlvKTtcclxuICAgIHZhciBuZXdIZWlnaHQgPSBNYXRoLmZsb29yKGN1cnJlbnRIZWlnaHQgKiBwaW5jaFJhdGlvKTtcclxuXHJcbiAgICAvLyBUaGlzIGlzIHRoZSB0cmFuc2xhdGlvbiBkdWUgdG8gcGluY2gtem9vbWluZ1xyXG4gICAgdmFyIHRyYW5zbGF0ZUZyb21ab29taW5nWCA9IChjdXJyZW50V2lkdGggLSBuZXdXaWR0aCkgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WDtcclxuICAgIHZhciB0cmFuc2xhdGVGcm9tWm9vbWluZ1kgPSAoY3VycmVudEhlaWdodCAtIG5ld0hlaWdodCkgKiBzZWxmLnBlcmNlbnRhZ2VPZkltYWdlQXRQaW5jaFBvaW50WTtcclxuXHJcbiAgICAvLyBQb2ludCBiZXR3ZWVuIHRoZSB0d28gdG91Y2hlc1xyXG4gICAgdmFyIGNlbnRlclBvaW50RW5kWCA9IChzZWxmLm5ld1BvaW50c1swXS54ICsgc2VsZi5uZXdQb2ludHNbMV0ueCkgLyAyIC0gJCh3aW5kb3cpLnNjcm9sbExlZnQoKTtcclxuICAgIHZhciBjZW50ZXJQb2ludEVuZFkgPSAoc2VsZi5uZXdQb2ludHNbMF0ueSArIHNlbGYubmV3UG9pbnRzWzFdLnkpIC8gMiAtICQod2luZG93KS5zY3JvbGxUb3AoKTtcclxuXHJcbiAgICAvLyBBbmQgdGhpcyBpcyB0aGUgdHJhbnNsYXRpb24gZHVlIHRvIHRyYW5zbGF0aW9uIG9mIHRoZSBjZW50ZXJwb2ludFxyXG4gICAgLy8gYmV0d2VlbiB0aGUgdHdvIGZpbmdlcnNcclxuICAgIHZhciB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdYID0gY2VudGVyUG9pbnRFbmRYIC0gc2VsZi5jZW50ZXJQb2ludFN0YXJ0WDtcclxuICAgIHZhciB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZID0gY2VudGVyUG9pbnRFbmRZIC0gc2VsZi5jZW50ZXJQb2ludFN0YXJ0WTtcclxuXHJcbiAgICAvLyBUaGUgbmV3IG9mZnNldCBpcyB0aGUgb2xkL2N1cnJlbnQgb25lIHBsdXMgdGhlIHRvdGFsIHRyYW5zbGF0aW9uXHJcbiAgICB2YXIgbmV3T2Zmc2V0WCA9IGN1cnJlbnRPZmZzZXRYICsgKHRyYW5zbGF0ZUZyb21ab29taW5nWCArIHRyYW5zbGF0ZUZyb21UcmFuc2xhdGluZ1gpO1xyXG4gICAgdmFyIG5ld09mZnNldFkgPSBjdXJyZW50T2Zmc2V0WSArICh0cmFuc2xhdGVGcm9tWm9vbWluZ1kgKyB0cmFuc2xhdGVGcm9tVHJhbnNsYXRpbmdZKTtcclxuXHJcbiAgICB2YXIgbmV3UG9zID0ge1xyXG4gICAgICB0b3A6IG5ld09mZnNldFksXHJcbiAgICAgIGxlZnQ6IG5ld09mZnNldFgsXHJcbiAgICAgIHNjYWxlWDogcGluY2hSYXRpbyxcclxuICAgICAgc2NhbGVZOiBwaW5jaFJhdGlvXHJcbiAgICB9O1xyXG5cclxuICAgIHNlbGYuY2FuVGFwID0gZmFsc2U7XHJcblxyXG4gICAgc2VsZi5uZXdXaWR0aCA9IG5ld1dpZHRoO1xyXG4gICAgc2VsZi5uZXdIZWlnaHQgPSBuZXdIZWlnaHQ7XHJcblxyXG4gICAgc2VsZi5jb250ZW50TGFzdFBvcyA9IG5ld1BvcztcclxuXHJcbiAgICBpZiAoc2VsZi5yZXF1ZXN0SWQpIHtcclxuICAgICAgY2FuY2VsQUZyYW1lKHNlbGYucmVxdWVzdElkKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLnJlcXVlc3RJZCA9IHJlcXVlc3RBRnJhbWUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICQuZmFuY3lib3guc2V0VHJhbnNsYXRlKHNlbGYuJGNvbnRlbnQsIHNlbGYuY29udGVudExhc3RQb3MpO1xyXG4gICAgfSk7XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5vbnRvdWNoZW5kID0gZnVuY3Rpb24oZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgIHZhciBzd2lwaW5nID0gc2VsZi5pc1N3aXBpbmc7XHJcbiAgICB2YXIgcGFubmluZyA9IHNlbGYuaXNQYW5uaW5nO1xyXG4gICAgdmFyIHpvb21pbmcgPSBzZWxmLmlzWm9vbWluZztcclxuICAgIHZhciBzY3JvbGxpbmcgPSBzZWxmLmlzU2Nyb2xsaW5nO1xyXG5cclxuICAgIHNlbGYuZW5kUG9pbnRzID0gZ2V0UG9pbnRlclhZKGUpO1xyXG4gICAgc2VsZi5kTXMgPSBNYXRoLm1heChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHNlbGYuc3RhcnRUaW1lLCAxKTtcclxuXHJcbiAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1ncmFiYmluZ1wiKTtcclxuXHJcbiAgICAkKGRvY3VtZW50KS5vZmYoXCIuZmIudG91Y2hcIik7XHJcblxyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzZWxmLm9uc2Nyb2xsLCB0cnVlKTtcclxuXHJcbiAgICBpZiAoc2VsZi5yZXF1ZXN0SWQpIHtcclxuICAgICAgY2FuY2VsQUZyYW1lKHNlbGYucmVxdWVzdElkKTtcclxuXHJcbiAgICAgIHNlbGYucmVxdWVzdElkID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLmlzU3dpcGluZyA9IGZhbHNlO1xyXG4gICAgc2VsZi5pc1Bhbm5pbmcgPSBmYWxzZTtcclxuICAgIHNlbGYuaXNab29taW5nID0gZmFsc2U7XHJcbiAgICBzZWxmLmlzU2Nyb2xsaW5nID0gZmFsc2U7XHJcblxyXG4gICAgc2VsZi5pbnN0YW5jZS5pc0RyYWdnaW5nID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKHNlbGYuY2FuVGFwKSB7XHJcbiAgICAgIHJldHVybiBzZWxmLm9uVGFwKGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHNlbGYuc3BlZWQgPSAxMDA7XHJcblxyXG4gICAgLy8gU3BlZWQgaW4gcHgvbXNcclxuICAgIHNlbGYudmVsb2NpdHlYID0gKHNlbGYuZGlzdGFuY2VYIC8gc2VsZi5kTXMpICogMC41O1xyXG4gICAgc2VsZi52ZWxvY2l0eVkgPSAoc2VsZi5kaXN0YW5jZVkgLyBzZWxmLmRNcykgKiAwLjU7XHJcblxyXG4gICAgaWYgKHBhbm5pbmcpIHtcclxuICAgICAgc2VsZi5lbmRQYW5uaW5nKCk7XHJcbiAgICB9IGVsc2UgaWYgKHpvb21pbmcpIHtcclxuICAgICAgc2VsZi5lbmRab29taW5nKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzZWxmLmVuZFN3aXBpbmcoc3dpcGluZywgc2Nyb2xsaW5nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm47XHJcbiAgfTtcclxuXHJcbiAgR3Vlc3R1cmVzLnByb3RvdHlwZS5lbmRTd2lwaW5nID0gZnVuY3Rpb24oc3dpcGluZywgc2Nyb2xsaW5nKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgIHJldCA9IGZhbHNlLFxyXG4gICAgICBsZW4gPSBzZWxmLmluc3RhbmNlLmdyb3VwLmxlbmd0aCxcclxuICAgICAgZGlzdGFuY2VYID0gTWF0aC5hYnMoc2VsZi5kaXN0YW5jZVgpLFxyXG4gICAgICBjYW5BZHZhbmNlID0gc3dpcGluZyA9PSBcInhcIiAmJiBsZW4gPiAxICYmICgoc2VsZi5kTXMgPiAxMzAgJiYgZGlzdGFuY2VYID4gMTApIHx8IGRpc3RhbmNlWCA+IDUwKSxcclxuICAgICAgc3BlZWRYID0gMzAwO1xyXG5cclxuICAgIHNlbGYuc2xpZGVyTGFzdFBvcyA9IG51bGw7XHJcblxyXG4gICAgLy8gQ2xvc2UgaWYgc3dpcGVkIHZlcnRpY2FsbHkgLyBuYXZpZ2F0ZSBpZiBob3Jpem9udGFsbHlcclxuICAgIGlmIChzd2lwaW5nID09IFwieVwiICYmICFzY3JvbGxpbmcgJiYgTWF0aC5hYnMoc2VsZi5kaXN0YW5jZVkpID4gNTApIHtcclxuICAgICAgLy8gQ29udGludWUgdmVydGljYWwgbW92ZW1lbnRcclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKFxyXG4gICAgICAgIHNlbGYuaW5zdGFuY2UuY3VycmVudC4kc2xpZGUsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdG9wOiBzZWxmLnNsaWRlclN0YXJ0UG9zLnRvcCArIHNlbGYuZGlzdGFuY2VZICsgc2VsZi52ZWxvY2l0eVkgKiAxNTAsXHJcbiAgICAgICAgICBvcGFjaXR5OiAwXHJcbiAgICAgICAgfSxcclxuICAgICAgICAyMDBcclxuICAgICAgKTtcclxuICAgICAgcmV0ID0gc2VsZi5pbnN0YW5jZS5jbG9zZSh0cnVlLCAyNTApO1xyXG4gICAgfSBlbHNlIGlmIChjYW5BZHZhbmNlICYmIHNlbGYuZGlzdGFuY2VYID4gMCkge1xyXG4gICAgICByZXQgPSBzZWxmLmluc3RhbmNlLnByZXZpb3VzKHNwZWVkWCk7XHJcbiAgICB9IGVsc2UgaWYgKGNhbkFkdmFuY2UgJiYgc2VsZi5kaXN0YW5jZVggPCAwKSB7XHJcbiAgICAgIHJldCA9IHNlbGYuaW5zdGFuY2UubmV4dChzcGVlZFgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChyZXQgPT09IGZhbHNlICYmIChzd2lwaW5nID09IFwieFwiIHx8IHN3aXBpbmcgPT0gXCJ5XCIpKSB7XHJcbiAgICAgIHNlbGYuaW5zdGFuY2UuY2VudGVyU2xpZGUoMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICBzZWxmLiRjb250YWluZXIucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1pcy1zbGlkaW5nXCIpO1xyXG4gIH07XHJcblxyXG4gIC8vIExpbWl0IHBhbm5pbmcgZnJvbSBlZGdlc1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIEd1ZXN0dXJlcy5wcm90b3R5cGUuZW5kUGFubmluZyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICBuZXdPZmZzZXRYLFxyXG4gICAgICBuZXdPZmZzZXRZLFxyXG4gICAgICBuZXdQb3M7XHJcblxyXG4gICAgaWYgKCFzZWxmLmNvbnRlbnRMYXN0UG9zKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2VsZi5vcHRzLm1vbWVudHVtID09PSBmYWxzZSB8fCBzZWxmLmRNcyA+IDM1MCkge1xyXG4gICAgICBuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50TGFzdFBvcy5sZWZ0O1xyXG4gICAgICBuZXdPZmZzZXRZID0gc2VsZi5jb250ZW50TGFzdFBvcy50b3A7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBDb250aW51ZSBtb3ZlbWVudFxyXG4gICAgICBuZXdPZmZzZXRYID0gc2VsZi5jb250ZW50TGFzdFBvcy5sZWZ0ICsgc2VsZi52ZWxvY2l0eVggKiA1MDA7XHJcbiAgICAgIG5ld09mZnNldFkgPSBzZWxmLmNvbnRlbnRMYXN0UG9zLnRvcCArIHNlbGYudmVsb2NpdHlZICogNTAwO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld1BvcyA9IHNlbGYubGltaXRQb3NpdGlvbihuZXdPZmZzZXRYLCBuZXdPZmZzZXRZLCBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aCwgc2VsZi5jb250ZW50U3RhcnRQb3MuaGVpZ2h0KTtcclxuXHJcbiAgICBuZXdQb3Mud2lkdGggPSBzZWxmLmNvbnRlbnRTdGFydFBvcy53aWR0aDtcclxuICAgIG5ld1Bvcy5oZWlnaHQgPSBzZWxmLmNvbnRlbnRTdGFydFBvcy5oZWlnaHQ7XHJcblxyXG4gICAgJC5mYW5jeWJveC5hbmltYXRlKHNlbGYuJGNvbnRlbnQsIG5ld1BvcywgMzMwKTtcclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLmVuZFpvb21pbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICB2YXIgY3VycmVudCA9IHNlbGYuaW5zdGFuY2UuY3VycmVudDtcclxuXHJcbiAgICB2YXIgbmV3T2Zmc2V0WCwgbmV3T2Zmc2V0WSwgbmV3UG9zLCByZXNldDtcclxuXHJcbiAgICB2YXIgbmV3V2lkdGggPSBzZWxmLm5ld1dpZHRoO1xyXG4gICAgdmFyIG5ld0hlaWdodCA9IHNlbGYubmV3SGVpZ2h0O1xyXG5cclxuICAgIGlmICghc2VsZi5jb250ZW50TGFzdFBvcykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbmV3T2Zmc2V0WCA9IHNlbGYuY29udGVudExhc3RQb3MubGVmdDtcclxuICAgIG5ld09mZnNldFkgPSBzZWxmLmNvbnRlbnRMYXN0UG9zLnRvcDtcclxuXHJcbiAgICByZXNldCA9IHtcclxuICAgICAgdG9wOiBuZXdPZmZzZXRZLFxyXG4gICAgICBsZWZ0OiBuZXdPZmZzZXRYLFxyXG4gICAgICB3aWR0aDogbmV3V2lkdGgsXHJcbiAgICAgIGhlaWdodDogbmV3SGVpZ2h0LFxyXG4gICAgICBzY2FsZVg6IDEsXHJcbiAgICAgIHNjYWxlWTogMVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBSZXNldCBzY2FsZXgvc2NhbGVZIHZhbHVlczsgdGhpcyBoZWxwcyBmb3IgcGVyZm9tYW5jZSBhbmQgZG9lcyBub3QgYnJlYWsgYW5pbWF0aW9uXHJcbiAgICAkLmZhbmN5Ym94LnNldFRyYW5zbGF0ZShzZWxmLiRjb250ZW50LCByZXNldCk7XHJcblxyXG4gICAgaWYgKG5ld1dpZHRoIDwgc2VsZi5jYW52YXNXaWR0aCAmJiBuZXdIZWlnaHQgPCBzZWxmLmNhbnZhc0hlaWdodCkge1xyXG4gICAgICBzZWxmLmluc3RhbmNlLnNjYWxlVG9GaXQoMTUwKTtcclxuICAgIH0gZWxzZSBpZiAobmV3V2lkdGggPiBjdXJyZW50LndpZHRoIHx8IG5ld0hlaWdodCA+IGN1cnJlbnQuaGVpZ2h0KSB7XHJcbiAgICAgIHNlbGYuaW5zdGFuY2Uuc2NhbGVUb0FjdHVhbChzZWxmLmNlbnRlclBvaW50U3RhcnRYLCBzZWxmLmNlbnRlclBvaW50U3RhcnRZLCAxNTApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3UG9zID0gc2VsZi5saW1pdFBvc2l0aW9uKG5ld09mZnNldFgsIG5ld09mZnNldFksIG5ld1dpZHRoLCBuZXdIZWlnaHQpO1xyXG5cclxuICAgICAgJC5mYW5jeWJveC5hbmltYXRlKHNlbGYuJGNvbnRlbnQsIG5ld1BvcywgMTUwKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBHdWVzdHVyZXMucHJvdG90eXBlLm9uVGFwID0gZnVuY3Rpb24oZSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgdmFyICR0YXJnZXQgPSAkKGUudGFyZ2V0KTtcclxuXHJcbiAgICB2YXIgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlO1xyXG4gICAgdmFyIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuICAgIHZhciBlbmRQb2ludHMgPSAoZSAmJiBnZXRQb2ludGVyWFkoZSkpIHx8IHNlbGYuc3RhcnRQb2ludHM7XHJcblxyXG4gICAgdmFyIHRhcFggPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueCAtICQod2luZG93KS5zY3JvbGxMZWZ0KCkgLSBzZWxmLnN0YWdlUG9zLmxlZnQgOiAwO1xyXG4gICAgdmFyIHRhcFkgPSBlbmRQb2ludHNbMF0gPyBlbmRQb2ludHNbMF0ueSAtICQod2luZG93KS5zY3JvbGxUb3AoKSAtIHNlbGYuc3RhZ2VQb3MudG9wIDogMDtcclxuXHJcbiAgICB2YXIgd2hlcmU7XHJcblxyXG4gICAgdmFyIHByb2Nlc3MgPSBmdW5jdGlvbihwcmVmaXgpIHtcclxuICAgICAgdmFyIGFjdGlvbiA9IGN1cnJlbnQub3B0c1twcmVmaXhdO1xyXG5cclxuICAgICAgaWYgKCQuaXNGdW5jdGlvbihhY3Rpb24pKSB7XHJcbiAgICAgICAgYWN0aW9uID0gYWN0aW9uLmFwcGx5KGluc3RhbmNlLCBbY3VycmVudCwgZV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWFjdGlvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3dpdGNoIChhY3Rpb24pIHtcclxuICAgICAgICBjYXNlIFwiY2xvc2VcIjpcclxuICAgICAgICAgIGluc3RhbmNlLmNsb3NlKHNlbGYuc3RhcnRFdmVudCk7XHJcblxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJ0b2dnbGVDb250cm9sc1wiOlxyXG4gICAgICAgICAgaW5zdGFuY2UudG9nZ2xlQ29udHJvbHMoKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcIm5leHRcIjpcclxuICAgICAgICAgIGluc3RhbmNlLm5leHQoKTtcclxuXHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcIm5leHRPckNsb3NlXCI6XHJcbiAgICAgICAgICBpZiAoaW5zdGFuY2UuZ3JvdXAubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5uZXh0KCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5jbG9zZShzZWxmLnN0YXJ0RXZlbnQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwiem9vbVwiOlxyXG4gICAgICAgICAgaWYgKGN1cnJlbnQudHlwZSA9PSBcImltYWdlXCIgJiYgKGN1cnJlbnQuaXNMb2FkZWQgfHwgY3VycmVudC4kZ2hvc3QpKSB7XHJcbiAgICAgICAgICAgIGlmIChpbnN0YW5jZS5jYW5QYW4oKSkge1xyXG4gICAgICAgICAgICAgIGluc3RhbmNlLnNjYWxlVG9GaXQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZS5pc1NjYWxlZERvd24oKSkge1xyXG4gICAgICAgICAgICAgIGluc3RhbmNlLnNjYWxlVG9BY3R1YWwodGFwWCwgdGFwWSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIDwgMikge1xyXG4gICAgICAgICAgICAgIGluc3RhbmNlLmNsb3NlKHNlbGYuc3RhcnRFdmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJZ25vcmUgcmlnaHQgY2xpY2tcclxuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQgJiYgZS5vcmlnaW5hbEV2ZW50LmJ1dHRvbiA9PSAyKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBTa2lwIGlmIGNsaWNrZWQgb24gdGhlIHNjcm9sbGJhclxyXG4gICAgaWYgKCEkdGFyZ2V0LmlzKFwiaW1nXCIpICYmIHRhcFggPiAkdGFyZ2V0WzBdLmNsaWVudFdpZHRoICsgJHRhcmdldC5vZmZzZXQoKS5sZWZ0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayB3aGVyZSBpcyBjbGlja2VkXHJcbiAgICBpZiAoJHRhcmdldC5pcyhcIi5mYW5jeWJveC1iZywuZmFuY3lib3gtaW5uZXIsLmZhbmN5Ym94LW91dGVyLC5mYW5jeWJveC1jb250YWluZXJcIikpIHtcclxuICAgICAgd2hlcmUgPSBcIk91dHNpZGVcIjtcclxuICAgIH0gZWxzZSBpZiAoJHRhcmdldC5pcyhcIi5mYW5jeWJveC1zbGlkZVwiKSkge1xyXG4gICAgICB3aGVyZSA9IFwiU2xpZGVcIjtcclxuICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgIGluc3RhbmNlLmN1cnJlbnQuJGNvbnRlbnQgJiZcclxuICAgICAgaW5zdGFuY2UuY3VycmVudC4kY29udGVudFxyXG4gICAgICAgIC5maW5kKCR0YXJnZXQpXHJcbiAgICAgICAgLmFkZEJhY2soKVxyXG4gICAgICAgIC5maWx0ZXIoJHRhcmdldCkubGVuZ3RoXHJcbiAgICApIHtcclxuICAgICAgd2hlcmUgPSBcIkNvbnRlbnRcIjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBpZiB0aGlzIGlzIGEgZG91YmxlIHRhcFxyXG4gICAgaWYgKHNlbGYudGFwcGVkKSB7XHJcbiAgICAgIC8vIFN0b3AgcHJldmlvdXNseSBjcmVhdGVkIHNpbmdsZSB0YXBcclxuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYudGFwcGVkKTtcclxuICAgICAgc2VsZi50YXBwZWQgPSBudWxsO1xyXG5cclxuICAgICAgLy8gU2tpcCBpZiBkaXN0YW5jZSBiZXR3ZWVuIHRhcHMgaXMgdG9vIGJpZ1xyXG4gICAgICBpZiAoTWF0aC5hYnModGFwWCAtIHNlbGYudGFwWCkgPiA1MCB8fCBNYXRoLmFicyh0YXBZIC0gc2VsZi50YXBZKSA+IDUwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIE9LLCBub3cgd2UgYXNzdW1lIHRoYXQgdGhpcyBpcyBhIGRvdWJsZS10YXBcclxuICAgICAgcHJvY2VzcyhcImRibGNsaWNrXCIgKyB3aGVyZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBTaW5nbGUgdGFwIHdpbGwgYmUgcHJvY2Vzc2VkIGlmIHVzZXIgaGFzIG5vdCBjbGlja2VkIHNlY29uZCB0aW1lIHdpdGhpbiAzMDBtc1xyXG4gICAgICAvLyBvciB0aGVyZSBpcyBubyBuZWVkIHRvIHdhaXQgZm9yIGRvdWJsZS10YXBcclxuICAgICAgc2VsZi50YXBYID0gdGFwWDtcclxuICAgICAgc2VsZi50YXBZID0gdGFwWTtcclxuXHJcbiAgICAgIGlmIChjdXJyZW50Lm9wdHNbXCJkYmxjbGlja1wiICsgd2hlcmVdICYmIGN1cnJlbnQub3B0c1tcImRibGNsaWNrXCIgKyB3aGVyZV0gIT09IGN1cnJlbnQub3B0c1tcImNsaWNrXCIgKyB3aGVyZV0pIHtcclxuICAgICAgICBzZWxmLnRhcHBlZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzZWxmLnRhcHBlZCA9IG51bGw7XHJcblxyXG4gICAgICAgICAgaWYgKCFpbnN0YW5jZS5pc0FuaW1hdGluZykge1xyXG4gICAgICAgICAgICBwcm9jZXNzKFwiY2xpY2tcIiArIHdoZXJlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHByb2Nlc3MoXCJjbGlja1wiICsgd2hlcmUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgJChkb2N1bWVudClcclxuICAgIC5vbihcIm9uQWN0aXZhdGUuZmJcIiwgZnVuY3Rpb24oZSwgaW5zdGFuY2UpIHtcclxuICAgICAgaWYgKGluc3RhbmNlICYmICFpbnN0YW5jZS5HdWVzdHVyZXMpIHtcclxuICAgICAgICBpbnN0YW5jZS5HdWVzdHVyZXMgPSBuZXcgR3Vlc3R1cmVzKGluc3RhbmNlKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC5vbihcImJlZm9yZUNsb3NlLmZiXCIsIGZ1bmN0aW9uKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5HdWVzdHVyZXMpIHtcclxuICAgICAgICBpbnN0YW5jZS5HdWVzdHVyZXMuZGVzdHJveSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxufSkod2luZG93LCBkb2N1bWVudCwgalF1ZXJ5KTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBTbGlkZVNob3dcclxuLy8gRW5hYmxlcyBzbGlkZXNob3cgZnVuY3Rpb25hbGl0eVxyXG4vL1xyXG4vLyBFeGFtcGxlIG9mIHVzYWdlOlxyXG4vLyAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCkuU2xpZGVTaG93LnN0YXJ0KClcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuKGZ1bmN0aW9uKGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICQuZXh0ZW5kKHRydWUsICQuZmFuY3lib3guZGVmYXVsdHMsIHtcclxuICAgIGJ0blRwbDoge1xyXG4gICAgICBzbGlkZVNob3c6XHJcbiAgICAgICAgJzxidXR0b24gZGF0YS1mYW5jeWJveC1wbGF5IGNsYXNzPVwiZmFuY3lib3gtYnV0dG9uIGZhbmN5Ym94LWJ1dHRvbi0tcGxheVwiIHRpdGxlPVwie3tQTEFZX1NUQVJUfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNNi41IDUuNHYxMy4ybDExLTYuNnpcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTguMzMgNS43NWgyLjJ2MTIuNWgtMi4yVjUuNzV6bTUuMTUgMGgyLjJ2MTIuNWgtMi4yVjUuNzV6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgIFwiPC9idXR0b24+XCJcclxuICAgIH0sXHJcbiAgICBzbGlkZVNob3c6IHtcclxuICAgICAgYXV0b1N0YXJ0OiBmYWxzZSxcclxuICAgICAgc3BlZWQ6IDMwMDAsXHJcbiAgICAgIHByb2dyZXNzOiB0cnVlXHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIHZhciBTbGlkZVNob3cgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xyXG4gICAgdGhpcy5pbnN0YW5jZSA9IGluc3RhbmNlO1xyXG4gICAgdGhpcy5pbml0KCk7XHJcbiAgfTtcclxuXHJcbiAgJC5leHRlbmQoU2xpZGVTaG93LnByb3RvdHlwZSwge1xyXG4gICAgdGltZXI6IG51bGwsXHJcbiAgICBpc0FjdGl2ZTogZmFsc2UsXHJcbiAgICAkYnV0dG9uOiBudWxsLFxyXG5cclxuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG4gICAgICAgIG9wdHMgPSBpbnN0YW5jZS5ncm91cFtpbnN0YW5jZS5jdXJySW5kZXhdLm9wdHMuc2xpZGVTaG93O1xyXG5cclxuICAgICAgc2VsZi4kYnV0dG9uID0gaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtcGxheV1cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICBzZWxmLnRvZ2dsZSgpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8ICFvcHRzKSB7XHJcbiAgICAgICAgc2VsZi4kYnV0dG9uLmhpZGUoKTtcclxuICAgICAgfSBlbHNlIGlmIChvcHRzLnByb2dyZXNzKSB7XHJcbiAgICAgICAgc2VsZi4kcHJvZ3Jlc3MgPSAkKCc8ZGl2IGNsYXNzPVwiZmFuY3lib3gtcHJvZ3Jlc3NcIj48L2Rpdj4nKS5hcHBlbmRUbyhpbnN0YW5jZS4kcmVmcy5pbm5lcik7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc2V0OiBmdW5jdGlvbihmb3JjZSkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgaW5zdGFuY2UgPSBzZWxmLmluc3RhbmNlLFxyXG4gICAgICAgIGN1cnJlbnQgPSBpbnN0YW5jZS5jdXJyZW50O1xyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgcmVhY2hlZCBsYXN0IGVsZW1lbnRcclxuICAgICAgaWYgKGN1cnJlbnQgJiYgKGZvcmNlID09PSB0cnVlIHx8IGN1cnJlbnQub3B0cy5sb29wIHx8IGluc3RhbmNlLmN1cnJJbmRleCA8IGluc3RhbmNlLmdyb3VwLmxlbmd0aCAtIDEpKSB7XHJcbiAgICAgICAgaWYgKHNlbGYuaXNBY3RpdmUgJiYgY3VycmVudC5jb250ZW50VHlwZSAhPT0gXCJ2aWRlb1wiKSB7XHJcbiAgICAgICAgICBpZiAoc2VsZi4kcHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgJC5mYW5jeWJveC5hbmltYXRlKHNlbGYuJHByb2dyZXNzLnNob3coKSwge3NjYWxlWDogMX0sIGN1cnJlbnQub3B0cy5zbGlkZVNob3cuc3BlZWQpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHNlbGYudGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoIWluc3RhbmNlLmN1cnJlbnQub3B0cy5sb29wICYmIGluc3RhbmNlLmN1cnJlbnQuaW5kZXggPT0gaW5zdGFuY2UuZ3JvdXAubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgIGluc3RhbmNlLmp1bXBUbygwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpbnN0YW5jZS5uZXh0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sIGN1cnJlbnQub3B0cy5zbGlkZVNob3cuc3BlZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLnN0b3AoKTtcclxuICAgICAgICBpbnN0YW5jZS5pZGxlU2Vjb25kc0NvdW50ZXIgPSAwO1xyXG4gICAgICAgIGluc3RhbmNlLnNob3dDb250cm9scygpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNsZWFyOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZXIpO1xyXG5cclxuICAgICAgc2VsZi50aW1lciA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoc2VsZi4kcHJvZ3Jlc3MpIHtcclxuICAgICAgICBzZWxmLiRwcm9ncmVzcy5yZW1vdmVBdHRyKFwic3R5bGVcIikuaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGN1cnJlbnQgPSBzZWxmLmluc3RhbmNlLmN1cnJlbnQ7XHJcblxyXG4gICAgICBpZiAoY3VycmVudCkge1xyXG4gICAgICAgIHNlbGYuJGJ1dHRvblxyXG4gICAgICAgICAgLmF0dHIoXCJ0aXRsZVwiLCAoY3VycmVudC5vcHRzLmkxOG5bY3VycmVudC5vcHRzLmxhbmddIHx8IGN1cnJlbnQub3B0cy5pMThuLmVuKS5QTEFZX1NUT1ApXHJcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLXBsYXlcIilcclxuICAgICAgICAgIC5hZGRDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tcGF1c2VcIik7XHJcblxyXG4gICAgICAgIHNlbGYuaXNBY3RpdmUgPSB0cnVlO1xyXG5cclxuICAgICAgICBpZiAoY3VycmVudC5pc0NvbXBsZXRlKSB7XHJcbiAgICAgICAgICBzZWxmLnNldCh0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGYuaW5zdGFuY2UudHJpZ2dlcihcIm9uU2xpZGVTaG93Q2hhbmdlXCIsIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgY3VycmVudCA9IHNlbGYuaW5zdGFuY2UuY3VycmVudDtcclxuXHJcbiAgICAgIHNlbGYuY2xlYXIoKTtcclxuXHJcbiAgICAgIHNlbGYuJGJ1dHRvblxyXG4gICAgICAgIC5hdHRyKFwidGl0bGVcIiwgKGN1cnJlbnQub3B0cy5pMThuW2N1cnJlbnQub3B0cy5sYW5nXSB8fCBjdXJyZW50Lm9wdHMuaTE4bi5lbikuUExBWV9TVEFSVClcclxuICAgICAgICAucmVtb3ZlQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLXBhdXNlXCIpXHJcbiAgICAgICAgLmFkZENsYXNzKFwiZmFuY3lib3gtYnV0dG9uLS1wbGF5XCIpO1xyXG5cclxuICAgICAgc2VsZi5pc0FjdGl2ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgc2VsZi5pbnN0YW5jZS50cmlnZ2VyKFwib25TbGlkZVNob3dDaGFuZ2VcIiwgZmFsc2UpO1xyXG5cclxuICAgICAgaWYgKHNlbGYuJHByb2dyZXNzKSB7XHJcbiAgICAgICAgc2VsZi4kcHJvZ3Jlc3MucmVtb3ZlQXR0cihcInN0eWxlXCIpLmhpZGUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICBpZiAoc2VsZi5pc0FjdGl2ZSkge1xyXG4gICAgICAgIHNlbGYuc3RvcCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNlbGYuc3RhcnQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkKGRvY3VtZW50KS5vbih7XHJcbiAgICBcIm9uSW5pdC5mYlwiOiBmdW5jdGlvbihlLCBpbnN0YW5jZSkge1xyXG4gICAgICBpZiAoaW5zdGFuY2UgJiYgIWluc3RhbmNlLlNsaWRlU2hvdykge1xyXG4gICAgICAgIGluc3RhbmNlLlNsaWRlU2hvdyA9IG5ldyBTbGlkZVNob3coaW5zdGFuY2UpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYmVmb3JlU2hvdy5mYlwiOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCwgZmlyc3RSdW4pIHtcclxuICAgICAgdmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcbiAgICAgIGlmIChmaXJzdFJ1bikge1xyXG4gICAgICAgIGlmIChTbGlkZVNob3cgJiYgY3VycmVudC5vcHRzLnNsaWRlU2hvdy5hdXRvU3RhcnQpIHtcclxuICAgICAgICAgIFNsaWRlU2hvdy5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgICAgU2xpZGVTaG93LmNsZWFyKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJhZnRlclNob3cuZmJcIjogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQpIHtcclxuICAgICAgdmFyIFNsaWRlU2hvdyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlNsaWRlU2hvdztcclxuXHJcbiAgICAgIGlmIChTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgICAgU2xpZGVTaG93LnNldCgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYWZ0ZXJLZXlkb3duLmZiXCI6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG4gICAgICB2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuICAgICAgLy8gXCJQXCIgb3IgU3BhY2ViYXJcclxuICAgICAgaWYgKFNsaWRlU2hvdyAmJiBjdXJyZW50Lm9wdHMuc2xpZGVTaG93ICYmIChrZXljb2RlID09PSA4MCB8fCBrZXljb2RlID09PSAzMikgJiYgISQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoXCJidXR0b24sYSxpbnB1dFwiKSkge1xyXG4gICAgICAgIGtleXByZXNzLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgICAgIFNsaWRlU2hvdy50b2dnbGUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBcImJlZm9yZUNsb3NlLmZiIG9uRGVhY3RpdmF0ZS5mYlwiOiBmdW5jdGlvbihlLCBpbnN0YW5jZSkge1xyXG4gICAgICB2YXIgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuICAgICAgaWYgKFNsaWRlU2hvdykge1xyXG4gICAgICAgIFNsaWRlU2hvdy5zdG9wKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgLy8gUGFnZSBWaXNpYmlsaXR5IEFQSSB0byBwYXVzZSBzbGlkZXNob3cgd2hlbiB3aW5kb3cgaXMgbm90IGFjdGl2ZVxyXG4gICQoZG9jdW1lbnQpLm9uKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSxcclxuICAgICAgU2xpZGVTaG93ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuU2xpZGVTaG93O1xyXG5cclxuICAgIGlmIChTbGlkZVNob3cgJiYgU2xpZGVTaG93LmlzQWN0aXZlKSB7XHJcbiAgICAgIGlmIChkb2N1bWVudC5oaWRkZW4pIHtcclxuICAgICAgICBTbGlkZVNob3cuY2xlYXIoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBTbGlkZVNob3cuc2V0KCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufSkoZG9jdW1lbnQsIGpRdWVyeSk7XHJcblxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy9cclxuLy8gRnVsbFNjcmVlblxyXG4vLyBBZGRzIGZ1bGxzY3JlZW4gZnVuY3Rpb25hbGl0eVxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4oZnVuY3Rpb24oZG9jdW1lbnQsICQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgLy8gQ29sbGVjdGlvbiBvZiBtZXRob2RzIHN1cHBvcnRlZCBieSB1c2VyIGJyb3dzZXJcclxuICB2YXIgZm4gPSAoZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZm5NYXAgPSBbXHJcbiAgICAgIFtcInJlcXVlc3RGdWxsc2NyZWVuXCIsIFwiZXhpdEZ1bGxzY3JlZW5cIiwgXCJmdWxsc2NyZWVuRWxlbWVudFwiLCBcImZ1bGxzY3JlZW5FbmFibGVkXCIsIFwiZnVsbHNjcmVlbmNoYW5nZVwiLCBcImZ1bGxzY3JlZW5lcnJvclwiXSxcclxuICAgICAgLy8gbmV3IFdlYktpdFxyXG4gICAgICBbXHJcbiAgICAgICAgXCJ3ZWJraXRSZXF1ZXN0RnVsbHNjcmVlblwiLFxyXG4gICAgICAgIFwid2Via2l0RXhpdEZ1bGxzY3JlZW5cIixcclxuICAgICAgICBcIndlYmtpdEZ1bGxzY3JlZW5FbGVtZW50XCIsXHJcbiAgICAgICAgXCJ3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZFwiLFxyXG4gICAgICAgIFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFxyXG4gICAgICAgIFwid2Via2l0ZnVsbHNjcmVlbmVycm9yXCJcclxuICAgICAgXSxcclxuICAgICAgLy8gb2xkIFdlYktpdCAoU2FmYXJpIDUuMSlcclxuICAgICAgW1xyXG4gICAgICAgIFwid2Via2l0UmVxdWVzdEZ1bGxTY3JlZW5cIixcclxuICAgICAgICBcIndlYmtpdENhbmNlbEZ1bGxTY3JlZW5cIixcclxuICAgICAgICBcIndlYmtpdEN1cnJlbnRGdWxsU2NyZWVuRWxlbWVudFwiLFxyXG4gICAgICAgIFwid2Via2l0Q2FuY2VsRnVsbFNjcmVlblwiLFxyXG4gICAgICAgIFwid2Via2l0ZnVsbHNjcmVlbmNoYW5nZVwiLFxyXG4gICAgICAgIFwid2Via2l0ZnVsbHNjcmVlbmVycm9yXCJcclxuICAgICAgXSxcclxuICAgICAgW1xyXG4gICAgICAgIFwibW96UmVxdWVzdEZ1bGxTY3JlZW5cIixcclxuICAgICAgICBcIm1vekNhbmNlbEZ1bGxTY3JlZW5cIixcclxuICAgICAgICBcIm1vekZ1bGxTY3JlZW5FbGVtZW50XCIsXHJcbiAgICAgICAgXCJtb3pGdWxsU2NyZWVuRW5hYmxlZFwiLFxyXG4gICAgICAgIFwibW96ZnVsbHNjcmVlbmNoYW5nZVwiLFxyXG4gICAgICAgIFwibW96ZnVsbHNjcmVlbmVycm9yXCJcclxuICAgICAgXSxcclxuICAgICAgW1wibXNSZXF1ZXN0RnVsbHNjcmVlblwiLCBcIm1zRXhpdEZ1bGxzY3JlZW5cIiwgXCJtc0Z1bGxzY3JlZW5FbGVtZW50XCIsIFwibXNGdWxsc2NyZWVuRW5hYmxlZFwiLCBcIk1TRnVsbHNjcmVlbkNoYW5nZVwiLCBcIk1TRnVsbHNjcmVlbkVycm9yXCJdXHJcbiAgICBdO1xyXG5cclxuICAgIHZhciByZXQgPSB7fTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZuTWFwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciB2YWwgPSBmbk1hcFtpXTtcclxuXHJcbiAgICAgIGlmICh2YWwgJiYgdmFsWzFdIGluIGRvY3VtZW50KSB7XHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWwubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgIHJldFtmbk1hcFswXVtqXV0gPSB2YWxbal07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0pKCk7XHJcblxyXG4gIGlmIChmbikge1xyXG4gICAgdmFyIEZ1bGxTY3JlZW4gPSB7XHJcbiAgICAgIHJlcXVlc3Q6IGZ1bmN0aW9uKGVsZW0pIHtcclxuICAgICAgICBlbGVtID0gZWxlbSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGVsZW1bZm4ucmVxdWVzdEZ1bGxzY3JlZW5dKGVsZW0uQUxMT1dfS0VZQk9BUkRfSU5QVVQpO1xyXG4gICAgICB9LFxyXG4gICAgICBleGl0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICBkb2N1bWVudFtmbi5leGl0RnVsbHNjcmVlbl0oKTtcclxuICAgICAgfSxcclxuICAgICAgdG9nZ2xlOiBmdW5jdGlvbihlbGVtKSB7XHJcbiAgICAgICAgZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0Z1bGxzY3JlZW4oKSkge1xyXG4gICAgICAgICAgdGhpcy5leGl0KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMucmVxdWVzdChlbGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGlzRnVsbHNjcmVlbjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVsZW1lbnRdKTtcclxuICAgICAgfSxcclxuICAgICAgZW5hYmxlZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVuYWJsZWRdKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkLmV4dGVuZCh0cnVlLCAkLmZhbmN5Ym94LmRlZmF1bHRzLCB7XHJcbiAgICAgIGJ0blRwbDoge1xyXG4gICAgICAgIGZ1bGxTY3JlZW46XHJcbiAgICAgICAgICAnPGJ1dHRvbiBkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW4gY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1mc2VudGVyXCIgdGl0bGU9XCJ7e0ZVTExfU0NSRUVOfX1cIj4nICtcclxuICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk03IDE0SDV2NWg1di0ySDd2LTN6bS0yLTRoMlY3aDNWNUg1djV6bTEyIDdoLTN2Mmg1di01aC0ydjN6TTE0IDV2MmgzdjNoMlY1aC01elwiLz48L3N2Zz4nICtcclxuICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk01IDE2aDN2M2gydi01SDV6bTMtOEg1djJoNVY1SDh6bTYgMTFoMnYtM2gzdi0yaC01em0yLTExVjVoLTJ2NWg1Vjh6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICB9LFxyXG4gICAgICBmdWxsU2NyZWVuOiB7XHJcbiAgICAgICAgYXV0b1N0YXJ0OiBmYWxzZVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkKGRvY3VtZW50KS5vbihmbi5mdWxsc2NyZWVuY2hhbmdlLCBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGlzRnVsbHNjcmVlbiA9IEZ1bGxTY3JlZW4uaXNGdWxsc2NyZWVuKCksXHJcbiAgICAgICAgaW5zdGFuY2UgPSAkLmZhbmN5Ym94LmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICAvLyBJZiBpbWFnZSBpcyB6b29taW5nLCB0aGVuIGZvcmNlIHRvIHN0b3AgYW5kIHJlcG9zaXRpb24gcHJvcGVybHlcclxuICAgICAgICBpZiAoaW5zdGFuY2UuY3VycmVudCAmJiBpbnN0YW5jZS5jdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiAmJiBpbnN0YW5jZS5pc0FuaW1hdGluZykge1xyXG4gICAgICAgICAgaW5zdGFuY2UuY3VycmVudC4kY29udGVudC5jc3MoXCJ0cmFuc2l0aW9uXCIsIFwibm9uZVwiKTtcclxuXHJcbiAgICAgICAgICBpbnN0YW5jZS5pc0FuaW1hdGluZyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgIGluc3RhbmNlLnVwZGF0ZSh0cnVlLCB0cnVlLCAwKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluc3RhbmNlLnRyaWdnZXIoXCJvbkZ1bGxzY3JlZW5DaGFuZ2VcIiwgaXNGdWxsc2NyZWVuKTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtaXMtZnVsbHNjcmVlblwiLCBpc0Z1bGxzY3JlZW4pO1xyXG5cclxuICAgICAgICBpbnN0YW5jZS4kcmVmcy50b29sYmFyXHJcbiAgICAgICAgICAuZmluZChcIltkYXRhLWZhbmN5Ym94LWZ1bGxzY3JlZW5dXCIpXHJcbiAgICAgICAgICAudG9nZ2xlQ2xhc3MoXCJmYW5jeWJveC1idXR0b24tLWZzZW50ZXJcIiwgIWlzRnVsbHNjcmVlbilcclxuICAgICAgICAgIC50b2dnbGVDbGFzcyhcImZhbmN5Ym94LWJ1dHRvbi0tZnNleGl0XCIsIGlzRnVsbHNjcmVlbik7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJvbkluaXQuZmJcIjogZnVuY3Rpb24oZSwgaW5zdGFuY2UpIHtcclxuICAgICAgdmFyICRjb250YWluZXI7XHJcblxyXG4gICAgICBpZiAoIWZuKSB7XHJcbiAgICAgICAgaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtZnVsbHNjcmVlbl1cIikucmVtb3ZlKCk7XHJcblxyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGluc3RhbmNlICYmIGluc3RhbmNlLmdyb3VwW2luc3RhbmNlLmN1cnJJbmRleF0ub3B0cy5mdWxsU2NyZWVuKSB7XHJcbiAgICAgICAgJGNvbnRhaW5lciA9IGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lcjtcclxuXHJcbiAgICAgICAgJGNvbnRhaW5lci5vbihcImNsaWNrLmZiLWZ1bGxzY3JlZW5cIiwgXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICAgIEZ1bGxTY3JlZW4udG9nZ2xlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5vcHRzLmZ1bGxTY3JlZW4gJiYgaW5zdGFuY2Uub3B0cy5mdWxsU2NyZWVuLmF1dG9TdGFydCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgRnVsbFNjcmVlbi5yZXF1ZXN0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFeHBvc2UgQVBJXHJcbiAgICAgICAgaW5zdGFuY2UuRnVsbFNjcmVlbiA9IEZ1bGxTY3JlZW47XHJcbiAgICAgIH0gZWxzZSBpZiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpbnN0YW5jZS4kcmVmcy50b29sYmFyLmZpbmQoXCJbZGF0YS1mYW5jeWJveC1mdWxsc2NyZWVuXVwiKS5oaWRlKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJhZnRlcktleWRvd24uZmJcIjogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQsIGtleXByZXNzLCBrZXljb2RlKSB7XHJcbiAgICAgIC8vIFwiRlwiXHJcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5GdWxsU2NyZWVuICYmIGtleWNvZGUgPT09IDcwKSB7XHJcbiAgICAgICAga2V5cHJlc3MucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgaW5zdGFuY2UuRnVsbFNjcmVlbi50b2dnbGUoKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBcImJlZm9yZUNsb3NlLmZiXCI6IGZ1bmN0aW9uKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgIGlmIChpbnN0YW5jZSAmJiBpbnN0YW5jZS5GdWxsU2NyZWVuICYmIGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci5oYXNDbGFzcyhcImZhbmN5Ym94LWlzLWZ1bGxzY3JlZW5cIikpIHtcclxuICAgICAgICBGdWxsU2NyZWVuLmV4aXQoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG59KShkb2N1bWVudCwgalF1ZXJ5KTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBUaHVtYnNcclxuLy8gRGlzcGxheXMgdGh1bWJuYWlscyBpbiBhIGdyaWRcclxuLy9cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuKGZ1bmN0aW9uKGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIHZhciBDTEFTUyA9IFwiZmFuY3lib3gtdGh1bWJzXCIsXHJcbiAgICBDTEFTU19BQ1RJVkUgPSBDTEFTUyArIFwiLWFjdGl2ZVwiO1xyXG5cclxuICAvLyBNYWtlIHN1cmUgdGhlcmUgYXJlIGRlZmF1bHQgdmFsdWVzXHJcbiAgJC5mYW5jeWJveC5kZWZhdWx0cyA9ICQuZXh0ZW5kKFxyXG4gICAgdHJ1ZSxcclxuICAgIHtcclxuICAgICAgYnRuVHBsOiB7XHJcbiAgICAgICAgdGh1bWJzOlxyXG4gICAgICAgICAgJzxidXR0b24gZGF0YS1mYW5jeWJveC10aHVtYnMgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS10aHVtYnNcIiB0aXRsZT1cInt7VEhVTUJTfX1cIj4nICtcclxuICAgICAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCI+PHBhdGggZD1cIk0xNC41OSAxNC41OWgzLjc2djMuNzZoLTMuNzZ2LTMuNzZ6bS00LjQ3IDBoMy43NnYzLjc2aC0zLjc2di0zLjc2em0tNC40NyAwaDMuNzZ2My43Nkg1LjY1di0zLjc2em04Ljk0LTQuNDdoMy43NnYzLjc2aC0zLjc2di0zLjc2em0tNC40NyAwaDMuNzZ2My43NmgtMy43NnYtMy43NnptLTQuNDcgMGgzLjc2djMuNzZINS42NXYtMy43NnptOC45NC00LjQ3aDMuNzZ2My43NmgtMy43NlY1LjY1em0tNC40NyAwaDMuNzZ2My43NmgtMy43NlY1LjY1em0tNC40NyAwaDMuNzZ2My43Nkg1LjY1VjUuNjV6XCIvPjwvc3ZnPicgK1xyXG4gICAgICAgICAgXCI8L2J1dHRvbj5cIlxyXG4gICAgICB9LFxyXG4gICAgICB0aHVtYnM6IHtcclxuICAgICAgICBhdXRvU3RhcnQ6IGZhbHNlLCAvLyBEaXNwbGF5IHRodW1ibmFpbHMgb24gb3BlbmluZ1xyXG4gICAgICAgIGhpZGVPbkNsb3NlOiB0cnVlLCAvLyBIaWRlIHRodW1ibmFpbCBncmlkIHdoZW4gY2xvc2luZyBhbmltYXRpb24gc3RhcnRzXHJcbiAgICAgICAgcGFyZW50RWw6IFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiLCAvLyBDb250YWluZXIgaXMgaW5qZWN0ZWQgaW50byB0aGlzIGVsZW1lbnRcclxuICAgICAgICBheGlzOiBcInlcIiAvLyBWZXJ0aWNhbCAoeSkgb3IgaG9yaXpvbnRhbCAoeCkgc2Nyb2xsaW5nXHJcbiAgICAgIH1cclxuICAgIH0sXHJcbiAgICAkLmZhbmN5Ym94LmRlZmF1bHRzXHJcbiAgKTtcclxuXHJcbiAgdmFyIEZhbmN5VGh1bWJzID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcclxuICAgIHRoaXMuaW5pdChpbnN0YW5jZSk7XHJcbiAgfTtcclxuXHJcbiAgJC5leHRlbmQoRmFuY3lUaHVtYnMucHJvdG90eXBlLCB7XHJcbiAgICAkYnV0dG9uOiBudWxsLFxyXG4gICAgJGdyaWQ6IG51bGwsXHJcbiAgICAkbGlzdDogbnVsbCxcclxuICAgIGlzVmlzaWJsZTogZmFsc2UsXHJcbiAgICBpc0FjdGl2ZTogZmFsc2UsXHJcblxyXG4gICAgaW5pdDogZnVuY3Rpb24oaW5zdGFuY2UpIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgIGdyb3VwID0gaW5zdGFuY2UuZ3JvdXAsXHJcbiAgICAgICAgZW5hYmxlZCA9IDA7XHJcblxyXG4gICAgICBzZWxmLmluc3RhbmNlID0gaW5zdGFuY2U7XHJcbiAgICAgIHNlbGYub3B0cyA9IGdyb3VwW2luc3RhbmNlLmN1cnJJbmRleF0ub3B0cy50aHVtYnM7XHJcblxyXG4gICAgICBpbnN0YW5jZS5UaHVtYnMgPSBzZWxmO1xyXG5cclxuICAgICAgc2VsZi4kYnV0dG9uID0gaW5zdGFuY2UuJHJlZnMudG9vbGJhci5maW5kKFwiW2RhdGEtZmFuY3lib3gtdGh1bWJzXVwiKTtcclxuXHJcbiAgICAgIC8vIEVuYWJsZSB0aHVtYnMgaWYgYXQgbGVhc3QgdHdvIGdyb3VwIGl0ZW1zIGhhdmUgdGh1bWJuYWlsc1xyXG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICBpZiAoZ3JvdXBbaV0udGh1bWIpIHtcclxuICAgICAgICAgIGVuYWJsZWQrKztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbmFibGVkID4gMSkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZW5hYmxlZCA+IDEgJiYgISFzZWxmLm9wdHMpIHtcclxuICAgICAgICBzZWxmLiRidXR0b24ucmVtb3ZlQXR0cihcInN0eWxlXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBzZWxmLnRvZ2dsZSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzZWxmLmlzQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzZWxmLiRidXR0b24uaGlkZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzZWxmID0gdGhpcyxcclxuICAgICAgICBpbnN0YW5jZSA9IHNlbGYuaW5zdGFuY2UsXHJcbiAgICAgICAgcGFyZW50RWwgPSBzZWxmLm9wdHMucGFyZW50RWwsXHJcbiAgICAgICAgbGlzdCA9IFtdLFxyXG4gICAgICAgIHNyYztcclxuXHJcbiAgICAgIGlmICghc2VsZi4kZ3JpZCkge1xyXG4gICAgICAgIC8vIENyZWF0ZSBtYWluIGVsZW1lbnRcclxuICAgICAgICBzZWxmLiRncmlkID0gJCgnPGRpdiBjbGFzcz1cIicgKyBDTEFTUyArIFwiIFwiICsgQ0xBU1MgKyBcIi1cIiArIHNlbGYub3B0cy5heGlzICsgJ1wiPjwvZGl2PicpLmFwcGVuZFRvKFxyXG4gICAgICAgICAgaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyXHJcbiAgICAgICAgICAgIC5maW5kKHBhcmVudEVsKVxyXG4gICAgICAgICAgICAuYWRkQmFjaygpXHJcbiAgICAgICAgICAgIC5maWx0ZXIocGFyZW50RWwpXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIFwiY2xpY2tcIiBldmVudCB0aGF0IHBlcmZvcm1zIGdhbGxlcnkgbmF2aWdhdGlvblxyXG4gICAgICAgIHNlbGYuJGdyaWQub24oXCJjbGlja1wiLCBcImFcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5qdW1wVG8oJCh0aGlzKS5hdHRyKFwiZGF0YS1pbmRleFwiKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEJ1aWxkIHRoZSBsaXN0XHJcbiAgICAgIGlmICghc2VsZi4kbGlzdCkge1xyXG4gICAgICAgIHNlbGYuJGxpc3QgPSAkKCc8ZGl2IGNsYXNzPVwiJyArIENMQVNTICsgJ19fbGlzdFwiPicpLmFwcGVuZFRvKHNlbGYuJGdyaWQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAkLmVhY2goaW5zdGFuY2UuZ3JvdXAsIGZ1bmN0aW9uKGksIGl0ZW0pIHtcclxuICAgICAgICBzcmMgPSBpdGVtLnRodW1iO1xyXG5cclxuICAgICAgICBpZiAoIXNyYyAmJiBpdGVtLnR5cGUgPT09IFwiaW1hZ2VcIikge1xyXG4gICAgICAgICAgc3JjID0gaXRlbS5zcmM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsaXN0LnB1c2goXHJcbiAgICAgICAgICAnPGEgaHJlZj1cImphdmFzY3JpcHQ6O1wiIHRhYmluZGV4PVwiMFwiIGRhdGEtaW5kZXg9XCInICtcclxuICAgICAgICAgICAgaSArXHJcbiAgICAgICAgICAgICdcIicgK1xyXG4gICAgICAgICAgICAoc3JjICYmIHNyYy5sZW5ndGggPyAnIHN0eWxlPVwiYmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIHNyYyArICcpXCInIDogJ2NsYXNzPVwiZmFuY3lib3gtdGh1bWJzLW1pc3NpbmdcIicpICtcclxuICAgICAgICAgICAgXCI+PC9hPlwiXHJcbiAgICAgICAgKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBzZWxmLiRsaXN0WzBdLmlubmVySFRNTCA9IGxpc3Quam9pbihcIlwiKTtcclxuXHJcbiAgICAgIGlmIChzZWxmLm9wdHMuYXhpcyA9PT0gXCJ4XCIpIHtcclxuICAgICAgICAvLyBTZXQgZml4ZWQgd2lkdGggZm9yIGxpc3QgZWxlbWVudCB0byBlbmFibGUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcclxuICAgICAgICBzZWxmLiRsaXN0LndpZHRoKFxyXG4gICAgICAgICAgcGFyc2VJbnQoc2VsZi4kZ3JpZC5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpLCAxMCkgK1xyXG4gICAgICAgICAgICBpbnN0YW5jZS5ncm91cC5sZW5ndGggKlxyXG4gICAgICAgICAgICAgIHNlbGYuJGxpc3RcclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgICAgICAgICAuZXEoMClcclxuICAgICAgICAgICAgICAgIC5vdXRlcldpZHRoKHRydWUpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBmb2N1czogZnVuY3Rpb24oZHVyYXRpb24pIHtcclxuICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICRsaXN0ID0gc2VsZi4kbGlzdCxcclxuICAgICAgICAkZ3JpZCA9IHNlbGYuJGdyaWQsXHJcbiAgICAgICAgdGh1bWIsXHJcbiAgICAgICAgdGh1bWJQb3M7XHJcblxyXG4gICAgICBpZiAoIXNlbGYuaW5zdGFuY2UuY3VycmVudCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGh1bWIgPSAkbGlzdFxyXG4gICAgICAgIC5jaGlsZHJlbigpXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKENMQVNTX0FDVElWRSlcclxuICAgICAgICAuZmlsdGVyKCdbZGF0YS1pbmRleD1cIicgKyBzZWxmLmluc3RhbmNlLmN1cnJlbnQuaW5kZXggKyAnXCJdJylcclxuICAgICAgICAuYWRkQ2xhc3MoQ0xBU1NfQUNUSVZFKTtcclxuXHJcbiAgICAgIHRodW1iUG9zID0gdGh1bWIucG9zaXRpb24oKTtcclxuXHJcbiAgICAgIC8vIENoZWNrIGlmIG5lZWQgdG8gc2Nyb2xsIHRvIG1ha2UgY3VycmVudCB0aHVtYiB2aXNpYmxlXHJcbiAgICAgIGlmIChzZWxmLm9wdHMuYXhpcyA9PT0gXCJ5XCIgJiYgKHRodW1iUG9zLnRvcCA8IDAgfHwgdGh1bWJQb3MudG9wID4gJGxpc3QuaGVpZ2h0KCkgLSB0aHVtYi5vdXRlckhlaWdodCgpKSkge1xyXG4gICAgICAgICRsaXN0LnN0b3AoKS5hbmltYXRlKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBzY3JvbGxUb3A6ICRsaXN0LnNjcm9sbFRvcCgpICsgdGh1bWJQb3MudG9wXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZHVyYXRpb25cclxuICAgICAgICApO1xyXG4gICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgIHNlbGYub3B0cy5heGlzID09PSBcInhcIiAmJlxyXG4gICAgICAgICh0aHVtYlBvcy5sZWZ0IDwgJGdyaWQuc2Nyb2xsTGVmdCgpIHx8IHRodW1iUG9zLmxlZnQgPiAkZ3JpZC5zY3JvbGxMZWZ0KCkgKyAoJGdyaWQud2lkdGgoKSAtIHRodW1iLm91dGVyV2lkdGgoKSkpXHJcbiAgICAgICkge1xyXG4gICAgICAgICRsaXN0XHJcbiAgICAgICAgICAucGFyZW50KClcclxuICAgICAgICAgIC5zdG9wKClcclxuICAgICAgICAgIC5hbmltYXRlKFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgc2Nyb2xsTGVmdDogdGh1bWJQb3MubGVmdFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkdXJhdGlvblxyXG4gICAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgIHRoYXQuaW5zdGFuY2UuJHJlZnMuY29udGFpbmVyLnRvZ2dsZUNsYXNzKFwiZmFuY3lib3gtc2hvdy10aHVtYnNcIiwgdGhpcy5pc1Zpc2libGUpO1xyXG5cclxuICAgICAgaWYgKHRoYXQuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgaWYgKCF0aGF0LiRncmlkKSB7XHJcbiAgICAgICAgICB0aGF0LmNyZWF0ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhhdC5pbnN0YW5jZS50cmlnZ2VyKFwib25UaHVtYnNTaG93XCIpO1xyXG5cclxuICAgICAgICB0aGF0LmZvY3VzKDApO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoYXQuJGdyaWQpIHtcclxuICAgICAgICB0aGF0Lmluc3RhbmNlLnRyaWdnZXIoXCJvblRodW1ic0hpZGVcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBjb250ZW50IHBvc2l0aW9uXHJcbiAgICAgIHRoYXQuaW5zdGFuY2UudXBkYXRlKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGhpZGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBzaG93OiBmdW5jdGlvbigpIHtcclxuICAgICAgdGhpcy5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gICAgfSxcclxuXHJcbiAgICB0b2dnbGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmlzVmlzaWJsZSA9ICF0aGlzLmlzVmlzaWJsZTtcclxuICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJvbkluaXQuZmJcIjogZnVuY3Rpb24oZSwgaW5zdGFuY2UpIHtcclxuICAgICAgdmFyIFRodW1icztcclxuXHJcbiAgICAgIGlmIChpbnN0YW5jZSAmJiAhaW5zdGFuY2UuVGh1bWJzKSB7XHJcbiAgICAgICAgVGh1bWJzID0gbmV3IEZhbmN5VGh1bWJzKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgaWYgKFRodW1icy5pc0FjdGl2ZSAmJiBUaHVtYnMub3B0cy5hdXRvU3RhcnQgPT09IHRydWUpIHtcclxuICAgICAgICAgIFRodW1icy5zaG93KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYmVmb3JlU2hvdy5mYlwiOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgaXRlbSwgZmlyc3RSdW4pIHtcclxuICAgICAgdmFyIFRodW1icyA9IGluc3RhbmNlICYmIGluc3RhbmNlLlRodW1icztcclxuXHJcbiAgICAgIGlmIChUaHVtYnMgJiYgVGh1bWJzLmlzVmlzaWJsZSkge1xyXG4gICAgICAgIFRodW1icy5mb2N1cyhmaXJzdFJ1biA/IDAgOiAyNTApO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIFwiYWZ0ZXJLZXlkb3duLmZiXCI6IGZ1bmN0aW9uKGUsIGluc3RhbmNlLCBjdXJyZW50LCBrZXlwcmVzcywga2V5Y29kZSkge1xyXG4gICAgICB2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuICAgICAgLy8gXCJHXCJcclxuICAgICAgaWYgKFRodW1icyAmJiBUaHVtYnMuaXNBY3RpdmUgJiYga2V5Y29kZSA9PT0gNzEpIHtcclxuICAgICAgICBrZXlwcmVzcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBUaHVtYnMudG9nZ2xlKCk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJiZWZvcmVDbG9zZS5mYlwiOiBmdW5jdGlvbihlLCBpbnN0YW5jZSkge1xyXG4gICAgICB2YXIgVGh1bWJzID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuVGh1bWJzO1xyXG5cclxuICAgICAgaWYgKFRodW1icyAmJiBUaHVtYnMuaXNWaXNpYmxlICYmIFRodW1icy5vcHRzLmhpZGVPbkNsb3NlICE9PSBmYWxzZSkge1xyXG4gICAgICAgIFRodW1icy4kZ3JpZC5oaWRlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufSkoZG9jdW1lbnQsIGpRdWVyeSk7XHJcblxuLy8vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBTaGFyZVxyXG4vLyBEaXNwbGF5cyBzaW1wbGUgZm9ybSBmb3Igc2hhcmluZyBjdXJyZW50IHVybFxyXG4vL1xyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4oZnVuY3Rpb24oZG9jdW1lbnQsICQpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgJC5leHRlbmQodHJ1ZSwgJC5mYW5jeWJveC5kZWZhdWx0cywge1xyXG4gICAgYnRuVHBsOiB7XHJcbiAgICAgIHNoYXJlOlxyXG4gICAgICAgICc8YnV0dG9uIGRhdGEtZmFuY3lib3gtc2hhcmUgY2xhc3M9XCJmYW5jeWJveC1idXR0b24gZmFuY3lib3gtYnV0dG9uLS1zaGFyZVwiIHRpdGxlPVwie3tTSEFSRX19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj48cGF0aCBkPVwiTTIuNTUgMTljMS40LTguNCA5LjEtOS44IDExLjktOS44VjVsNyA3LTcgNi4zdi0zLjVjLTIuOCAwLTEwLjUgMi4xLTExLjkgNC4yelwiLz48L3N2Zz4nICtcclxuICAgICAgICBcIjwvYnV0dG9uPlwiXHJcbiAgICB9LFxyXG4gICAgc2hhcmU6IHtcclxuICAgICAgdXJsOiBmdW5jdGlvbihpbnN0YW5jZSwgaXRlbSkge1xyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAoIWluc3RhbmNlLmN1cnJlbnRIYXNoICYmICEoaXRlbS50eXBlID09PSBcImlubGluZVwiIHx8IGl0ZW0udHlwZSA9PT0gXCJodG1sXCIpID8gaXRlbS5vcmlnU3JjIHx8IGl0ZW0uc3JjIDogZmFsc2UpIHx8IHdpbmRvdy5sb2NhdGlvblxyXG4gICAgICAgICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHRwbDpcclxuICAgICAgICAnPGRpdiBjbGFzcz1cImZhbmN5Ym94LXNoYXJlXCI+JyArXHJcbiAgICAgICAgXCI8aDE+e3tTSEFSRX19PC9oMT5cIiArXHJcbiAgICAgICAgXCI8cD5cIiArXHJcbiAgICAgICAgJzxhIGNsYXNzPVwiZmFuY3lib3gtc2hhcmVfX2J1dHRvbiBmYW5jeWJveC1zaGFyZV9fYnV0dG9uLS1mYlwiIGhyZWY9XCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vc2hhcmVyL3NoYXJlci5waHA/dT17e3VybH19XCI+JyArXHJcbiAgICAgICAgJzxzdmcgdmlld0JveD1cIjAgMCA1MTIgNTEyXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJtMjg3IDQ1NnYtMjk5YzAtMjEgNi0zNSAzNS0zNWgzOHYtNjNjLTctMS0yOS0zLTU1LTMtNTQgMC05MSAzMy05MSA5NHYzMDZtMTQzLTI1NGgtMjA1djcyaDE5NlwiIC8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8c3Bhbj5GYWNlYm9vazwvc3Bhbj5cIiArXHJcbiAgICAgICAgXCI8L2E+XCIgK1xyXG4gICAgICAgICc8YSBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19idXR0b24gZmFuY3lib3gtc2hhcmVfX2J1dHRvbi0tdHdcIiBocmVmPVwiaHR0cHM6Ly90d2l0dGVyLmNvbS9pbnRlbnQvdHdlZXQ/dXJsPXt7dXJsfX0mdGV4dD17e2Rlc2NyfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm00NTYgMTMzYy0xNCA3LTMxIDExLTQ3IDEzIDE3LTEwIDMwLTI3IDM3LTQ2LTE1IDEwLTM0IDE2LTUyIDIwLTYxLTYyLTE1Ny03LTE0MSA3NS02OC0zLTEyOS0zNS0xNjktODUtMjIgMzctMTEgODYgMjYgMTA5LTEzIDAtMjYtNC0zNy05IDAgMzkgMjggNzIgNjUgODAtMTIgMy0yNSA0LTM3IDIgMTAgMzMgNDEgNTcgNzcgNTctNDIgMzAtNzcgMzgtMTIyIDM0IDE3MCAxMTEgMzc4LTMyIDM1OS0yMDggMTYtMTEgMzAtMjUgNDEtNDJ6XCIgLz48L3N2Zz4nICtcclxuICAgICAgICBcIjxzcGFuPlR3aXR0ZXI8L3NwYW4+XCIgK1xyXG4gICAgICAgIFwiPC9hPlwiICtcclxuICAgICAgICAnPGEgY2xhc3M9XCJmYW5jeWJveC1zaGFyZV9fYnV0dG9uIGZhbmN5Ym94LXNoYXJlX19idXR0b24tLXB0XCIgaHJlZj1cImh0dHBzOi8vd3d3LnBpbnRlcmVzdC5jb20vcGluL2NyZWF0ZS9idXR0b24vP3VybD17e3VybH19JmRlc2NyaXB0aW9uPXt7ZGVzY3J9fSZtZWRpYT17e21lZGlhfX1cIj4nICtcclxuICAgICAgICAnPHN2ZyB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIm0yNjUgNTZjLTEwOSAwLTE2NCA3OC0xNjQgMTQ0IDAgMzkgMTUgNzQgNDcgODcgNSAyIDEwIDAgMTItNWw0LTE5YzItNiAxLTgtMy0xMy05LTExLTE1LTI1LTE1LTQ1IDAtNTggNDMtMTEwIDExMy0xMTAgNjIgMCA5NiAzOCA5NiA4OCAwIDY3LTMwIDEyMi03MyAxMjItMjQgMC00Mi0xOS0zNi00NCA2LTI5IDIwLTYwIDIwLTgxIDAtMTktMTAtMzUtMzEtMzUtMjUgMC00NCAyNi00NCA2MCAwIDIxIDcgMzYgNyAzNmwtMzAgMTI1Yy04IDM3LTEgODMgMCA4NyAwIDMgNCA0IDUgMiAyLTMgMzItMzkgNDItNzVsMTYtNjRjOCAxNiAzMSAyOSA1NiAyOSA3NCAwIDEyNC02NyAxMjQtMTU3IDAtNjktNTgtMTMyLTE0Ni0xMzJ6XCIgZmlsbD1cIiNmZmZcIi8+PC9zdmc+JyArXHJcbiAgICAgICAgXCI8c3Bhbj5QaW50ZXJlc3Q8L3NwYW4+XCIgK1xyXG4gICAgICAgIFwiPC9hPlwiICtcclxuICAgICAgICBcIjwvcD5cIiArXHJcbiAgICAgICAgJzxwPjxpbnB1dCBjbGFzcz1cImZhbmN5Ym94LXNoYXJlX19pbnB1dFwiIHR5cGU9XCJ0ZXh0XCIgdmFsdWU9XCJ7e3VybF9yYXd9fVwiIG9uY2xpY2s9XCJzZWxlY3QoKVwiIC8+PC9wPicgK1xyXG4gICAgICAgIFwiPC9kaXY+XCJcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZnVuY3Rpb24gZXNjYXBlSHRtbChzdHJpbmcpIHtcclxuICAgIHZhciBlbnRpdHlNYXAgPSB7XHJcbiAgICAgIFwiJlwiOiBcIiZhbXA7XCIsXHJcbiAgICAgIFwiPFwiOiBcIiZsdDtcIixcclxuICAgICAgXCI+XCI6IFwiJmd0O1wiLFxyXG4gICAgICAnXCInOiBcIiZxdW90O1wiLFxyXG4gICAgICBcIidcIjogXCImIzM5O1wiLFxyXG4gICAgICBcIi9cIjogXCImI3gyRjtcIixcclxuICAgICAgXCJgXCI6IFwiJiN4NjA7XCIsXHJcbiAgICAgIFwiPVwiOiBcIiYjeDNEO1wiXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKC9bJjw+XCInYD1cXC9dL2csIGZ1bmN0aW9uKHMpIHtcclxuICAgICAgcmV0dXJuIGVudGl0eU1hcFtzXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgJChkb2N1bWVudCkub24oXCJjbGlja1wiLCBcIltkYXRhLWZhbmN5Ym94LXNoYXJlXVwiLCBmdW5jdGlvbigpIHtcclxuICAgIHZhciBpbnN0YW5jZSA9ICQuZmFuY3lib3guZ2V0SW5zdGFuY2UoKSxcclxuICAgICAgY3VycmVudCA9IGluc3RhbmNlLmN1cnJlbnQgfHwgbnVsbCxcclxuICAgICAgdXJsLFxyXG4gICAgICB0cGw7XHJcblxyXG4gICAgaWYgKCFjdXJyZW50KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJC50eXBlKGN1cnJlbnQub3B0cy5zaGFyZS51cmwpID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgdXJsID0gY3VycmVudC5vcHRzLnNoYXJlLnVybC5hcHBseShjdXJyZW50LCBbaW5zdGFuY2UsIGN1cnJlbnRdKTtcclxuICAgIH1cclxuXHJcbiAgICB0cGwgPSBjdXJyZW50Lm9wdHMuc2hhcmUudHBsXHJcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHttZWRpYVxcfVxcfS9nLCBjdXJyZW50LnR5cGUgPT09IFwiaW1hZ2VcIiA/IGVuY29kZVVSSUNvbXBvbmVudChjdXJyZW50LnNyYykgOiBcIlwiKVxyXG4gICAgICAucmVwbGFjZSgvXFx7XFx7dXJsXFx9XFx9L2csIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpKVxyXG4gICAgICAucmVwbGFjZSgvXFx7XFx7dXJsX3Jhd1xcfVxcfS9nLCBlc2NhcGVIdG1sKHVybCkpXHJcbiAgICAgIC5yZXBsYWNlKC9cXHtcXHtkZXNjclxcfVxcfS9nLCBpbnN0YW5jZS4kY2FwdGlvbiA/IGVuY29kZVVSSUNvbXBvbmVudChpbnN0YW5jZS4kY2FwdGlvbi50ZXh0KCkpIDogXCJcIik7XHJcblxyXG4gICAgJC5mYW5jeWJveC5vcGVuKHtcclxuICAgICAgc3JjOiBpbnN0YW5jZS50cmFuc2xhdGUoaW5zdGFuY2UsIHRwbCksXHJcbiAgICAgIHR5cGU6IFwiaHRtbFwiLFxyXG4gICAgICBvcHRzOiB7XHJcbiAgICAgICAgdG91Y2g6IGZhbHNlLFxyXG4gICAgICAgIGFuaW1hdGlvbkVmZmVjdDogZmFsc2UsXHJcbiAgICAgICAgYWZ0ZXJMb2FkOiBmdW5jdGlvbihzaGFyZUluc3RhbmNlLCBzaGFyZUN1cnJlbnQpIHtcclxuICAgICAgICAgIC8vIENsb3NlIHNlbGYgaWYgcGFyZW50IGluc3RhbmNlIGlzIGNsb3NpbmdcclxuICAgICAgICAgIGluc3RhbmNlLiRyZWZzLmNvbnRhaW5lci5vbmUoXCJiZWZvcmVDbG9zZS5mYlwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgc2hhcmVJbnN0YW5jZS5jbG9zZShudWxsLCAwKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vIE9wZW5pbmcgbGlua3MgaW4gYSBwb3B1cCB3aW5kb3dcclxuICAgICAgICAgIHNoYXJlQ3VycmVudC4kY29udGVudC5maW5kKFwiLmZhbmN5Ym94LXNoYXJlX19idXR0b25cIikuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHRoaXMuaHJlZiwgXCJTaGFyZVwiLCBcIndpZHRoPTU1MCwgaGVpZ2h0PTQ1MFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb2JpbGU6IHtcclxuICAgICAgICAgIGF1dG9Gb2N1czogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0pO1xyXG59KShkb2N1bWVudCwgalF1ZXJ5KTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBIYXNoXHJcbi8vIEVuYWJsZXMgbGlua2luZyB0byBlYWNoIG1vZGFsXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbih3aW5kb3csIGRvY3VtZW50LCAkKSB7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gIC8vIFNpbXBsZSAkLmVzY2FwZVNlbGVjdG9yIHBvbHlmaWxsIChmb3IgalF1ZXJ5IHByaW9yIHYzKVxyXG4gIGlmICghJC5lc2NhcGVTZWxlY3Rvcikge1xyXG4gICAgJC5lc2NhcGVTZWxlY3RvciA9IGZ1bmN0aW9uKHNlbCkge1xyXG4gICAgICB2YXIgcmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxceDgwLVxcdUZGRkZcXHctXS9nO1xyXG4gICAgICB2YXIgZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKGNoLCBhc0NvZGVQb2ludCkge1xyXG4gICAgICAgIGlmIChhc0NvZGVQb2ludCkge1xyXG4gICAgICAgICAgLy8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXHJcbiAgICAgICAgICBpZiAoY2ggPT09IFwiXFwwXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXHJcbiAgICAgICAgICByZXR1cm4gY2guc2xpY2UoMCwgLTEpICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KGNoLmxlbmd0aCAtIDEpLnRvU3RyaW5nKDE2KSArIFwiIFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxyXG4gICAgICAgIHJldHVybiBcIlxcXFxcIiArIGNoO1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgcmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKHJjc3Nlc2NhcGUsIGZjc3Nlc2NhcGUpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIEdldCBpbmZvIGFib3V0IGdhbGxlcnkgbmFtZSBhbmQgY3VycmVudCBpbmRleCBmcm9tIHVybFxyXG4gIGZ1bmN0aW9uIHBhcnNlVXJsKCkge1xyXG4gICAgdmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSksXHJcbiAgICAgIHJleiA9IGhhc2guc3BsaXQoXCItXCIpLFxyXG4gICAgICBpbmRleCA9IHJlei5sZW5ndGggPiAxICYmIC9eXFwrP1xcZCskLy50ZXN0KHJleltyZXoubGVuZ3RoIC0gMV0pID8gcGFyc2VJbnQocmV6LnBvcCgtMSksIDEwKSB8fCAxIDogMSxcclxuICAgICAgZ2FsbGVyeSA9IHJlei5qb2luKFwiLVwiKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBoYXNoOiBoYXNoLFxyXG4gICAgICAvKiBJbmRleCBpcyBzdGFydGluZyBmcm9tIDEgKi9cclxuICAgICAgaW5kZXg6IGluZGV4IDwgMSA/IDEgOiBpbmRleCxcclxuICAgICAgZ2FsbGVyeTogZ2FsbGVyeVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIFRyaWdnZXIgY2xpY2sgZXZudCBvbiBsaW5rcyB0byBvcGVuIG5ldyBmYW5jeUJveCBpbnN0YW5jZVxyXG4gIGZ1bmN0aW9uIHRyaWdnZXJGcm9tVXJsKHVybCkge1xyXG4gICAgaWYgKHVybC5nYWxsZXJ5ICE9PSBcIlwiKSB7XHJcbiAgICAgIC8vIElmIHdlIGNhbiBmaW5kIGVsZW1lbnQgbWF0Y2hpbmcgJ2RhdGEtZmFuY3lib3gnIGF0cmlidXRlLFxyXG4gICAgICAvLyB0aGVuIHRyaWdnZXJpbmcgY2xpY2sgZXZlbnQgc2hvdWxkIHN0YXJ0IGZhbmN5Qm94XHJcbiAgICAgICQoXCJbZGF0YS1mYW5jeWJveD0nXCIgKyAkLmVzY2FwZVNlbGVjdG9yKHVybC5nYWxsZXJ5KSArIFwiJ11cIilcclxuICAgICAgICAuZXEodXJsLmluZGV4IC0gMSlcclxuICAgICAgICAuZm9jdXMoKVxyXG4gICAgICAgIC50cmlnZ2VyKFwiY2xpY2suZmItc3RhcnRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBHZXQgZ2FsbGVyeSBuYW1lIGZyb20gY3VycmVudCBpbnN0YW5jZVxyXG4gIGZ1bmN0aW9uIGdldEdhbGxlcnlJRChpbnN0YW5jZSkge1xyXG4gICAgdmFyIG9wdHMsIHJldDtcclxuXHJcbiAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBvcHRzID0gaW5zdGFuY2UuY3VycmVudCA/IGluc3RhbmNlLmN1cnJlbnQub3B0cyA6IGluc3RhbmNlLm9wdHM7XHJcbiAgICByZXQgPSBvcHRzLmhhc2ggfHwgKG9wdHMuJG9yaWcgPyBvcHRzLiRvcmlnLmRhdGEoXCJmYW5jeWJveFwiKSB8fCBvcHRzLiRvcmlnLmRhdGEoXCJmYW5jeWJveC10cmlnZ2VyXCIpIDogXCJcIik7XHJcblxyXG4gICAgcmV0dXJuIHJldCA9PT0gXCJcIiA/IGZhbHNlIDogcmV0O1xyXG4gIH1cclxuXHJcbiAgLy8gU3RhcnQgd2hlbiBET00gYmVjb21lcyByZWFkeVxyXG4gICQoZnVuY3Rpb24oKSB7XHJcbiAgICAvLyBDaGVjayBpZiB1c2VyIGhhcyBkaXNhYmxlZCB0aGlzIG1vZHVsZVxyXG4gICAgaWYgKCQuZmFuY3lib3guZGVmYXVsdHMuaGFzaCA9PT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFVwZGF0ZSBoYXNoIHdoZW4gb3BlbmluZy9jbG9zaW5nIGZhbmN5Qm94XHJcbiAgICAkKGRvY3VtZW50KS5vbih7XHJcbiAgICAgIFwib25Jbml0LmZiXCI6IGZ1bmN0aW9uKGUsIGluc3RhbmNlKSB7XHJcbiAgICAgICAgdmFyIHVybCwgZ2FsbGVyeTtcclxuXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmdyb3VwW2luc3RhbmNlLmN1cnJJbmRleF0ub3B0cy5oYXNoID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXJsID0gcGFyc2VVcmwoKTtcclxuICAgICAgICBnYWxsZXJ5ID0gZ2V0R2FsbGVyeUlEKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgLy8gTWFrZSBzdXJlIGdhbGxlcnkgc3RhcnQgaW5kZXggbWF0Y2hlcyBpbmRleCBmcm9tIGhhc2hcclxuICAgICAgICBpZiAoZ2FsbGVyeSAmJiB1cmwuZ2FsbGVyeSAmJiBnYWxsZXJ5ID09IHVybC5nYWxsZXJ5KSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5jdXJySW5kZXggPSB1cmwuaW5kZXggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIFwiYmVmb3JlU2hvdy5mYlwiOiBmdW5jdGlvbihlLCBpbnN0YW5jZSwgY3VycmVudCwgZmlyc3RSdW4pIHtcclxuICAgICAgICB2YXIgZ2FsbGVyeTtcclxuXHJcbiAgICAgICAgaWYgKCFjdXJyZW50IHx8IGN1cnJlbnQub3B0cy5oYXNoID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgbmVlZCB0byB1cGRhdGUgd2luZG93IGhhc2hcclxuICAgICAgICBnYWxsZXJ5ID0gZ2V0R2FsbGVyeUlEKGluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgaWYgKCFnYWxsZXJ5KSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYXJpYWJsZSBjb250YWluaW5nIGxhc3QgaGFzaCB2YWx1ZSBzZXQgYnkgZmFuY3lCb3hcclxuICAgICAgICAvLyBJdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGZhbmN5Qm94IG5lZWRzIHRvIGNsb3NlIGFmdGVyIGhhc2ggY2hhbmdlIGlzIGRldGVjdGVkXHJcbiAgICAgICAgaW5zdGFuY2UuY3VycmVudEhhc2ggPSBnYWxsZXJ5ICsgKGluc3RhbmNlLmdyb3VwLmxlbmd0aCA+IDEgPyBcIi1cIiArIChjdXJyZW50LmluZGV4ICsgMSkgOiBcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gSWYgY3VycmVudCBoYXNoIGlzIHRoZSBzYW1lICh0aGlzIGluc3RhbmNlIG1vc3QgbGlrZWx5IGlzIG9wZW5lZCBieSBoYXNoY2hhbmdlKSwgdGhlbiBkbyBub3RoaW5nXHJcbiAgICAgICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5oYXNoID09PSBcIiNcIiArIGluc3RhbmNlLmN1cnJlbnRIYXNoKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZmlyc3RSdW4gJiYgIWluc3RhbmNlLm9yaWdIYXNoKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5vcmlnSGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmhhc2hUaW1lcikge1xyXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KGluc3RhbmNlLmhhc2hUaW1lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgaGFzaFxyXG4gICAgICAgIGluc3RhbmNlLmhhc2hUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAoXCJyZXBsYWNlU3RhdGVcIiBpbiB3aW5kb3cuaGlzdG9yeSkge1xyXG4gICAgICAgICAgICB3aW5kb3cuaGlzdG9yeVtmaXJzdFJ1biA/IFwicHVzaFN0YXRlXCIgOiBcInJlcGxhY2VTdGF0ZVwiXShcclxuICAgICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgICBkb2N1bWVudC50aXRsZSxcclxuICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgXCIjXCIgKyBpbnN0YW5jZS5jdXJyZW50SGFzaFxyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XHJcbiAgICAgICAgICAgICAgaW5zdGFuY2UuaGFzQ3JlYXRlZEhpc3RvcnkgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGluc3RhbmNlLmN1cnJlbnRIYXNoO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGluc3RhbmNlLmhhc2hUaW1lciA9IG51bGw7XHJcbiAgICAgICAgfSwgMzAwKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIFwiYmVmb3JlQ2xvc2UuZmJcIjogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQpIHtcclxuICAgICAgICBpZiAoY3VycmVudC5vcHRzLmhhc2ggPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGVhclRpbWVvdXQoaW5zdGFuY2UuaGFzaFRpbWVyKTtcclxuXHJcbiAgICAgICAgLy8gR290byBwcmV2aW91cyBoaXN0b3J5IGVudHJ5XHJcbiAgICAgICAgaWYgKGluc3RhbmNlLmN1cnJlbnRIYXNoICYmIGluc3RhbmNlLmhhc0NyZWF0ZWRIaXN0b3J5KSB7XHJcbiAgICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZS5jdXJyZW50SGFzaCkge1xyXG4gICAgICAgICAgaWYgKFwicmVwbGFjZVN0YXRlXCIgaW4gd2luZG93Lmhpc3RvcnkpIHtcclxuICAgICAgICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgd2luZG93LmxvY2F0aW9uLnNlYXJjaCArIChpbnN0YW5jZS5vcmlnSGFzaCB8fCBcIlwiKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGluc3RhbmNlLm9yaWdIYXNoO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zdGFuY2UuY3VycmVudEhhc2ggPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiBuZWVkIHRvIHN0YXJ0L2Nsb3NlIGFmdGVyIHVybCBoYXMgY2hhbmdlZFxyXG4gICAgJCh3aW5kb3cpLm9uKFwiaGFzaGNoYW5nZS5mYlwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHVybCA9IHBhcnNlVXJsKCksXHJcbiAgICAgICAgZmIgPSBudWxsO1xyXG5cclxuICAgICAgLy8gRmluZCBsYXN0IGZhbmN5Qm94IGluc3RhbmNlIHRoYXQgaGFzIFwiaGFzaFwiXHJcbiAgICAgICQuZWFjaChcclxuICAgICAgICAkKFwiLmZhbmN5Ym94LWNvbnRhaW5lclwiKVxyXG4gICAgICAgICAgLmdldCgpXHJcbiAgICAgICAgICAucmV2ZXJzZSgpLFxyXG4gICAgICAgIGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICAgICAgdmFyIHRtcCA9ICQodmFsdWUpLmRhdGEoXCJGYW5jeUJveFwiKTtcclxuXHJcbiAgICAgICAgICBpZiAodG1wICYmIHRtcC5jdXJyZW50SGFzaCkge1xyXG4gICAgICAgICAgICBmYiA9IHRtcDtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChmYikge1xyXG4gICAgICAgIC8vIE5vdywgY29tcGFyZSBoYXNoIHZhbHVlc1xyXG4gICAgICAgIGlmIChmYi5jdXJyZW50SGFzaCAhPT0gdXJsLmdhbGxlcnkgKyBcIi1cIiArIHVybC5pbmRleCAmJiAhKHVybC5pbmRleCA9PT0gMSAmJiBmYi5jdXJyZW50SGFzaCA9PSB1cmwuZ2FsbGVyeSkpIHtcclxuICAgICAgICAgIGZiLmN1cnJlbnRIYXNoID0gbnVsbDtcclxuXHJcbiAgICAgICAgICBmYi5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh1cmwuZ2FsbGVyeSAhPT0gXCJcIikge1xyXG4gICAgICAgIHRyaWdnZXJGcm9tVXJsKHVybCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENoZWNrIGN1cnJlbnQgaGFzaCBhbmQgdHJpZ2dlciBjbGljayBldmVudCBvbiBtYXRjaGluZyBlbGVtZW50IHRvIHN0YXJ0IGZhbmN5Qm94LCBpZiBuZWVkZWRcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIGlmICghJC5mYW5jeWJveC5nZXRJbnN0YW5jZSgpKSB7XHJcbiAgICAgICAgdHJpZ2dlckZyb21VcmwocGFyc2VVcmwoKSk7XHJcbiAgICAgIH1cclxuICAgIH0sIDUwKTtcclxuICB9KTtcclxufSkod2luZG93LCBkb2N1bWVudCwgalF1ZXJ5KTtcclxuXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4vL1xyXG4vLyBXaGVlbFxyXG4vLyBCYXNpYyBtb3VzZSB3ZWhlZWwgc3VwcG9ydCBmb3IgZ2FsbGVyeSBuYXZpZ2F0aW9uXHJcbi8vXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbihmdW5jdGlvbihkb2N1bWVudCwgJCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB2YXIgcHJldlRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuXHJcbiAgJChkb2N1bWVudCkub24oe1xyXG4gICAgXCJvbkluaXQuZmJcIjogZnVuY3Rpb24oZSwgaW5zdGFuY2UsIGN1cnJlbnQpIHtcclxuICAgICAgaW5zdGFuY2UuJHJlZnMuc3RhZ2Uub24oXCJtb3VzZXdoZWVsIERPTU1vdXNlU2Nyb2xsIHdoZWVsIE1vek1vdXNlUGl4ZWxTY3JvbGxcIiwgZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIHZhciBjdXJyZW50ID0gaW5zdGFuY2UuY3VycmVudCxcclxuICAgICAgICAgIGN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcblxyXG4gICAgICAgIGlmIChpbnN0YW5jZS5ncm91cC5sZW5ndGggPCAyIHx8IGN1cnJlbnQub3B0cy53aGVlbCA9PT0gZmFsc2UgfHwgKGN1cnJlbnQub3B0cy53aGVlbCA9PT0gXCJhdXRvXCIgJiYgY3VycmVudC50eXBlICE9PSBcImltYWdlXCIpKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJlbnQuJHNsaWRlLmhhc0NsYXNzKFwiZmFuY3lib3gtYW5pbWF0ZWRcIikpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGUgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcclxuXHJcbiAgICAgICAgaWYgKGN1cnJUaW1lIC0gcHJldlRpbWUgPCAyNTApIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByZXZUaW1lID0gY3VyclRpbWU7XHJcblxyXG4gICAgICAgIGluc3RhbmNlWygtZS5kZWx0YVkgfHwgLWUuZGVsdGFYIHx8IGUud2hlZWxEZWx0YSB8fCAtZS5kZXRhaWwpIDwgMCA/IFwibmV4dFwiIDogXCJwcmV2aW91c1wiXSgpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9KTtcclxufSkoZG9jdW1lbnQsIGpRdWVyeSk7XHJcbiJdfQ==
